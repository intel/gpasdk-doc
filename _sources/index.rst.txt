================================================================
Intel\ :sup:`Â®`\  Graphics Performance Analyzers Framework (|GPASDK|)
================================================================

|GPASDK| is a cross-platform, cross-API suite of tools and interfaces, which allows users to capture, playback and analyze graphics applications. The heart of the |GPASDK| is a robust, scalable and low overhead layering framework similar to the Vulkan* layer framework.

.. raw:: html

   <ul class="grid">
      <li class="grid-item">
         <a href="src/getting_started.html">
            <span class="grid-icon fa fa-map-signs"></span>
            <h2>Getting Started</h2>
         </a>
         <p>New to Intel<sup>&reg;</sup> GPA Framework? Start here!</p>
      </li>
      <li class="grid-item">
         <a href="src/guides.html">
            <span class="grid-icon fa fa-graduation-cap"></span>
            <h2>Guides</h2>
         </a>
         <p>Guides and tutorials to use beyond the Getting Started Guide.</p>
      </li>
      <li class="grid-item">
         <a href="src/samples.html">
            <span class="grid-icon fa fa-cogs"></span>
            <h2>Samples</h2>
         </a>
         <p>Explore the samples page to find a sample that applies to your use case.</p>
      </li>
      <li class="grid-item">
         <a href="src/reference.html">
            <span class="grid-icon fa fa-sign-in"></span>
            <h2>Reference</h2>
         </a>
         <p>C++ and Python interface references, utility binaries and layers documentation.</p>
      </li>
      <li class="grid-item">
         <a href="src/features.html">
            <span class="grid-icon fa fa-puzzle-piece"></span>
            <h2>Features</h2>
         </a>
         <p>Feature set supported in Intel<sup>&reg;</sup> GPA Framework by various graphics APIs.</p>
      </li>
      <li class="grid-item">
         <a href="src/requirements.html">
            <span class="grid-icon fa fa-laptop"></span>
            <h2>System Requirements</h2>
         </a>
         <p>Hardware and software requirements for Intel<sup>&reg;</sup> GPA Framework.</p>
      </li>
      <li class="grid-item">
         <a href="src/release_notes.html">
            <span class="grid-icon fa fa-database"></span>
            <h2>Release Notes</h2>
         </a>
         <p>Check out what's new in Intel<sup>&reg;</sup> GPA Framework.</p>
      </li>
      <li class="grid-item">
         <a href="src/troubleshooting.html">
            <span class="grid-icon fa fa-question"></span>
            <h2>Troubleshooting</h2>
         </a>
         <p>Known issues and limitations.</p>
      </li>
   </ul>

.. only:: html

In a nutshell, an |GPASDK| user can:

**Capture** a stream of a running application:  

.. code-block:: console

   > gpa-injector --layer capture [PATH_TO_EXECUTABLE]

**Playback** the stream to recreate the application graphics execution:

.. code-block:: console

   > gpa-player Documents/GPA/[PATH_TO_STREAM]

**Analyze** the stream using programmatic interfaces. For example:

   - Play back a stream up to a given frame
   - Get a list of API calls
   - Get metrics
   - Produce a performance regression report

===================================
Why should I use |GPASDK|?
===================================
|GPASDK| is a powerful tool that caters to various use cases. This section describes example use cases.

Test/Validation Engineer
========================

Unlike crash no/crash validation, performance regressions are difficult to characterize and spot at a granular level. Test/validation engineers can integrate |GPASDK| into Continuous Integration automated frameworks with native C++ applications or with python interfaces to capture a known workload and analyze a given frame. |GPASDK| reports performance improvements, regressions and frame budget analysis at a per draw call or debug region level.

Game Engine Developer
=====================

|GPASDK| allows game engine developers to integrate performance profiling capabilities into an engine.

Game Developer
==============

Game developers can use |GPASDK| to automate performance optimization experiments into scripts to quickly identify common bottlenecks. Multi-frame streams can help spotting performance issues, which are hard to characterize with single-frame capture, such as overall frame time variance, intermittent glitches, frame drops.

=========
Contents
=========

 - Binary tools to capture and playback graphics streams to/from disk
 - C++ and Python interfaces. Collection of headers and libraries for programmatical analysis of a stream
 - Sample code showing how to leverage the programmatic interfaces to gather data
 - Customizable layering/shimming framework to enable real-time and replay data collection

==============
Features
==============

.. include:: src/features_table.rst

=====================
How to Use This Guide
=====================

Check out the :ref:`getting_started` guide to learn how to use the built-in capture and playback functionality.

To learn more about the layers that are packaged with the |GPASDK| visit the :ref:`layers` page. 

Explore the :ref:`utilities` page to find a deeper explanation of all the parameters that can be passed to the capture and playback applications.

Find the right workflow for your needs by navigating straight to the :ref:`next_steps` section within the :ref:`getting_started` guide. Explore the |GPASDK| components in the :ref:`reference` section. To find a sample that applies to your use case, explore the :ref:`samples` page.

.. toctree::
   :caption: Table of Contents
   :maxdepth: 3

   src/getting_started
   src/guides
   src/samples
   src/reference
   src/features
   src/requirements
   src/release_notes
   src/troubleshooting
   src/licenses
   src/disclaimer

.. include:: src/aliases.rst
