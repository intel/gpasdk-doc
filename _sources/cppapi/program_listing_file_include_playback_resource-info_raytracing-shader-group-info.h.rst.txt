
.. _program_listing_file_include_playback_resource-info_raytracing-shader-group-info.h:

Program Listing for File raytracing-shader-group-info.h
=======================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_resource-info_raytracing-shader-group-info.h>` (``include\playback\resource-info\raytracing-shader-group-info.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   
   Â© Intel Corporation.
   
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "playback/resource-info/detail/span.h"
   #include "playback/resource-info/resource-info.h"
   
   #include <string>
   #include <vector>
   
   namespace gpa {
   namespace playback {
   
   class PipelineSignatureInfo;
   
   class RaytracingShaderGroupInfo
       : public ResourceInfo
   {
   public:
       TypeId GetTypeId() const override final;
   
       enum class Type {
           kUnknown,
           kGeneral,
           kTrianglesHitGroup,
           kProceduralHitGroup,
       };
   
       struct ShaderLink
       {
           ResourceId libraryId{0};           
           size_t entryPointIndex{0};         
           char const* pGlobalName{nullptr};  
       };
   
       static ShaderLink kNullShader;  
   
       Type type{Type::kUnknown};                                  
       ShaderLink generalShader{kNullShader};                      
       ShaderLink closestHitShader{kNullShader};                   
       ShaderLink anyHitShader{kNullShader};                       
       ShaderLink intersectionShader{kNullShader};                 
       size_t captureIdSize{0};                                    
       uint8_t const* pCaptureId{nullptr};                         
       PipelineSignatureInfo const* pLocalSignatureInfo{nullptr};  
   
   private:
       void OnRegister() override final;
   
       class Storage final
       {
       public:
           std::string generalShaderName;
           std::string closestHitShaderName;
           std::string anyHitShaderName;
           std::string intersectionShaderName;
           std::vector<uint8_t> captureId;
       } mStorage;
   };
   
   namespace detail {
   
   template<>
   inline auto MakeTuple<RaytracingShaderGroupInfo>(const RaytracingShaderGroupInfo& shaderGroupInfo)
   {
       return std::make_tuple(
           shaderGroupInfo.type,
           shaderGroupInfo.generalShader.libraryId,
           shaderGroupInfo.generalShader.entryPointIndex,
           MakeSpan(shaderGroupInfo.generalShader.pGlobalName),
           shaderGroupInfo.closestHitShader.libraryId,
           shaderGroupInfo.closestHitShader.entryPointIndex,
           MakeSpan(shaderGroupInfo.closestHitShader.pGlobalName),
           shaderGroupInfo.anyHitShader.libraryId,
           shaderGroupInfo.anyHitShader.entryPointIndex,
           MakeSpan(shaderGroupInfo.anyHitShader.pGlobalName),
           shaderGroupInfo.intersectionShader.libraryId,
           shaderGroupInfo.intersectionShader.entryPointIndex,
           MakeSpan(shaderGroupInfo.intersectionShader.pGlobalName),
           MakeSpan(shaderGroupInfo.pCaptureId, shaderGroupInfo.captureIdSize),
           shaderGroupInfo.pLocalSignatureInfo);
   }
   
   }  // namespace detail
   }  // namespace playback
   }  // namespace gpa
