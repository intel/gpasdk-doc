
.. _program_listing_file_include_concurrent_thread-pool.h:

Program Listing for File thread-pool.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_concurrent_thread-pool.h>` (``include/concurrent/thread-pool.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   #pragma once
   
   #include <atomic>
   #include <future>
   #include <functional>
   #include <mutex>
   #include <thread>
   #include <vector>
   
   #include "concurrent/queue.h"
   
   namespace gpa {
   namespace concurrent {
   
   using VoidFunction = std::function<void()>;
   
   class ThreadPool;
   
   class Thread
   {
   public:
       enum ThreadState {
           kUninitialized,
           kAliveIdle,
           kAliveBusy,
           kDead
       };
   
       Thread(ThreadPool* parentPool, VoidFunction initializer = nullptr);
   
       ~Thread();
   
       void RequestShutdown();
       void WaitForShutdown();
       ThreadState State();
   
   private:
       void Execute();
   
       ThreadPool* mParentPool;
   
       std::atomic<bool> mStayAlive;
       std::atomic<ThreadState> mState;
       VoidFunction mInitializer;
       std::thread mThread;
   };
   
   struct ThreadPoolTask
   {
       VoidFunction job;
       bool optional;
   };
   
   class ThreadPool
   {
   private:
       template<typename Fun, typename... Args>
       auto SubmitJobImpl(bool optional, Fun&& function, Args&&... args) -> std::future<decltype(function(args...))>
       {
           if (!mAcceptNewJobs) {
               // return invalid future object
               return std::future<decltype(function(args...))>();
           }
   
           std::function<decltype(function(args...))()> functionWithParams = std::bind(std::forward<Fun>(function), std::forward<Args>(args)...);
           auto taskPtr = std::make_shared<std::packaged_task<decltype(function(args...))()>>(functionWithParams);
           VoidFunction wrappedFunction = [taskPtr, this]() {
               (*taskPtr)();
               this->IncrementFinishedJobsCount();
           };
           mTaskQueue.Push({wrappedFunction, optional});
           IncrementSubmittedJobsCount();
           mJobAvailable.notify_one();
           return taskPtr->get_future();
       }
   
   public:
       ThreadPool(uint32_t threadCount, VoidFunction initializer = nullptr);
       ~ThreadPool();
   
       uint32_t ThreadCount();
       uint32_t ThreadCountWithState(Thread::ThreadState state);
       void AddThreads(uint32_t threadCount, VoidFunction initializer = nullptr);
   
       template<typename Fun, typename... Args>
       auto SubmitJob(Fun&& function, Args&&... args) -> std::future<decltype(function(args...))>
       {
           return SubmitJobImpl(false, function, args...);
       }
   
       template<typename Fun, typename... Args>
       auto SubmitOptionalJob(Fun&& function, Args&&... args) -> std::future<decltype(function(args...))>
       {
           return SubmitJobImpl(true, function, args...);
       }
   
       void WaitTillFinished();
   
       template<typename Fun, typename... Args>
       auto RunWhenFinished(Fun&& function, Args&&... args) -> std::future<decltype(function(args...))>
       {
           if (!mAcceptNewJobs) {
               // return invalid future object
               return std::future<decltype(function(args...))>();
           }
   
           std::function<decltype(function(args...))()> functionWithParams = std::bind(std::forward<Fun>(function), std::forward<Args>(args)...);
           auto taskPtr = std::make_shared<std::packaged_task<decltype(function(args...))()>>(functionWithParams);
           VoidFunction wrappedFunction = [taskPtr, this]() {
               uint64_t submittedTillNow = this->mSubmittedJobsCount;
               while (mFinishedJobsCount < submittedTillNow) {
                   std::this_thread::yield();
               }
               (*taskPtr)();
           };
           mTaskQueue.Push({wrappedFunction, false});
           mJobAvailable.notify_one();
           return taskPtr->get_future();
       }
   
       void Shutdown();
   
       void CancelOptionalJobs();
   
   private:
       void KillAllThreads();
   
       SimpleConcurrentQueue<ThreadPoolTask> mTaskQueue;
       std::vector<Thread*> mThreads;
       std::atomic<uint64_t> mSubmittedJobsCount = {0};
       std::atomic<uint64_t> mFinishedJobsCount = {0};
       std::condition_variable mJobAvailable;
       std::mutex mJobMutex;
       std::atomic_bool mAcceptNewJobs = {true};
   
       friend class Thread;
   
       void IncrementFinishedJobsCount();
       void IncrementSubmittedJobsCount();
   };
   
   }  // namespace concurrent
   }  // namespace gpa
