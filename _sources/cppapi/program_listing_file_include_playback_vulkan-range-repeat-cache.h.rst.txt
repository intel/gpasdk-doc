
.. _program_listing_file_include_playback_vulkan-range-repeat-cache.h:

Program Listing for File vulkan-range-repeat-cache.h
====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_vulkan-range-repeat-cache.h>` (``include\playback\vulkan-range-repeat-cache.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "instrumentation/gpa-secure.h"
   #include "logger/logger.h"
   #include "object-map/object-map.h"
   #include "playback/range-repeat-cache.h"
   #include "playback-support/playback-support.h"
   #include "reflection/argument.h"
   #include "serialization/apicallcontext.h"
   
   #if defined(_WIN32) || defined(_WIN64)
   #define gvk_dlopen(LIBRARY_NAME) (void*)gpa::secure::LoadLibrarySDL(LIBRARY_NAME)
   #endif
   #include "gvk-defines.hpp"
   #include "gvk-restore-info.hpp"
   #include "VK_LAYER_INTEL_gvk_restore_point.hpp"
   #include "VK_LAYER_INTEL_gvk_state_tracker.hpp"
   
   #define VK_NO_PROTOTYPES
   #include <vulkan/vulkan.h>
   #undef VK_NO_PROTOTYPES
   
   #include <cassert>
   #include <vector>
   
   #define GVK_RESTORE_POINT_REPEAT_ENABLED 1
   
   namespace gpa {
   namespace playback {
   
   class Callable;
   
   namespace repeat {
   namespace vulkan {
   
   template<class BaseClass>
   class RangeRepeatCacheVKInternal
       : public BaseClass
   {
   public:
       typedef std::shared_ptr<RangeRepeatCacheVKInternal<BaseClass>> Ptr;
       RangeRepeatCacheVKInternal(void* object, uint64_t captureKey, Context* pContext, Callable* pCallable)
           : BaseClass(pContext, pCallable)
       {
           assert(pCallable);
           mCreationCallable = *pCallable;
           BaseClass::SetObject(captureKey, object);
           uint64_t* pParentHandle = nullptr;
           auto const* pPossiblyParentHandleArgument = pCallable->Argument(0, (const void**)&pParentHandle);
           assert(pPossiblyParentHandleArgument);
           if (pPossiblyParentHandleArgument->Type() == serialization::BasicType::kHandle && pParentHandle) {
               mParentHandle = *pParentHandle;
           }
       }
   
       virtual ~RangeRepeatCacheVKInternal() override {}
       virtual void OnRangeEnter(GPADispatchTable const*&) override { mRangeEntered = true; }
   
       virtual void OnRangeRepeatRecreateObject(GPADispatchTable const*& pDispatchTable, uint64_t repeatPass)
       {
           (void)pDispatchTable;
           (void)repeatPass;
   #if 0
           // TODO : Should be hanlded by RangeRepeatCacheVkInstance
           BaseClass::mObject = BaseClass::mContext->objMap->AcquireObject(BaseClass::mObjectKey);
           assert(BaseClass::mObject && "Could not obtain object from object map");
   #endif
       }
   
       virtual void OnRangeRepeatRestoreState(GPADispatchTable const*& pDispatchTable, uint64_t repeatPass)
       {
           (void)pDispatchTable;
           mLastRestoreStatePass = repeatPass;
       }
   
       virtual void OnRangeExit(GPADispatchTable const*& pDispatchTable)
       {
           (void)pDispatchTable;
           mRangeEntered = false;
           BaseClass::mUsedInRange = false;
       }
   
       uint32_t GetCreationCallFunToken() const { return mCreationCallable.Token()._function; }
       playback::Callable const& GetCreationCallable() const { return mCreationCallable; }
       uint64_t GetParentHandle() { return mParentHandle; }
   
   protected:
       bool RangeEntered() { return mRangeEntered; }
       bool ObjectRecreatedInThisPass(uint64_t pass) { return (pass == mLastRecreateObjectPass); }
       bool StateRestoredInThisPass(uint64_t pass) { return (pass == mLastRestoreStatePass); }
   
   private:
       Callable mCreationCallable;
       bool mRangeEntered{};
   
   protected:
       uint64_t mLastRecreateObjectPass{UINT64_MAX};
       uint64_t mLastRestoreStatePass{UINT64_MAX};
       uint64_t mParentHandle{};
   };
   
   using RangeRepeatCacheVK = RangeRepeatCacheVKInternal<gpa::playback::repeat::RangeRepeatCache>;
   using RangeRepeatCacheVKForCommandBufers = RangeRepeatCacheVKInternal<gpa::playback::repeat::RangeRepeatCacheForCommandBuffers>;
   
   }  // namespace vulkan
   }  // namespace repeat
   }  // namespace playback
   }  // namespace gpa
