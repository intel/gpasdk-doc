
.. _program_listing_file_include_playback_resource-info_blend-state-info.h:

Program Listing for File blend-state-info.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_resource-info_blend-state-info.h>` (``include\playback\resource-info\blend-state-info.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   
   (c) Intel Corporation.
   
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "playback/resource-info/detail/span.h"
   #include "playback/resource-info/resource-info.h"
   
   namespace gpa {
   namespace playback {
   
   class BlendStateInfo final
       : public ResourceInfo
   {
   public:
       TypeId GetTypeId() const override final;
   
       uint32_t sampleMask{0};                                        
       float blendFactor[4] = {0, 0, 0, 0};                           
       bool alphaToCoverageEnable{false};                             
       bool independentBlendEnable{false};                            
       uint32_t attachmentCount{0};                                   
       api_types::BlendStateAttachment const* pAttachments{nullptr};  
   };
   
   namespace detail {
   
   template<>
   inline auto MakeTuple<BlendStateInfo>(const BlendStateInfo& blendStateInfo)
   {
       return std::make_tuple(blendStateInfo.sampleMask,
                              blendStateInfo.blendFactor,
                              blendStateInfo.alphaToCoverageEnable,
                              blendStateInfo.independentBlendEnable,
                              MakeSpan(blendStateInfo.pAttachments, blendStateInfo.attachmentCount));
   }
   
   }  // namespace detail
   }  // namespace playback
   }  // namespace gpa
