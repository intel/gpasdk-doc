
.. _program_listing_file_include_utility_pix-runtime.h:

Program Listing for File pix-runtime.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_utility_pix-runtime.h>` (``include\utility\pix-runtime.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   (c) Intel Corporation
   
   SPDX-License-Identifier: MIT
   
   ******************************************************************************/
   #pragma once
   #include <Windows.h>
   #include <d3d12.h>
   
   namespace gpa {
   namespace utility {
   
   struct PIXRuntimeHelper
   {
       using PIXBeginEventOnCommandList = void(WINAPI*)(ID3D12GraphicsCommandList* commandList, UINT64 color, PCSTR formatString);
       using PIXEndEventOnCommandList = void(WINAPI*)(ID3D12GraphicsCommandList* commandList);
   
       PIXBeginEventOnCommandList beginEventOnCommandList = nullptr;
       PIXEndEventOnCommandList endEventOnCommandList = nullptr;
   
       HMODULE pixRuntimeModule = 0;
       char msgBuffer[MAX_PACKAGE_NAME];
   
       PIXRuntimeHelper()
       {
           pixRuntimeModule = LoadLibraryW(L"WinPixEventRuntime.dll");
           if (!pixRuntimeModule) {
               return;
           }
   
           beginEventOnCommandList = (PIXBeginEventOnCommandList)GetProcAddress(pixRuntimeModule, "PIXBeginEventOnCommandList");
           endEventOnCommandList = (PIXEndEventOnCommandList)GetProcAddress(pixRuntimeModule, "PIXEndEventOnCommandList");
   
           memset(msgBuffer, 0, MAX_PACKAGE_NAME);
       }
   
       PIXRuntimeHelper(PIXRuntimeHelper const&) = delete;
       PIXRuntimeHelper& operator=(PIXRuntimeHelper const&) = delete;
   
       ~PIXRuntimeHelper()
       {
           FreeModule(pixRuntimeModule);
       }
   
       void BeginEventOnCommandList(ID3D12GraphicsCommandList* commandList, UINT64 color, PCSTR formatString, ...)
       {
           if (!beginEventOnCommandList) {
               return;
           }
   
           msgBuffer[0] = '\0';
   
           va_list args;
           va_start(args, formatString);
           vsnprintf(msgBuffer, MAX_PATH, formatString, args);
           va_end(args);
   
           beginEventOnCommandList(commandList, color, msgBuffer);
       }
   
       void EndEventOnCommandList(ID3D12GraphicsCommandList* commandList)
       {
           if (endEventOnCommandList) {
               endEventOnCommandList(commandList);
           }
       }
   };
   
   }  // namespace utility
   }  // namespace gpa
