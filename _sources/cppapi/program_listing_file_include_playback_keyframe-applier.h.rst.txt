
.. _program_listing_file_include_playback_keyframe-applier.h:

Program Listing for File keyframe-applier.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_keyframe-applier.h>` (``include\playback\keyframe-applier.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include <cstddef>
   
   #include "playback/stream-data-bookmark.h"
   #include <functional>
   
   namespace gpa {
   
   namespace stream {
   class StorageViewManager;
   }  // namespace stream
   
   namespace serialization {
   namespace metadata {
   class Keyframe;
   }  // namespace metadata
   
   }  // namespace serialization
   
   namespace playback {
   
   class Callable;
   class Player;
   class StreamData;
   
   namespace sync_handler {
   class SyncHandler;
   }  // namespace sync_handler
   
   class KeyframeApplier
   {
   public:
       KeyframeApplier(StreamData* streamData);
       ~KeyframeApplier();
   
       void EnumerateCalls(serialization::metadata::Keyframe const* keyframe, std::function<void(Callable*)> callback);
   
       StreamDataBookmark ResetToKeyframeStartPoint(serialization::metadata::Keyframe const* keyframe);
   
       StreamDataBookmark Apply(serialization::metadata::Keyframe const* keyframe, Player* player, bool trackState);
   
   private:
       StreamData* mStreamData = nullptr;
   };
   
   }  // namespace playback
   }  // namespace gpa
