
.. _program_listing_file_include_subcapture-support_subcapture-support.h:

Program Listing for File subcapture-support.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_subcapture-support_subcapture-support.h>` (``include/subcapture-support/subcapture-support.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   #include "igpa-config.h"
   #include "serialization/random-access-serializer.h"
   #if HAVE_DIRECTX
   #include "utility/directx-utilities.h"
   #endif
   
   #include <map>
   #include <list>
   
   namespace gpa {
   
   enum class SubcaptureDataVersion : uint32_t {
       VERSION_INVALID,
       VERSION_1,
       VERSION_COUNT,
       UNAVAILABLE = UINT32_MAX
   };
   
   struct SubcaptureRestorationData
   {
       SubcaptureDataVersion Version = SubcaptureDataVersion::VERSION_INVALID;
       std::map<uint64_t, std::list<std::pair<uint64_t, uint64_t>>> ReverseObjectMap;  // Subcapture creation time runtime value to capture key map
   #if HAVE_DIRECTX
       std::map<uint64_t, uint64_t> ReverseDescriptorHeapGPUMap;  // Subcapture creation time runtime value to capture value GPU dheap map
       std::map<uint64_t, uint64_t> ReverseDescriptorHeapCPUMap;  // Subcapture creation time runtime value to capture value CPU dheap map
       std::map<uint64_t, uint64_t> ReverseGPUVirtualAddressMap;  // Subcapture creation time runtime value to capture value GPU VA map
   
       std::map<uint64_t, std::map<utility::directx::D3D12ShaderIdentifier, utility::directx::D3D12ShaderIdentifier>> ReverseShaderMapping;  // Subcapture creation time reverse shader mapping per SO
   #endif
   };
   
   namespace playback {
   namespace subcapture {
   
   void Serialize(gpa::serialization::RandomAccessSerializer* serializer);
   void Deserialize(gpa::serialization::RandomAccessSerializer* serializer, SubcaptureRestorationData& outData);
   void Apply(SubcaptureRestorationData const& subcaptureKeyRestorationData);
   
   }  // namespace subcapture
   }  // namespace playback
   }  // namespace gpa
