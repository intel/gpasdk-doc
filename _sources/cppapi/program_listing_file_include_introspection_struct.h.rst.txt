
.. _program_listing_file_include_introspection_struct.h:

Program Listing for File introspection/struct.h
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_introspection_struct.h>` (``include\introspection\struct.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include <cstdint>
   #include <vector>
   #include <string>
   
   namespace gpa {
   namespace introspection {
   
   class Declaration;
   
   class Struct
   {
   public:
       Struct(char const* name);
   
       Struct(Struct&& other);
       Struct(Struct const& other);
       Struct& operator=(Struct const& other);
       ~Struct();
   
       Struct& operator=(Struct&& other);
   
       void AddMember(introspection::Declaration&& declaration);
   
       char const* Name() const;
       uint64_t MemberCount() const;
       introspection::Declaration const* Member(uint64_t index) const;
       introspection::Declaration const* Member(uint64_t index, uint64_t* offset) const;
       uint64_t Size() const;
   
   private:
       struct MemberDef
       {
           introspection::Declaration const* declaration;
           uint64_t offset;
       };
       std::vector<MemberDef> mMembers;
       std::string mName;
   };
   
   }  // namespace introspection
   }  // namespace gpa
