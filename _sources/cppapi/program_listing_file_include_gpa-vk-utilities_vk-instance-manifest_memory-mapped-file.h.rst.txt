
.. _program_listing_file_include_gpa-vk-utilities_vk-instance-manifest_memory-mapped-file.h:

Program Listing for File memory-mapped-file.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_gpa-vk-utilities_vk-instance-manifest_memory-mapped-file.h>` (``include/gpa-vk-utilities/vk-instance-manifest/memory-mapped-file.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   
   Â© Intel Corporation.
   
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
   #include <experimental/filesystem>
   
   #ifdef VK_USE_PLATFORM_WIN32_KHR
   #include <Windows.h>
   #endif // VK_USE_PLATFORM_WIN32_KHR
   
   namespace gpa {
   namespace vulkan {
   
   class MemoryMappedFile final
   {
   public:
       MemoryMappedFile(const std::experimental::filesystem::path& filePath);
   
       ~MemoryMappedFile();
   
       size_t GetSize() const;
   
       const uint8_t* GetData() const;
   
   private:
       #ifdef VK_USE_PLATFORM_WIN32_KHR
       HANDLE mhFile { NULL };
       HANDLE mhMappedFile { NULL };
       HANDLE mhMappedFileView { NULL };
       #endif // VK_USE_PLATFORM_WIN32_KHR
       MemoryMappedFile(const MemoryMappedFile&) = delete;
       MemoryMappedFile& operator=(const MemoryMappedFile&) = delete;
   };
   
   } // namespace vulkan
   } // namespace gpa
