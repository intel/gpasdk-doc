
.. _program_listing_file_include_argsprinter_compathapi-argsprinter-classes.inl:

Program Listing for File compathapi-argsprinter-classes.inl
===========================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_argsprinter_compathapi-argsprinter-classes.inl>` (``include\argsprinter\compathapi-argsprinter-classes.inl``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   ******************************************************************************/
   #pragma once
   #include <string>
   template <>
   inline void Print(IUnknown const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "IUnknown" << std::endl;
   }
   
   template <>
   inline void Print(ICOMResource const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "ICOMResource" << std::endl;
   }
   
   template <>
   inline void Print(ICOMResource1 const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "ICOMResource1" << std::endl;
   }
   
   template <>
   inline void Print(INoParameter const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "INoParameter" << std::endl;
   }
   
   template <>
   inline void Print(IPrimitiveParameter const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "IPrimitiveParameter" << std::endl;
   }
   
   template <>
   inline void Print(IStructParameter const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "IStructParameter" << std::endl;
   }
   
   template <>
   inline void Print(IInterfaceParameter const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "IInterfaceParameter" << std::endl;
   }
   
   template <>
   inline void Print(IDataParameter const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "IDataParameter" << std::endl;
   }
   
   template <>
   inline void Print(IVariousParameter const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "IVariousParameter" << std::endl;
   }
   
   template <>
   inline void Print(IReturnValues const& src, std::string srcName, std::ostream & os, size_t indent ){
           // pure class
           (void) src;
           std::string indentString(indent * 4, ' ');
           os << indentString << srcName << "IReturnValues" << std::endl;
   }
   
