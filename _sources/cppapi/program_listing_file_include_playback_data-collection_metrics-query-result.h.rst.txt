
.. _program_listing_file_include_playback_data-collection_metrics-query-result.h:

Program Listing for File metrics-query-result.h
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_data-collection_metrics-query-result.h>` (``include\playback\data-collection\metrics-query-result.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Copyright (c) 2018 Intel Corporation
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "metrics/types.h"
   
   #include <cstdint>
   
   struct ResultsData;
   
   namespace gpa {
   
   namespace metrics {
   class IMetricGroup;
   struct QueryReport;
   }  // namespace metrics
   
   namespace data_collection {
   
   class MetricsQueryResult
   {
   public:
       MetricsQueryResult(
           metrics::IMetricGroup const** metricGroups,
           uint64_t const* startingCompositeMetricIndexForMetricsSourcePerGroup,
           uint64_t nGroups,
           uint64_t nRanges);
       MetricsQueryResult(MetricsQueryResult&& other);
       ~MetricsQueryResult();
   
       uint32_t const* QueryReports(metrics::QueryReport const* const** ppQueryReportPointerArray) const;
       metrics::MetricValue const* RangeResults(uint64_t groupIndex, uint64_t metricIndexInGroup) const;
       metrics::MetricValue const* RangeResults(uint64_t compositeMetricIndex) const;
   
       uint64_t GetRangeCount();
   
   private:
       uint64_t mGroupCount;
       uint64_t mRangeCount;
       uint64_t* mMetricsPerGroup;
       uint64_t* mStartingCompositeMetricIndexPerGroup;
       ResultsData* mResultsData;
       metrics::QueryReport** mQueryReportPointerArray;
       uint32_t mQueryReportPointersUsedCount;
   
       MetricsQueryResult(MetricsQueryResult const& other) = delete;
       MetricsQueryResult& operator=(MetricsQueryResult const& other) = delete;
   };
   
   }  // namespace data_collection
   }  // namespace gpa
