
.. _program_listing_file_include_api-types_enumerations.h:

Program Listing for File enumerations.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_api-types_enumerations.h>` (``include/api-types/enumerations.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   
   Â© Intel Corporation.
   
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "api-types/format.h"
   
   #include <cstdint>
   #include <limits>
   
   namespace gpa {
   namespace api_types {
   
   enum AddressMode {
       GPA_ADDRESS_MODE_UNKNOWN,
       GPA_ADDRESS_MODE_WRAP,
       GPA_ADDRESS_MODE_MIRROR,
       GPA_ADDRESS_MODE_CLAMP,
       GPA_ADDRESS_MODE_BORDER,
       GPA_ADDRESS_MODE_MIRROR_ONCE,
       GPA_ADDRESS_MODE_COUNT,
       GPA_ADDRESS_MODE_BEGIN = GPA_ADDRESS_MODE_UNKNOWN,
   };
   
   enum ComprisonFunction {
       GPA_COMPARISON_FUNCTION_UNKNOWN,
       GPA_COMPARISON_FUNCTION_NEVER,
       GPA_COMPARISON_FUNCTION_LESS,
       GPA_COMPRAISON_FUNCTION_EQUAL,
       GPA_COMPARISON_FUNCTION_LESS_EQUAL,
       GPA_COMPARISON_FUNCTION_GREATER,
       GPA_COMPARISON_FUNCTION_NOT_EQUAL,
       GPA_COMPARISON_FUNCTION_GREATER_EQUAL,
       GPA_COMPARISON_FUNCTION_ALWAYS,
       GPA_COMPARISON_FUNCTION_COUNT,
       GPA_COMPARISON_FUNCTION_BEGIN = GPA_COMPARISON_FUNCTION_UNKNOWN,
   };
   
   enum BindPoint {
       GPA_BIND_POINT_UNKNOWN,
       GPA_BIND_POINT_COMPUTE,
       GPA_BIND_POINT_GRAPHICS,
       GPA_BIND_POINT_RAY_TRACING,
       GPA_BIND_POINT_COUNT,
       GPA_BIND_POINT_BEGIN = GPA_BIND_POINT_UNKNOWN,
   };
   
   enum FilterMode {
       GPA_FILTER_MODE_UNKNOWN,
       GPA_FILTER_MODE_NEAREST,
       GPA_FILTER_MODE_LINEAR,
       GPA_FILTER_MODE_CUBIC,
       GPA_FILTER_MODE_COUNT,
       GPA_FILTER_MODE_BEGIN = GPA_FILTER_MODE_UNKNOWN,
   };
   
   enum IndexType {
       GPA_INDEX_TYPE_UNKNOWN,
       GPA_INDEX_TYPE_NONE,
       GPA_INDEX_TYPE_UINT8,
       GPA_INDEX_TYPE_UINT16,
       GPA_INDEX_TYPE_UINT32,
       GPA_INDEX_TYPE_COUNT,
       GPA_INDEX_TYPE_BEGIN = GPA_INDEX_TYPE_UNKNOWN,
   };
   
   enum PrimitiveTopology {
       GPA_PRIMITIVE_TOPOLOGY_UNKNOWN,
       GPA_PRIMITIVE_TOPOLOGY_POINT_LIST,
       GPA_PRIMITIVE_TOPOLOGY_LINE_LIST,
       GPA_PRIMITIVE_TOPOLOGY_LINE_STRIP,
       GPA_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
       GPA_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
       GPA_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
       GPA_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
       GPA_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
       GPA_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
       GPA_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
       GPA_PRIMITIVE_TOPOLOGY_PATCH_LIST,
       GPA_PRIMITIVE_TOPOLOGY_COUNT,
       GPA_PRIMITIVE_TOPOLOGY_BEGIN = GPA_PRIMITIVE_TOPOLOGY_UNKNOWN,
   };
   
   enum ShaderLanguage {
       GPA_SHADER_LANGUAGE_UNKNOWN = 0,
   
       //---- High-level shader formats ----
       GPA_SHADER_LANGUAGE_GLSL,
       GPA_SHADER_LANGUAGE_HLSL,
       GPA_SHADER_LANGUAGE_CM,
   
       //---- Intermediate formats ----
       GPA_SHADER_LANGUAGE_DXBC,   
       GPA_SHADER_LANGUAGE_DXIL,   
       GPA_SHADER_LANGUAGE_SPIRV,  
   
       //---- Driver formats ----
       GPA_SHADER_LANGUAGE_ISA,
   
       GPA_SHADER_LANGUAGE_COUNT,
       GPA_SHADER_LANGUAGE_BEGIN = GPA_SHADER_LANGUAGE_UNKNOWN,
       GPA_SHADER_LANGUAGE_END = GPA_SHADER_LANGUAGE_COUNT
   };
   
   enum ShaderStageFlagBits : uint32_t {
       // clang-format off
       GPA_SHADER_STAGE_UNKNOWN                 = 0,
       GPA_SHADER_STAGE_VERTEX                  = 1,
       GPA_SHADER_STAGE_HULL                    = 1 << 1,
       GPA_SHADER_STAGE_TESSELLATION_CONTROL    = GPA_SHADER_STAGE_HULL,
       GPA_SHADER_STAGE_DOMAIN                  = 1 << 2,
       GPA_SHADER_STAGE_TESSELLATION_EVALUATION = GPA_SHADER_STAGE_DOMAIN,
       GPA_SHADER_STAGE_GEOMETRY                = 1 << 3,
       GPA_SHADER_STAGE_PIXEL                   = 1 << 4,
       GPA_SHADER_STAGE_FRAGMENT                = GPA_SHADER_STAGE_PIXEL,
       GPA_SHADER_STAGE_COMPUTE                 = 1 << 5,
       GPA_SHADER_STAGE_RAYGEN                  = 1 << 6,
       GPA_SHADER_STAGE_ANY_HIT                 = 1 << 7,
       GPA_SHADER_STAGE_CLOSEST_HIT             = 1 << 8,
       GPA_SHADER_STAGE_MISS                    = 1 << 9,
       GPA_SHADER_STAGE_INTERSECTION            = 1 << 10,
       GPA_SHADER_STAGE_CALLABLE                = 1 << 11,
       GPA_SHADER_STAGE_AMPLIFICATION           = 1 << 12,
       GPA_SHADER_STAGE_MESH                    = 1 << 13,
       GPA_SHADER_STAGE_DXIL_LIBRARY            = 1 << 14,
       GPA_SHADER_STAGE_ALL_GRAPHICS =
           GPA_SHADER_STAGE_VERTEX |
           GPA_SHADER_STAGE_HULL |
           GPA_SHADER_STAGE_DOMAIN |
           GPA_SHADER_STAGE_GEOMETRY |
           GPA_SHADER_STAGE_FRAGMENT,
       GPA_SHADER_STAGE_ALL = std::numeric_limits<uint32_t>::max(),
       // clang-format on
   };
   using ShaderStageFlags = uint32_t;
   
   constexpr uint32_t GPA_SHADER_STAGE_COUNT = 15;  
   
   enum DirectXRegisterTypes {
       GPA_SHADER_REGISTER_UNKNOWN,
       GPA_SHADER_REGISTER_CBV,
       GPA_SHADER_REGISTER_SRV,
       GPA_SHADER_REGISTER_UAV,
       GPA_SHADER_REGISTER_SAMPLER,
       GPA_SHADER_REGISTER_COUNT,
       GPA_SHADER_REGISTER_BEGIN = GPA_SHADER_REGISTER_UNKNOWN,
   };
   enum TextureType {
       GPA_TEXTURE_TYPE_UNKNOWN,
       GPA_TEXTURE_TYPE_1D,
       GPA_TEXTURE_TYPE_2D,
       GPA_TEXTURE_TYPE_3D,
       GPA_TEXTURE_TYPE_CUBE,
       GPA_TEXTURE_TYPE_1D_ARRAY,
       GPA_TEXTURE_TYPE_2D_ARRAY,
       GPA_TEXTURE_TYPE_CUBE_ARRAY,
       GPA_TEXTURE_TYPE_COUNT,
       GPA_TEXTURE_TYPE_BEGIN = GPA_TEXTURE_TYPE_UNKNOWN,
   };
   
   enum TextureAspectFlagBits {
       GPA_TEXTURE_ASPECT_UNKNOWN = 0,
       GPA_TEXTURE_ASPECT_COLOR = 1 << 0,
       GPA_TEXTURE_ASPECT_DEPTH = 1 << 1,
       GPA_TEXTURE_ASPECT_STENCIL = 1 << 2,
       GPA_TEXTURE_ASPECT_METADATA = 1 << 3,
       GPA_TEXTURE_ASPECT_PLANE_0 = 1 << 4,
       GPA_TEXTURE_ASPECT_PLANE_1 = 1 << 5,
       GPA_TEXTURE_ASPECT_PLANE_2 = 1 << 6,
       GPA_TEXTURE_ASPECT_MEMORY_PLANE_0 = 1 << 7,
       GPA_TEXTURE_ASPECT_MEMORY_PLANE_1 = 1 << 8,
       GPA_TEXTURE_ASPECT_MEMORY_PLANE_2 = 1 << 9,
       GPA_TEXTURE_ASPECT_MEMORY_PLANE_3 = 1 << 10,
   };
   
   using TextureAspectFlags = uint32_t;
   
   enum VertexInputRate {
       GPA_VERTEX_INPUT_RATE_UNKNOWN,
       GPA_VERTEX_INPUT_RATE_PER_VERTEX,
       GPA_VERTEX_INPUT_RATE_PER_INSTANCE,
       GPA_VERTEX_INPUT_RATE_COUNT,
       GPA_VERTEX_INPUT_RATE_BEGIN = GPA_VERTEX_INPUT_RATE_UNKNOWN,
   };
   
   enum BlendFactor {
       GPA_BLEND_UNKNOWN,
       GPA_BLEND_ZERO,
       GPA_BLEND_ONE,
       GPA_BLEND_SRC_COLOR,
       GPA_BLEND_INV_SRC_COLOR,
       GPA_BLEND_SRC_ALPHA,
       GPA_BLEND_INV_SRC_ALPHA,
       GPA_BLEND_DEST_ALPHA,
       GPA_BLEND_INV_DEST_ALPHA,
       GPA_BLEND_DEST_COLOR,
       GPA_BLEND_INV_DEST_COLOR,
       GPA_BLEND_SRC_ALPHA_SAT,
       GPA_BLEND_BLEND_FACTOR,
       GPA_BLEND_INV_BLEND_FACTOR,
       GPA_BLEND_SRC1_COLOR,
       GPA_BLEND_INV_SRC1_COLOR,
       GPA_BLEND_SRC1_ALPHA,
       GPA_BLEND_INV_SRC1_ALPHA
   };
   
   enum BlendOp {
       GPA_BLEND_OP_UNKNOWN,
       GPA_BLEND_OP_ADD,
       GPA_BLEND_OP_SUBTRACT,
       GPA_BLEND_OP_REV_SUBTRACT,
       GPA_BLEND_OP_MIN,
       GPA_BLEND_OP_MAX
   };
   
   enum FillMode {
       GPA_FILL_UNKNOWN,
       GPA_FILL_WIREFRAME,
       GPA_FILL_SOLID
   };
   
   enum CullMode {
       GPA_CULL_UNKNOWN,
       GPA_CULL_NONE,
       GPA_CULL_FRONT,
       GPA_CULL_BACK
   };
   
   enum DepthWriteMask {
       GPA_DEPTH_WRITE_MASK_ZERO,
       GPA_DEPTH_WRITE_MASK_ALL,
       GPA_DEPTH_WRITE_MASK_UNKNOWN
   };
   
   enum ComparisonFunc {
       GPA_COMPARISON_NEVER,
       GPA_COMPARISON_LESS,
       GPA_COMPARISON_EQUAL,
       GPA_COMPARISON_LESS_EQUAL,
       GPA_COMPARISON_GREATER,
       GPA_COMPARISON_NOT_EQUAL,
       GPA_COMPARISON_GREATER_EQUAL,
       GPA_COMPARISON_ALWAYS,
       GPA_COMPARISON_UNKNOWN
   };
   
   enum StencilOp {
       GPA_STENCIL_OP_KEEP,
       GPA_STENCIL_OP_ZERO,
       GPA_STENCIL_OP_REPLACE,
       GPA_STENCIL_OP_INCR_SAT,
       GPA_STENCIL_OP_DECR_SAT,
       GPA_STENCIL_OP_INVERT,
       GPA_STENCIL_OP_INCR,
       GPA_STENCIL_OP_DECR,
       GPA_STENCIL_OP_UNKNOWN
   };
   
   }  // namespace api_types
   }  // namespace gpa
