
.. _program_listing_file_include_argsprinter_argsprinter-directx.h:

Program Listing for File argsprinter-directx.h
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_argsprinter_argsprinter-directx.h>` (``include/argsprinter/argsprinter-directx.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   #pragma once
   #include <d3d9.h>
   #include <d3d10_1.h>
   #include <d3d11_4.h>
   #include <d3d11on12.h>
   #include <d3d12.h>
   #include <dxgi1_6.h>
   #include <dxgi.h>
   #include <Windows.h>
   #include <string>
   
   namespace gpa {
   namespace serialization {
   namespace argsprinter {
   
   void PrintCustom(D3D12_CLEAR_VALUE const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_RESOURCE_BARRIER const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_TEXTURE_COPY_LOCATION const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_SHADER_RESOURCE_VIEW_DESC const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_UNORDERED_ACCESS_VIEW_DESC const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_RENDER_TARGET_VIEW_DESC const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_DEPTH_STENCIL_VIEW_DESC const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_ROOT_PARAMETER const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_ROOT_PARAMETER1 const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_VERSIONED_ROOT_SIGNATURE_DESC const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_INDIRECT_ARGUMENT_DESC const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_RAYTRACING_GEOMETRY_DESC const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_RENDER_PASS_BEGINNING_ACCESS const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(D3D12_RENDER_PASS_ENDING_ACCESS const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(DXGI_FRAME_STATISTICS const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(DXGI_OUTDUPL_FRAME_INFO const& src, std::string srcName, std::ostream& os, size_t indent);
   void PrintCustom(DXGI_FRAME_STATISTICS_MEDIA const& src, std::string srcName, std::ostream& os, size_t indent);
   
   }  // namespace argsprinter
   }  // namespace serialization
   }  // namespace gpa
