
.. _program_listing_file_include_layer-system_layer-system.h:

Program Listing for File layer-system.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_layer-system_layer-system.h>` (``include\layer-system\layer-system.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   #pragma once
   
   #include "igpa-config.h"
   #include "utility/common.h"
   
   #include <cstdint>
   #include <cstddef>
   #include <map>
   
   struct GPADispatchTable;
   struct GPALayerContext;
   struct EventHandler;
   
   namespace gpa {
   
   typedef std::map<STD_STRING, std::vector<utility::KeyValPair> > LayerArgLookup;
   
   GPA_EXPORT void LoadLayer(TCHAR const* const layerName, TCHAR const* layersPath, size_t argc = 0, utility::KeyValPair const* keyValPairs = nullptr);
   
   GPA_EXPORT bool gpaAddLayer(GPADispatchTable* dispatchTable);
   
   GPA_EXPORT bool gpaRemoveLayer(char const* layerName);
   
   GPA_EXPORT GPADispatchTable* GetHeadDispatchTable();
   
   GPA_EXPORT EventHandler* getLayersEventHandler();
   
   GPA_EXPORT void LoadLayers(size_t numLayers = 0, TCHAR const* const layers[] = nullptr,
                              LayerArgLookup const* argLookup = nullptr);
   
   GPA_EXPORT void UnloadLayers(bool emergency);
   
   }  // namespace gpa
