
.. _program_listing_file_include_reflection_compathapi-type-traits.h:

Program Listing for File compathapi-type-traits.h
=================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_reflection_compathapi-type-traits.h>` (``include\reflection\compathapi-type-traits.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   (c) 2023 Intel Corporation.
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   ******************************************************************************/
   #pragma once
   #include "igpa-config.h"
   #include "pathological-api/com-pathological-api.h"
   namespace gpa {
   namespace serialization {
   class Enum;
   class Struct;
   #ifndef REFLECTION_TT_BASE_TEMPLATE
   template<typename T>
   Struct const* GetStructDefFromType()
   {
       return nullptr;
   }
   
   template<typename T>
   Enum const* GetEnumDefFromType()
   {
       return nullptr;
   }
   
   #define REFLECTION_TT_BASE_TEMPLATE
   #endif
   template<>
   Struct const* GetStructDefFromType<StructWithPrimitiveMember>();
   template<>
   Struct const* GetStructDefFromType<StructWithArray>();
   template<>
   Struct const* GetStructDefFromType<StructWithInterface>();
   template<>
   Struct const* GetStructDefFromType<StructWithCOMInterface>();
   template<>
   Struct const* GetStructDefFromType<StructTwoInterfaces>();
   template<>
   Struct const* GetStructDefFromType<StructTwoCOMInterfaces>();
   template<>
   Struct const* GetStructDefFromType<StructWithUnion>();
   template<>
   Struct const* GetStructDefFromType<StructWithUnionCOMInterfaces>();
   template<>
   Struct const* GetStructDefFromType<SizeStruct>();
   template<>
   Struct const* GetStructDefFromType<DataStruct>();
   template<>
   Struct const* GetStructDefFromType<NameStruct>();
   template<>
   Struct const* GetStructDefFromType<NamesSet>();
   template<>
   Struct const* GetStructDefFromType<StructWithNames>();
   template<>
   Struct const* GetStructDefFromType<StructWithEmbeddedStrings>();
   template<>
   Struct const* GetStructDefFromType<StructWithEmbeddedGuitarNotes>();
   template<>
   Struct const* GetStructDefFromType<StructWithGuitarNotesPointer>();
   template<>
   Enum const* GetEnumDefFromType<SomeEnum>();
   template<>
   Enum const* GetEnumDefFromType<GuitarNotes>();
   } // namespace serialization
   } // namespace gpa
