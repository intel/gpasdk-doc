
.. _program_listing_file_include_d3d12-raytracing-support_d3d12-acceleration-structure-tracker.h:

Program Listing for File d3d12-acceleration-structure-tracker.h
===============================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_d3d12-raytracing-support_d3d12-acceleration-structure-tracker.h>` (``include\d3d12-raytracing-support\d3d12-acceleration-structure-tracker.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   (C) Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   #include "dispatch-table/dispatch-table.h"
   
   #include <d3d12.h>
   #include <vector>
   
   namespace gpa {
   namespace raytracing {
   namespace directx {
   
   std::vector<D3D12_GPU_VIRTUAL_ADDRESS> GetAccelerationStructures(ID3D12Resource* resource);
   
   void PostID3D12GraphicsCommandListBuildRaytracingAccelerationStructure(ID3D12GraphicsCommandList4* commandList, D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC const& desc, const GPADispatchTable& table);
   void PostID3D12GraphicsCommandListCopyRaytracingAccelerationStructure(ID3D12GraphicsCommandList4* commandList, D3D12_GPU_VIRTUAL_ADDRESS destAccelerationStructureData, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE mode, const GPADispatchTable& table);
   void PostID3D12GraphicsCommandListReset(ID3D12GraphicsCommandList* commandList);
   
   void PreID3D12CommandQueueExecuteCommandLists(ID3D12CommandQueue* self, UINT numCommandLists, ID3D12CommandList* const* ppCommandLists);
   void PostID3D12CommandQueueExecuteCommandLists(ID3D12CommandQueue* self, UINT numCommandLists, ID3D12CommandList* const* ppCommandLists);
   
   }  // namespace directx
   }  // namespace raytracing
   }  // namespace gpa
