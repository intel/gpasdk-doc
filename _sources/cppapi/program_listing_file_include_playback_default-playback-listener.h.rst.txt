
.. _program_listing_file_include_playback_default-playback-listener.h:

Program Listing for File default-playback-listener.h
====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_default-playback-listener.h>` (``include\playback\default-playback-listener.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include <unordered_map>
   
   #include "playback-support/playback-listener.h"
   #include "runtime/action-publisher.h"
   
   namespace gpa {
   
   struct Surface;
   struct SurfaceCreateInfo;
   
   namespace playback {
   
   class DefaultPlaybackSubscriber : public gpa::runtime::EventPublisher::Subscriber
   {
   public:
       void OnEvent(const char* topic, const gpa::runtime::EventData& event) override;
       bool DeviceRemovedObserved() const;
   
   private:
       bool mDeviceRemovedObserved = false;
   };
   
   class DefaultPlaybackListener : public gpa::playback::IPlaybackListener
   {
   public:
       DefaultPlaybackListener(bool dpiAware = false);
       ~DefaultPlaybackListener();
   
       gpa::Surface* OnSurfaceRequest(uint64_t key, gpa::SurfaceCreateInfo const* createInfo) override;
       void OnSurfaceResize(uint64_t key, int width, int height) override;
       void OnYield() override;
       void OnStreamEnd() override;
       bool ShutdownRequested() override;
       ShutdownRequestReason GetShutdownRequestReason() override;
       void SetAppName(const char* title) override;
   
   private:
       std::unordered_map<uint64_t /*key*/, gpa::Surface* /*handle*/> mSurfaces;
       DefaultPlaybackSubscriber* mSubscriber = nullptr;
   };
   
   }  // namespace playback
   }  // namespace gpa
