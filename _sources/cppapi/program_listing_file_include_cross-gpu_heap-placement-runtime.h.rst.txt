
.. _program_listing_file_include_cross-gpu_heap-placement-runtime.h:

Program Listing for File heap-placement-runtime.h
=================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_cross-gpu_heap-placement-runtime.h>` (``include\cross-gpu\heap-placement-runtime.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   (C) Intel Corporation.
   
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   #pragma once
   
   #include "cross-gpu/cross-gpu-common.h"
   #include "cross-gpu/virtual-address-lifetime-manager.h"
   #include "cross-gpu/heap-placement-preprocessor.h"
   
   #include <shared_mutex>
   
   namespace gpa {
   namespace cross_gpu {
   class HeapPlacementRuntime
   {
   public:
       HeapPlacementRuntime(PreprocessingData&& preprocessingData);
       // Playback functions
       Size GetHeapSize(Ptr heap, ID3D12Device* device);
       Size GetHeapSize(Ptr heap, AllocationManager& manager);
       Size GetBufferSize(Ptr resource, Size oldSize, ID3D12Device* device);
       Size GetBufferSize(Ptr resource, Size oldSize, AllocationManager& manager);
       Offset GetPlaybackOffset(Ptr heap, Offset offset) const;
       Offset GetCaptureOffset(Ptr heap, Offset offset) const;
       Offset GetPlaybackOffsetForVirtualAddress(GpuVA address, Offset offset, Ptr heap = 0) const;
   
       // Objects lifetime tracking
       void OnGetVirtualAddress(GpuVA address, Ptr resource);
       void OnDestroyVirtualAddress(GpuVA address);
   
   private:
       Offset GetOffset(Ptr heap, Offset offset, bool playback) const;
       Size GetResourceSize(Ptr resource, D3D12_RESOURCE_DESC const& desc, ResourceType type, AllocationManager& manager);
       Size GetAccellerationStructureSize(const DxrData& data, AllocationManager& manager) const;
   
       // Acceleratuion structure resources runtime stuff
       VirtualAddressLifetimeManager mVirtualAddressToOffsets;
       ResourceTo<Size> mResourceToSize;
       PreprocessingData mPreprocessingData;
       mutable std::shared_mutex mMutex;
   };
   
   }  // namespace cross_gpu
   }  // namespace gpa
