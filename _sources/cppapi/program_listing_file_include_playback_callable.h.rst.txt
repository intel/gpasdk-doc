
.. _program_listing_file_include_playback_callable.h:

Program Listing for File callable.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_callable.h>` (``include/playback/callable.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
   
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "utility/enum-mask.h"
   
   #include <cstdint>
   #include <functional>
   
   struct GPADispatchTable;
   
   namespace gpa {
   
   namespace serialization {
   struct StreamPacketHeaderEx;
   struct IFunctionCall;
   struct GPAToken;
   class Argument;
   class ArgsReader;
   class MemoryBackedSerializer;
   }  // namespace serialization
   
   namespace memory {
   class Allocator;
   }
   
   namespace playback {
   
   struct Context;
   class IPlayable;
   
   enum CallableType {
       Other = 0,
       Clear = 1 << 1,
       Draw = 1 << 2,
       Dispatch = 1 << 3,
       ExecuteIndirect = 1 << 4,
       CopyResource = 1 << 5,
       BlitWrite = 1 << 6,
       GpuSync = 1 << 7,
       Present = 1 << 8,
       ExecuteCommandList = 1 << 9,
       Marker = 1 << 10,
       BeginUserRegion = 1 << 11,
       EndUserRegion = 1 << 12,
       CloseCommandList = 1 << 13,
       GpuEvent = 1 << 14,
       GpuCall = 1 << 15,
       DispatchRays = 1 << 16,
       AccelerationStructureCall = 1 << 17,
       DebugMarker = 1 << 18,
   
       // uninitialized type value
       Unknown = 1 << 31,
   
       AllTypes =
           Other | Clear | Draw | Dispatch | ExecuteIndirect | CopyResource | BlitWrite | GpuSync | Present | ExecuteCommandList | Marker | BeginUserRegion | EndUserRegion | CloseCommandList | GpuEvent | GpuCall | DispatchRays | AccelerationStructureCall | DebugMarker | Unknown,
   };
   ENUM_AS_BITSET(CallableType)
   
   extern const char* const sCallableTypes[];
   extern const size_t sNumCallableTypes;
   
   struct CallableKey
   {
       CallableKey();
       CallableKey(uint64_t storageId, uint64_t storageOffset);
       uint64_t storageId;
       uint64_t storageOffset;
       bool operator<(const CallableKey other) const;
       bool operator!=(const CallableKey other) const;
       bool operator==(const CallableKey other) const;
       static const CallableKey sNullKey;
   };
   
   class Callable
   {
   public:
       Callable();
       Callable(serialization::StreamPacketHeaderEx const* header, memory::Allocator* allocator = nullptr);
       Callable(serialization::StreamPacketHeaderEx const* header, uint64_t storageID, uint64_t storageOffset, memory::Allocator* allocator = nullptr);
       Callable(Callable const& other);
       Callable& operator=(Callable const& other);
       ~Callable();
   
       // move ctor and operator
       Callable(Callable&& other);
       Callable& operator=(Callable&& other);
   
       CallableKey UniqueKey();
   
       // Informational methods; some are non-const as their invocation may cause
       // deferred initialization of the Callable
   
       char const* Name();
   
       char const* Class();
   
       char const* API();
   
       uint32_t ArgumentCount();
   
       serialization::Argument const* Argument(uint32_t index, void const** value);
   
       serialization::Argument const* Argument(uint32_t index, void const** value, bool postExecute);
   
       serialization::Argument const* ReturnValue(void const** value);
   
       void* ApiObjectPtr();
   
       playback::Context const* Context() const;
   
       serialization::ArgsReader const* Reader() const;
   
       serialization::GPAToken Token() const;
   
       uint64_t Timestamp() const;
   
       bool IsOperation() const;
   
       bool IsValid() const;
   
       bool IsSuccessful(bool& success) const;
   
       CallableType GetCategory();
   
       char const* GetAssociatedText();
   
       // TEMP FOR TESTING ONLY!
       bool IsDelimiter();
   
       bool PreExecute(playback::Context* context);
   
       bool Execute(GPADispatchTable const*& table,
                    bool restore = false, bool releaseResources = true, bool shouldExecute = true);
   
       bool Ingress(GPADispatchTable const*& table, const void** params = nullptr, size_t paramCount = 0);
   
       bool Egress(GPADispatchTable const*& table, bool releaseResources = false, uint64_t returnValue = 0);
   
       size_t Hash() const;
   
       uint64_t StorageID() const;
   
       uint64_t StorageOffset() const;
   
       serialization::IFunctionCall* GetIFunctionCall();
   
       class AssociatedDataHelper
       {
       public:
           AssociatedDataHelper();
           AssociatedDataHelper(char const* data, bool owned);
           AssociatedDataHelper(AssociatedDataHelper&& other);
           AssociatedDataHelper& operator=(AssociatedDataHelper&& other);
           ~AssociatedDataHelper();
   
           char const* Text() const;
   
       private:
           char const* mOwnedData;
           char const* mData;
   
           AssociatedDataHelper(AssociatedDataHelper const& other) = delete;
           AssociatedDataHelper& operator=(AssociatedDataHelper const& other) = delete;
       };
   
   private:
       // pointer to data in mapped storage
       serialization::StreamPacketHeaderEx const* mHeader;
       // pointer to specific instance of an invokable call or operation
       serialization::IFunctionCall* mCallable;
       // pointer to specific instance of a playable call or operation
       gpa::playback::IPlayable* mPlayable;
       // pointer to an ArgsReader that is created in case we need to read args data
       serialization::ArgsReader* mReader;
       // pointer to a Context that is set during Execute and unset during ReleaseResources
       playback::Context* mContext;
       // allocator used by ArgsReader
       memory::Allocator* mAllocator;
       // flag indicating whether arguments have been deserialized. Used to delay reading of arguments
       // until needed at execution and to only read once.
       bool mArgsDeserialized;
       CallableType mCategory;
       uint64_t mStorageID;
       uint64_t mStorageOffset;
   
       void Initialize();
       bool IsActualDelimiter();
   
       AssociatedDataHelper mAssociatedData;
   
   public:
       void Load(serialization::MemoryBackedSerializer* resourceSerializer, bool force = false);
       void ReleaseResources();
   };
   
   char const* CallableTypeToString(CallableType type);
   
   }  // namespace playback
   }  // namespace gpa
