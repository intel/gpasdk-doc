
.. _program_listing_file_include_cross-gpu_heap-placement-preprocessor.h:

Program Listing for File heap-placement-preprocessor.h
======================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_cross-gpu_heap-placement-preprocessor.h>` (``include\cross-gpu\heap-placement-preprocessor.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   (C) Intel Corporation.
   
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   #pragma once
   
   #include "cross-gpu/cross-gpu-common.h"
   #include "reflection/struct-data-manager.h"
   
   namespace gpa {
   namespace cross_gpu {
   
   struct RawResource
   {
       Ptr id = 0;
       D3D12_RESOURCE_DESC desc{};
       Offset offset = 0;  //offset on capture GPU
       ResourceType type = ResourceType::kReserved;
   
       bool operator<(const RawResource& r) const
       {
           return offset < r.offset;
       }
   };
   
   using RawResources = std::vector<RawResource>;
   
   struct OffsetsMapping
   {
       Offsets captureToPlayback;
       Offsets playbackToCapture;
   };
   
   struct AccellerationStructureBufferInfo
   {
       GpuVA address;
       Offset heapOffset = 0;
       std::vector<DxrData> dxrData;
   };
   
   struct PreprocessingData
   {
       // Placed resources stuff
       ResourceTo<OffsetsMapping> mHeapResources;
       ResourceTo<RawResources> mHeapToRawResources;
       ResourceTo<std::vector<D3D12_RESOURCE_DESC>> mReservedResourceToDesc;
   
       // Acceleratuion structure stuff
       ResourceTo<std::vector<AccellerationStructureBufferInfo>> mResourceAndVAToPlacements;
   };
   
   class HeapPlacementPreprocessor
   {
   public:
       HeapPlacementPreprocessor() = default;
   
       void ProcessPlacedResource(Ptr resource, Ptr heap, Offset offset, const D3D12_RESOURCE_DESC& desc);
       void ProcessReservedResource(Ptr resource, const D3D12_RESOURCE_DESC& desc);
       void ProcessGpuVirtualAddress(Ptr resource, D3D12_GPU_VIRTUAL_ADDRESS address);
       void ProcessObjectRelease(Ptr object, ULONG refCount);
       void ProcessUpdateTileMappings(Ptr heap, Ptr resources, uint32_t NumResourceRegions,
                                      const D3D12_TILED_RESOURCE_COORDINATE* pResourceRegionStartCoordinates,
                                      const D3D12_TILE_REGION_SIZE* pResourceRegionSizes,
                                      UINT NumRanges, const UINT* pHeapRangeStartOffsets, const UINT* pRangeTileCounts);
       void ProcessRaytracingAccelerationStructure(const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC& desc);
       PreprocessingData FinalizePreprocessing();
   
   private:
       PreprocessingData mPreprocessingData;
   
       VirtualAddressTo<Ptr> mAddressToResource;
       ResourceTo<GpuVA> mResourceToVirtualAddress;
       ResourceTo<Offset> mResourceToOffset;
   };
   
   }  // namespace cross_gpu
   }  // namespace gpa
