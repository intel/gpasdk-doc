
.. _program_listing_file_include_gpa-vk-utilities_vk-instance-manifest_object-dependency-manifest-generated.h:

Program Listing for File object-dependency-manifest-generated.h
===============================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_gpa-vk-utilities_vk-instance-manifest_object-dependency-manifest-generated.h>` (``include/gpa-vk-utilities/vk-instance-manifest/object-dependency-manifest-generated.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   /******************************************************************************
   
   Â© Intel Corporation.
   
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "vk-utilities/vk-include.h"
   
   #include "vk-state-tracker/VkLayer_state_tracker.h"
   #include "vk-instance-manifest/vk-basic-object-dependency-manifest.h"
   
   namespace gpa {
   namespace vulkan {
   
   class ObjectDependencyManifestGenerated
       : public BasicObjectDependencyManifest
   {
   public:
       ObjectDependencyManifestGenerated() = default;
       virtual ~ObjectDependencyManifestGenerated() = 0;
       bool CreateRestorePoint();
       virtual bool ApplyEntryRestorePoint(const Entry& entry);
       virtual void ApplyDestroyEntryRestorePoint(const Entry& entry);
   
   protected:
       // Create restore point methods
       virtual void CreateVkAccelerationStructureKHRRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkAccelerationStructureNVRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkBufferRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       #ifdef VK_USE_PLATFORM_FUCHSIA
       virtual void CreateVkBufferCollectionFUCHSIARestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       #endif // VK_USE_PLATFORM_FUCHSIA
       virtual void CreateVkBufferViewRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkCommandBufferRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkCommandPoolRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkCuFunctionNVXRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkCuModuleNVXRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDebugReportCallbackEXTRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDebugUtilsMessengerEXTRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDeferredOperationKHRRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry) = 0;
       virtual void CreateVkDescriptorPoolRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDescriptorSetRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDescriptorSetLayoutRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDescriptorUpdateTemplateRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDeviceRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDeviceMemoryRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkDisplayKHRRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry) = 0;
       virtual void CreateVkDisplayModeKHRRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkEventRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkFenceRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkFramebufferRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkImageRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkImageViewRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkIndirectCommandsLayoutNVRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkInstanceRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkPerformanceConfigurationINTELRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry) = 0;
       virtual void CreateVkPhysicalDeviceRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry) = 0;
       virtual void CreateVkPipelineRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry) = 0;
       virtual void CreateVkPipelineCacheRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkPipelineLayoutRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkPrivateDataSlotRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkQueryPoolRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkQueueRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry) = 0;
       virtual void CreateVkRenderPassRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry) = 0;
       virtual void CreateVkSamplerRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkSamplerYcbcrConversionRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkSemaphoreRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkShaderModuleRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkSurfaceKHRRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry) = 0;
       virtual void CreateVkSwapchainKHRRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       virtual void CreateVkValidationCacheEXTRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       #ifdef VK_ENABLE_BETA_EXTENSIONS
       virtual void CreateVkVideoSessionKHRRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       #endif // VK_ENABLE_BETA_EXTENSIONS
       #ifdef VK_ENABLE_BETA_EXTENSIONS
       virtual void CreateVkVideoSessionParametersKHRRestorePoint(const VkStateTrackedObjectINTEL& stateTrackedObject, Entry& entry);
       #endif // VK_ENABLE_BETA_EXTENSIONS
   
       // Apply restore point methods
       virtual bool ApplyVkAccelerationStructureKHRRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkAccelerationStructureNVRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkBufferRestorePoint(VkDevice vkDevice, const Entry& entry);
       #ifdef VK_USE_PLATFORM_FUCHSIA
       virtual bool ApplyVkBufferCollectionFUCHSIARestorePoint(VkDevice vkDevice, const Entry& entry);
       #endif // VK_USE_PLATFORM_FUCHSIA
       virtual bool ApplyVkBufferViewRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkCommandBufferRestorePoint(VkDevice vkDevice, VkCommandPool vkCommandPool, const Entry& entry) = 0;
       virtual bool ApplyVkCommandPoolRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkCuFunctionNVXRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkCuModuleNVXRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkDebugReportCallbackEXTRestorePoint(VkInstance vkInstance, const Entry& entry);
       virtual bool ApplyVkDebugUtilsMessengerEXTRestorePoint(VkInstance vkInstance, const Entry& entry);
       virtual bool ApplyVkDeferredOperationKHRRestorePoint(VkDevice vkDevice, const Entry& entry) = 0;
       virtual bool ApplyVkDescriptorPoolRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkDescriptorSetRestorePoint(VkDevice vkDevice, VkDescriptorPool vkDescriptorPool, const Entry& entry) = 0;
       virtual bool ApplyVkDescriptorSetLayoutRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkDescriptorUpdateTemplateRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkDeviceRestorePoint(VkPhysicalDevice vkPhysicalDevice, const Entry& entry);
       virtual bool ApplyVkDeviceMemoryRestorePoint(VkPhysicalDevice vkPhysicalDevice, VkDevice vkDevice, const Entry& entry) = 0;
       virtual bool ApplyVkDisplayKHRRestorePoint(VkPhysicalDevice vkPhysicalDevice, const Entry& entry) = 0;
       virtual bool ApplyVkDisplayModeKHRRestorePoint(VkDisplayKHR vkDisplayKHR, const Entry& entry) = 0;
       virtual bool ApplyVkEventRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkFenceRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkFramebufferRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkImageRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkImageViewRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkIndirectCommandsLayoutNVRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkInstanceRestorePoint(const Entry& entry) = 0;
       virtual bool ApplyVkPerformanceConfigurationINTELRestorePoint(VkDevice vkDevice, const Entry& entry) = 0;
       virtual bool ApplyVkPhysicalDeviceRestorePoint(VkInstance vkInstance, const Entry& entry) = 0;
       virtual bool ApplyVkPipelineRestorePoint(VkDevice vkDevice, const Entry& entry) = 0;
       virtual bool ApplyVkPipelineCacheRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkPipelineLayoutRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkPrivateDataSlotRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkQueryPoolRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkQueueRestorePoint(VkDevice vkDevice, const Entry& entry) = 0;
       virtual bool ApplyVkRenderPassRestorePoint(VkDevice vkDevice, const Entry& entry) = 0;
       virtual bool ApplyVkSamplerRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkSamplerYcbcrConversionRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkSemaphoreRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkShaderModuleRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual bool ApplyVkSurfaceKHRRestorePoint(VkInstance vkInstance, const Entry& entry) = 0;
       virtual bool ApplyVkSwapchainKHRRestorePoint(VkDevice vkDevice, VkSurfaceKHR vkSurfaceKHR, const Entry& entry) = 0;
       virtual bool ApplyVkValidationCacheEXTRestorePoint(VkDevice vkDevice, const Entry& entry);
       #ifdef VK_ENABLE_BETA_EXTENSIONS
       virtual bool ApplyVkVideoSessionKHRRestorePoint(VkDevice vkDevice, const Entry& entry);
       #endif // VK_ENABLE_BETA_EXTENSIONS
       #ifdef VK_ENABLE_BETA_EXTENSIONS
       virtual bool ApplyVkVideoSessionParametersKHRRestorePoint(VkDevice vkDevice, VkVideoSessionKHR vkVideoSessionKHR, const Entry& entry) = 0;
       #endif // VK_ENABLE_BETA_EXTENSIONS
   
       // Apply destroy restore point methods
       virtual void ApplyDestroyVkAccelerationStructureKHRRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkAccelerationStructureNVRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkBufferRestorePoint(VkDevice vkDevice, const Entry& entry);
       #ifdef VK_USE_PLATFORM_FUCHSIA
       virtual void ApplyDestroyVkBufferCollectionFUCHSIARestorePoint(VkDevice vkDevice, const Entry& entry);
       #endif // VK_USE_PLATFORM_FUCHSIA
       virtual void ApplyDestroyVkBufferViewRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkCommandBufferRestorePoint(VkDevice vkDevice, VkCommandPool vkCommandPool, const Entry& entry) = 0;
       virtual void ApplyDestroyVkCommandPoolRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkCuFunctionNVXRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkCuModuleNVXRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkDebugReportCallbackEXTRestorePoint(VkInstance vkInstance, const Entry& entry);
       virtual void ApplyDestroyVkDebugUtilsMessengerEXTRestorePoint(VkInstance vkInstance, const Entry& entry);
       virtual void ApplyDestroyVkDeferredOperationKHRRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkDescriptorPoolRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkDescriptorSetRestorePoint(VkDevice vkDevice, VkDescriptorPool vkDescriptorPool, const Entry& entry) = 0;
       virtual void ApplyDestroyVkDescriptorSetLayoutRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkDescriptorUpdateTemplateRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkDeviceRestorePoint(VkPhysicalDevice vkPhysicalDevice, const Entry& entry) = 0;
       virtual void ApplyDestroyVkDeviceMemoryRestorePoint(VkPhysicalDevice vkPhysicalDevice, VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkDisplayKHRRestorePoint(VkPhysicalDevice vkPhysicalDevice, const Entry& entry) = 0;
       virtual void ApplyDestroyVkDisplayModeKHRRestorePoint(VkDisplayKHR vkDisplayKHR, const Entry& entry) = 0;
       virtual void ApplyDestroyVkEventRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkFenceRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkFramebufferRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkImageRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkImageViewRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkIndirectCommandsLayoutNVRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkInstanceRestorePoint(const Entry& entry) = 0;
       virtual void ApplyDestroyVkPerformanceConfigurationINTELRestorePoint(VkDevice vkDevice, const Entry& entry) = 0;
       virtual void ApplyDestroyVkPhysicalDeviceRestorePoint(VkInstance vkInstance, const Entry& entry) = 0;
       virtual void ApplyDestroyVkPipelineRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkPipelineCacheRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkPipelineLayoutRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkPrivateDataSlotRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkQueryPoolRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkQueueRestorePoint(VkDevice vkDevice, const Entry& entry) = 0;
       virtual void ApplyDestroyVkRenderPassRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkSamplerRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkSamplerYcbcrConversionRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkSemaphoreRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkShaderModuleRestorePoint(VkDevice vkDevice, const Entry& entry);
       virtual void ApplyDestroyVkSurfaceKHRRestorePoint(VkInstance vkInstance, const Entry& entry);
       virtual void ApplyDestroyVkSwapchainKHRRestorePoint(VkDevice vkDevice, VkSurfaceKHR vkSurfaceKHR, const Entry& entry);
       virtual void ApplyDestroyVkValidationCacheEXTRestorePoint(VkDevice vkDevice, const Entry& entry);
       #ifdef VK_ENABLE_BETA_EXTENSIONS
       virtual void ApplyDestroyVkVideoSessionKHRRestorePoint(VkDevice vkDevice, const Entry& entry);
       #endif // VK_ENABLE_BETA_EXTENSIONS
       #ifdef VK_ENABLE_BETA_EXTENSIONS
       virtual void ApplyDestroyVkVideoSessionParametersKHRRestorePoint(VkDevice vkDevice, VkVideoSessionKHR vkVideoSessionKHR, const Entry& entry);
       #endif // VK_ENABLE_BETA_EXTENSIONS
   };
   
   } // vulkan
   } // gpa
