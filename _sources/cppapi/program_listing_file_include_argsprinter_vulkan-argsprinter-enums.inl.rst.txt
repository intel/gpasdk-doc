
.. _program_listing_file_include_argsprinter_vulkan-argsprinter-enums.inl:

Program Listing for File vulkan-argsprinter-enums.inl
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_argsprinter_vulkan-argsprinter-enums.inl>` (``include/argsprinter/vulkan-argsprinter-enums.inl``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   ******************************************************************************/
   template <>
   inline void Print(VkAccelerationStructureBuildTypeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR){os << "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR, "; }
   
       if(src == VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR){os << "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR, "; }
   
       if(src == VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR){os << "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR, "; }
   
       if(src == VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR){os << "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAccelerationStructureCompatibilityKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAccelerationStructureCompatibilityKHR::VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR){os << "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR, "; }
   
       if(src == VkAccelerationStructureCompatibilityKHR::VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR){os << "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR, "; }
   
       if(src == VkAccelerationStructureCompatibilityKHR::VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR){os << "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAccelerationStructureCreateFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAccelerationStructureCreateFlagBitsKHR::VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR){os << "VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR, "; }
   
       if(src == VkAccelerationStructureCreateFlagBitsKHR::VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkAccelerationStructureCreateFlagBitsKHR::VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV){os << "VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV, "; }
   
       if(src == VkAccelerationStructureCreateFlagBitsKHR::VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT){os << "VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAccelerationStructureMemoryRequirementsTypeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV){os << "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV, "; }
   
       if(src == VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV){os << "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV, "; }
   
       if(src == VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV){os << "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV, "; }
   
       if(src == VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV){os << "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAccelerationStructureMotionInstanceTypeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAccelerationStructureMotionInstanceTypeNV::VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV){os << "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV, "; }
   
       if(src == VkAccelerationStructureMotionInstanceTypeNV::VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV){os << "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV, "; }
   
       if(src == VkAccelerationStructureMotionInstanceTypeNV::VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV){os << "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV, "; }
   
       if(src == VkAccelerationStructureMotionInstanceTypeNV::VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV){os << "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAccelerationStructureTypeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR){os << "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR, "; }
   
       if(src == VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV){os << "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV, "; }
   
       if(src == VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR){os << "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR, "; }
   
       if(src == VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV){os << "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV, "; }
   
       if(src == VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR){os << "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR, "; }
   
       if(src == VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR){os << "VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAccessFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAccessFlagBits::VK_ACCESS_NONE){os << "VK_ACCESS_NONE, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_NONE_KHR){os << "VK_ACCESS_NONE_KHR, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_INDIRECT_COMMAND_READ_BIT){os << "VK_ACCESS_INDIRECT_COMMAND_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT){os << "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT){os << "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_READ_BIT){os << "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV){os << "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT){os << "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_INPUT_ATTACHMENT_READ_BIT){os << "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_HOST_WRITE_BIT){os << "VK_ACCESS_HOST_WRITE_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT){os << "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_INDEX_READ_BIT){os << "VK_ACCESS_INDEX_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_TRANSFER_READ_BIT){os << "VK_ACCESS_TRANSFER_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR){os << "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV){os << "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_FLAG_BITS_MAX_ENUM){os << "VK_ACCESS_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT){os << "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV){os << "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_SHADER_READ_BIT){os << "VK_ACCESS_SHADER_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_MEMORY_READ_BIT){os << "VK_ACCESS_MEMORY_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT){os << "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT){os << "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_TRANSFER_WRITE_BIT){os << "VK_ACCESS_TRANSFER_WRITE_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR){os << "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV){os << "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT){os << "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT){os << "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_SHADER_WRITE_BIT){os << "VK_ACCESS_SHADER_WRITE_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_MEMORY_WRITE_BIT){os << "VK_ACCESS_MEMORY_WRITE_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT){os << "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_UNIFORM_READ_BIT){os << "VK_ACCESS_UNIFORM_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_HOST_READ_BIT){os << "VK_ACCESS_HOST_READ_BIT, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR){os << "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR, "; }
   
       if(src == VkAccessFlagBits::VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV){os << "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAcquireProfilingLockFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAcquireProfilingLockFlagBitsKHR::VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR){os << "VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAttachmentDescriptionFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAttachmentDescriptionFlagBits::VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT){os << "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT, "; }
   
       if(src == VkAttachmentDescriptionFlagBits::VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM){os << "VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAttachmentLoadOp const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_LOAD){os << "VK_ATTACHMENT_LOAD_OP_LOAD, "; }
   
       if(src == VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_CLEAR){os << "VK_ATTACHMENT_LOAD_OP_CLEAR, "; }
   
       if(src == VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_NONE_EXT){os << "VK_ATTACHMENT_LOAD_OP_NONE_EXT, "; }
   
       if(src == VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_DONT_CARE){os << "VK_ATTACHMENT_LOAD_OP_DONT_CARE, "; }
   
       if(src == VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_MAX_ENUM){os << "VK_ATTACHMENT_LOAD_OP_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkAttachmentStoreOp const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_STORE){os << "VK_ATTACHMENT_STORE_OP_STORE, "; }
   
       if(src == VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_DONT_CARE){os << "VK_ATTACHMENT_STORE_OP_DONT_CARE, "; }
   
       if(src == VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE){os << "VK_ATTACHMENT_STORE_OP_NONE, "; }
   
       if(src == VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE_EXT){os << "VK_ATTACHMENT_STORE_OP_NONE_EXT, "; }
   
       if(src == VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE_KHR){os << "VK_ATTACHMENT_STORE_OP_NONE_KHR, "; }
   
       if(src == VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE_QCOM){os << "VK_ATTACHMENT_STORE_OP_NONE_QCOM, "; }
   
       if(src == VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_MAX_ENUM){os << "VK_ATTACHMENT_STORE_OP_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBlendFactor const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ZERO){os << "VK_BLEND_FACTOR_ZERO, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE){os << "VK_BLEND_FACTOR_ONE, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_CONSTANT_COLOR){os << "VK_BLEND_FACTOR_CONSTANT_COLOR, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR){os << "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_CONSTANT_ALPHA){os << "VK_BLEND_FACTOR_CONSTANT_ALPHA, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA){os << "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_SRC_ALPHA_SATURATE){os << "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_SRC1_COLOR){os << "VK_BLEND_FACTOR_SRC1_COLOR, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR){os << "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_SRC1_ALPHA){os << "VK_BLEND_FACTOR_SRC1_ALPHA, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA){os << "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_SRC_COLOR){os << "VK_BLEND_FACTOR_SRC_COLOR, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_MAX_ENUM){os << "VK_BLEND_FACTOR_MAX_ENUM, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR){os << "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_DST_COLOR){os << "VK_BLEND_FACTOR_DST_COLOR, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR){os << "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_SRC_ALPHA){os << "VK_BLEND_FACTOR_SRC_ALPHA, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA){os << "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_DST_ALPHA){os << "VK_BLEND_FACTOR_DST_ALPHA, "; }
   
       if(src == VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA){os << "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBlendOp const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBlendOp::VK_BLEND_OP_ADD){os << "VK_BLEND_OP_ADD, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_SUBTRACT){os << "VK_BLEND_OP_SUBTRACT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_ZERO_EXT){os << "VK_BLEND_OP_ZERO_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_SRC_EXT){os << "VK_BLEND_OP_SRC_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_DST_EXT){os << "VK_BLEND_OP_DST_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_SRC_OVER_EXT){os << "VK_BLEND_OP_SRC_OVER_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_DST_OVER_EXT){os << "VK_BLEND_OP_DST_OVER_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_SRC_IN_EXT){os << "VK_BLEND_OP_SRC_IN_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_DST_IN_EXT){os << "VK_BLEND_OP_DST_IN_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_SRC_OUT_EXT){os << "VK_BLEND_OP_SRC_OUT_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_DST_OUT_EXT){os << "VK_BLEND_OP_DST_OUT_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_SRC_ATOP_EXT){os << "VK_BLEND_OP_SRC_ATOP_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_DST_ATOP_EXT){os << "VK_BLEND_OP_DST_ATOP_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_XOR_EXT){os << "VK_BLEND_OP_XOR_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_MULTIPLY_EXT){os << "VK_BLEND_OP_MULTIPLY_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_SCREEN_EXT){os << "VK_BLEND_OP_SCREEN_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_OVERLAY_EXT){os << "VK_BLEND_OP_OVERLAY_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_DARKEN_EXT){os << "VK_BLEND_OP_DARKEN_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_LIGHTEN_EXT){os << "VK_BLEND_OP_LIGHTEN_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_COLORDODGE_EXT){os << "VK_BLEND_OP_COLORDODGE_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_COLORBURN_EXT){os << "VK_BLEND_OP_COLORBURN_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_HARDLIGHT_EXT){os << "VK_BLEND_OP_HARDLIGHT_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_SOFTLIGHT_EXT){os << "VK_BLEND_OP_SOFTLIGHT_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_DIFFERENCE_EXT){os << "VK_BLEND_OP_DIFFERENCE_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_EXCLUSION_EXT){os << "VK_BLEND_OP_EXCLUSION_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_INVERT_EXT){os << "VK_BLEND_OP_INVERT_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_INVERT_RGB_EXT){os << "VK_BLEND_OP_INVERT_RGB_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_LINEARDODGE_EXT){os << "VK_BLEND_OP_LINEARDODGE_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_LINEARBURN_EXT){os << "VK_BLEND_OP_LINEARBURN_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_VIVIDLIGHT_EXT){os << "VK_BLEND_OP_VIVIDLIGHT_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_LINEARLIGHT_EXT){os << "VK_BLEND_OP_LINEARLIGHT_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_PINLIGHT_EXT){os << "VK_BLEND_OP_PINLIGHT_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_HARDMIX_EXT){os << "VK_BLEND_OP_HARDMIX_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_HSL_HUE_EXT){os << "VK_BLEND_OP_HSL_HUE_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_HSL_SATURATION_EXT){os << "VK_BLEND_OP_HSL_SATURATION_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_HSL_COLOR_EXT){os << "VK_BLEND_OP_HSL_COLOR_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_HSL_LUMINOSITY_EXT){os << "VK_BLEND_OP_HSL_LUMINOSITY_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_PLUS_EXT){os << "VK_BLEND_OP_PLUS_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_PLUS_CLAMPED_EXT){os << "VK_BLEND_OP_PLUS_CLAMPED_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT){os << "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_PLUS_DARKER_EXT){os << "VK_BLEND_OP_PLUS_DARKER_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_MINUS_EXT){os << "VK_BLEND_OP_MINUS_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_MINUS_CLAMPED_EXT){os << "VK_BLEND_OP_MINUS_CLAMPED_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_CONTRAST_EXT){os << "VK_BLEND_OP_CONTRAST_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_INVERT_OVG_EXT){os << "VK_BLEND_OP_INVERT_OVG_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_RED_EXT){os << "VK_BLEND_OP_RED_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_GREEN_EXT){os << "VK_BLEND_OP_GREEN_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_BLUE_EXT){os << "VK_BLEND_OP_BLUE_EXT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_REVERSE_SUBTRACT){os << "VK_BLEND_OP_REVERSE_SUBTRACT, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_MAX_ENUM){os << "VK_BLEND_OP_MAX_ENUM, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_MIN){os << "VK_BLEND_OP_MIN, "; }
   
       if(src == VkBlendOp::VK_BLEND_OP_MAX){os << "VK_BLEND_OP_MAX, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBlendOverlapEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBlendOverlapEXT::VK_BLEND_OVERLAP_UNCORRELATED_EXT){os << "VK_BLEND_OVERLAP_UNCORRELATED_EXT, "; }
   
       if(src == VkBlendOverlapEXT::VK_BLEND_OVERLAP_DISJOINT_EXT){os << "VK_BLEND_OVERLAP_DISJOINT_EXT, "; }
   
       if(src == VkBlendOverlapEXT::VK_BLEND_OVERLAP_CONJOINT_EXT){os << "VK_BLEND_OVERLAP_CONJOINT_EXT, "; }
   
       if(src == VkBlendOverlapEXT::VK_BLEND_OVERLAP_MAX_ENUM_EXT){os << "VK_BLEND_OVERLAP_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBorderColor const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBorderColor::VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK){os << "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK, "; }
   
       if(src == VkBorderColor::VK_BORDER_COLOR_INT_TRANSPARENT_BLACK){os << "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK, "; }
   
       if(src == VkBorderColor::VK_BORDER_COLOR_FLOAT_CUSTOM_EXT){os << "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT, "; }
   
       if(src == VkBorderColor::VK_BORDER_COLOR_INT_CUSTOM_EXT){os << "VK_BORDER_COLOR_INT_CUSTOM_EXT, "; }
   
       if(src == VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK){os << "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK, "; }
   
       if(src == VkBorderColor::VK_BORDER_COLOR_MAX_ENUM){os << "VK_BORDER_COLOR_MAX_ENUM, "; }
   
       if(src == VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_BLACK){os << "VK_BORDER_COLOR_INT_OPAQUE_BLACK, "; }
   
       if(src == VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE){os << "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE, "; }
   
       if(src == VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_WHITE){os << "VK_BORDER_COLOR_INT_OPAQUE_WHITE, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBufferCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_BINDING_BIT){os << "VK_BUFFER_CREATE_SPARSE_BINDING_BIT, "; }
   
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT){os << "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, "; }
   
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT){os << "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT, "; }
   
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR){os << "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR, "; }
   
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT){os << "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, "; }
   
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT){os << "VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT, "; }
   
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_ALIASED_BIT){os << "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT, "; }
   
       if(src == VkBufferCreateFlagBits::VK_BUFFER_CREATE_PROTECTED_BIT){os << "VK_BUFFER_CREATE_PROTECTED_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBufferUsageFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_SRC_BIT){os << "VK_BUFFER_USAGE_TRANSFER_SRC_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_RAY_TRACING_BIT_NV){os << "VK_BUFFER_USAGE_RAY_TRACING_BIT_NV, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR){os << "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR){os << "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_VERTEX_BUFFER_BIT){os << "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT){os << "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT){os << "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR){os << "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT){os << "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR){os << "VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT){os << "VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT){os << "VK_BUFFER_USAGE_TRANSFER_DST_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT){os << "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT){os << "VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM){os << "VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT){os << "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_STORAGE_BUFFER_BIT){os << "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR){os << "VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT){os << "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT){os << "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT){os << "VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT){os << "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR){os << "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDEX_BUFFER_BIT){os << "VK_BUFFER_USAGE_INDEX_BUFFER_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR){os << "VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT){os << "VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT){os << "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR){os << "VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR, "; }
   
       if(src == VkBufferUsageFlagBits::VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT){os << "VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBuildAccelerationStructureFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV){os << "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT){os << "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV){os << "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV){os << "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT){os << "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV){os << "VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV){os << "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT){os << "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR, "; }
   
       if(src == VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV){os << "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBuildAccelerationStructureModeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBuildAccelerationStructureModeKHR::VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR, "; }
   
       if(src == VkBuildAccelerationStructureModeKHR::VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, "; }
   
       if(src == VkBuildAccelerationStructureModeKHR::VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR){os << "VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBuildMicromapFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBuildMicromapFlagBitsEXT::VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT){os << "VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT, "; }
   
       if(src == VkBuildMicromapFlagBitsEXT::VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT){os << "VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT, "; }
   
       if(src == VkBuildMicromapFlagBitsEXT::VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT){os << "VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkBuildMicromapFlagBitsEXT::VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT){os << "VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkBuildMicromapModeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkBuildMicromapModeEXT::VK_BUILD_MICROMAP_MODE_BUILD_EXT){os << "VK_BUILD_MICROMAP_MODE_BUILD_EXT, "; }
   
       if(src == VkBuildMicromapModeEXT::VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT){os << "VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkChromaLocation const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkChromaLocation::VK_CHROMA_LOCATION_COSITED_EVEN){os << "VK_CHROMA_LOCATION_COSITED_EVEN, "; }
   
       if(src == VkChromaLocation::VK_CHROMA_LOCATION_COSITED_EVEN_KHR){os << "VK_CHROMA_LOCATION_COSITED_EVEN_KHR, "; }
   
       if(src == VkChromaLocation::VK_CHROMA_LOCATION_MIDPOINT){os << "VK_CHROMA_LOCATION_MIDPOINT, "; }
   
       if(src == VkChromaLocation::VK_CHROMA_LOCATION_MIDPOINT_KHR){os << "VK_CHROMA_LOCATION_MIDPOINT_KHR, "; }
   
       if(src == VkChromaLocation::VK_CHROMA_LOCATION_MAX_ENUM){os << "VK_CHROMA_LOCATION_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCoarseSampleOrderTypeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV){os << "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV, "; }
   
       if(src == VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV){os << "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, "; }
   
       if(src == VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV){os << "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV, "; }
   
       if(src == VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV){os << "VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV, "; }
   
       if(src == VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV){os << "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkColorComponentFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkColorComponentFlagBits::VK_COLOR_COMPONENT_R_BIT){os << "VK_COLOR_COMPONENT_R_BIT, "; }
   
       if(src == VkColorComponentFlagBits::VK_COLOR_COMPONENT_G_BIT){os << "VK_COLOR_COMPONENT_G_BIT, "; }
   
       if(src == VkColorComponentFlagBits::VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM){os << "VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkColorComponentFlagBits::VK_COLOR_COMPONENT_B_BIT){os << "VK_COLOR_COMPONENT_B_BIT, "; }
   
       if(src == VkColorComponentFlagBits::VK_COLOR_COMPONENT_A_BIT){os << "VK_COLOR_COMPONENT_A_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkColorSpaceKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkColorSpaceKHR::VK_COLORSPACE_SRGB_NONLINEAR_KHR){os << "VK_COLORSPACE_SRGB_NONLINEAR_KHR, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_SRGB_NONLINEAR_KHR){os << "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT){os << "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT){os << "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_DCI_P3_LINEAR_EXT){os << "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT){os << "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT){os << "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_BT709_LINEAR_EXT){os << "VK_COLOR_SPACE_BT709_LINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_BT709_NONLINEAR_EXT){os << "VK_COLOR_SPACE_BT709_NONLINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_BT2020_LINEAR_EXT){os << "VK_COLOR_SPACE_BT2020_LINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_HDR10_ST2084_EXT){os << "VK_COLOR_SPACE_HDR10_ST2084_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_DOLBYVISION_EXT){os << "VK_COLOR_SPACE_DOLBYVISION_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_HDR10_HLG_EXT){os << "VK_COLOR_SPACE_HDR10_HLG_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT){os << "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT){os << "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_PASS_THROUGH_EXT){os << "VK_COLOR_SPACE_PASS_THROUGH_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT){os << "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_NATIVE_AMD){os << "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD, "; }
   
       if(src == VkColorSpaceKHR::VK_COLOR_SPACE_MAX_ENUM_KHR){os << "VK_COLOR_SPACE_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCommandBufferLevel const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_PRIMARY){os << "VK_COMMAND_BUFFER_LEVEL_PRIMARY, "; }
   
       if(src == VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_SECONDARY){os << "VK_COMMAND_BUFFER_LEVEL_SECONDARY, "; }
   
       if(src == VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_MAX_ENUM){os << "VK_COMMAND_BUFFER_LEVEL_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCommandBufferResetFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCommandBufferResetFlagBits::VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT){os << "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT, "; }
   
       if(src == VkCommandBufferResetFlagBits::VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM){os << "VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCommandBufferUsageFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT){os << "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, "; }
   
       if(src == VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT){os << "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, "; }
   
       if(src == VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM){os << "VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT){os << "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCommandPoolCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_TRANSIENT_BIT){os << "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT, "; }
   
       if(src == VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT){os << "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT, "; }
   
       if(src == VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_PROTECTED_BIT){os << "VK_COMMAND_POOL_CREATE_PROTECTED_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCommandPoolResetFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCommandPoolResetFlagBits::VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT){os << "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT, "; }
   
       if(src == VkCommandPoolResetFlagBits::VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM){os << "VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCompareOp const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCompareOp::VK_COMPARE_OP_NEVER){os << "VK_COMPARE_OP_NEVER, "; }
   
       if(src == VkCompareOp::VK_COMPARE_OP_LESS){os << "VK_COMPARE_OP_LESS, "; }
   
       if(src == VkCompareOp::VK_COMPARE_OP_EQUAL){os << "VK_COMPARE_OP_EQUAL, "; }
   
       if(src == VkCompareOp::VK_COMPARE_OP_MAX_ENUM){os << "VK_COMPARE_OP_MAX_ENUM, "; }
   
       if(src == VkCompareOp::VK_COMPARE_OP_LESS_OR_EQUAL){os << "VK_COMPARE_OP_LESS_OR_EQUAL, "; }
   
       if(src == VkCompareOp::VK_COMPARE_OP_GREATER){os << "VK_COMPARE_OP_GREATER, "; }
   
       if(src == VkCompareOp::VK_COMPARE_OP_NOT_EQUAL){os << "VK_COMPARE_OP_NOT_EQUAL, "; }
   
       if(src == VkCompareOp::VK_COMPARE_OP_GREATER_OR_EQUAL){os << "VK_COMPARE_OP_GREATER_OR_EQUAL, "; }
   
       if(src == VkCompareOp::VK_COMPARE_OP_ALWAYS){os << "VK_COMPARE_OP_ALWAYS, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkComponentSwizzle const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkComponentSwizzle::VK_COMPONENT_SWIZZLE_IDENTITY){os << "VK_COMPONENT_SWIZZLE_IDENTITY, "; }
   
       if(src == VkComponentSwizzle::VK_COMPONENT_SWIZZLE_ZERO){os << "VK_COMPONENT_SWIZZLE_ZERO, "; }
   
       if(src == VkComponentSwizzle::VK_COMPONENT_SWIZZLE_ONE){os << "VK_COMPONENT_SWIZZLE_ONE, "; }
   
       if(src == VkComponentSwizzle::VK_COMPONENT_SWIZZLE_MAX_ENUM){os << "VK_COMPONENT_SWIZZLE_MAX_ENUM, "; }
   
       if(src == VkComponentSwizzle::VK_COMPONENT_SWIZZLE_R){os << "VK_COMPONENT_SWIZZLE_R, "; }
   
       if(src == VkComponentSwizzle::VK_COMPONENT_SWIZZLE_G){os << "VK_COMPONENT_SWIZZLE_G, "; }
   
       if(src == VkComponentSwizzle::VK_COMPONENT_SWIZZLE_B){os << "VK_COMPONENT_SWIZZLE_B, "; }
   
       if(src == VkComponentSwizzle::VK_COMPONENT_SWIZZLE_A){os << "VK_COMPONENT_SWIZZLE_A, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkComponentTypeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT16_NV){os << "VK_COMPONENT_TYPE_FLOAT16_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT32_NV){os << "VK_COMPONENT_TYPE_FLOAT32_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_UINT64_NV){os << "VK_COMPONENT_TYPE_UINT64_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT64_NV){os << "VK_COMPONENT_TYPE_FLOAT64_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_MAX_ENUM_NV){os << "VK_COMPONENT_TYPE_MAX_ENUM_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_SINT8_NV){os << "VK_COMPONENT_TYPE_SINT8_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_SINT16_NV){os << "VK_COMPONENT_TYPE_SINT16_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_SINT32_NV){os << "VK_COMPONENT_TYPE_SINT32_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_SINT64_NV){os << "VK_COMPONENT_TYPE_SINT64_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_UINT8_NV){os << "VK_COMPONENT_TYPE_UINT8_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_UINT16_NV){os << "VK_COMPONENT_TYPE_UINT16_NV, "; }
   
       if(src == VkComponentTypeNV::VK_COMPONENT_TYPE_UINT32_NV){os << "VK_COMPONENT_TYPE_UINT32_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCompositeAlphaFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR){os << "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR, "; }
   
       if(src == VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR){os << "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR, "; }
   
       if(src == VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR){os << "VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR){os << "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR, "; }
   
       if(src == VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR){os << "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkConditionalRenderingFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkConditionalRenderingFlagBitsEXT::VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT){os << "VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT, "; }
   
       if(src == VkConditionalRenderingFlagBitsEXT::VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT){os << "VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkConservativeRasterizationModeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT){os << "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT, "; }
   
       if(src == VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT){os << "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT, "; }
   
       if(src == VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT){os << "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT, "; }
   
       if(src == VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT){os << "VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCopyAccelerationStructureModeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR){os << "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR, "; }
   
       if(src == VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV){os << "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV, "; }
   
       if(src == VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR){os << "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR, "; }
   
       if(src == VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV){os << "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV, "; }
   
       if(src == VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR){os << "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR, "; }
   
       if(src == VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR){os << "VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR, "; }
   
       if(src == VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR){os << "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCopyMicromapModeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCopyMicromapModeEXT::VK_COPY_MICROMAP_MODE_CLONE_EXT){os << "VK_COPY_MICROMAP_MODE_CLONE_EXT, "; }
   
       if(src == VkCopyMicromapModeEXT::VK_COPY_MICROMAP_MODE_SERIALIZE_EXT){os << "VK_COPY_MICROMAP_MODE_SERIALIZE_EXT, "; }
   
       if(src == VkCopyMicromapModeEXT::VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT){os << "VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT, "; }
   
       if(src == VkCopyMicromapModeEXT::VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT){os << "VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT, "; }
   
       if(src == VkCopyMicromapModeEXT::VK_COPY_MICROMAP_MODE_COMPACT_EXT){os << "VK_COPY_MICROMAP_MODE_COMPACT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCoverageModulationModeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_NONE_NV){os << "VK_COVERAGE_MODULATION_MODE_NONE_NV, "; }
   
       if(src == VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_RGB_NV){os << "VK_COVERAGE_MODULATION_MODE_RGB_NV, "; }
   
       if(src == VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_ALPHA_NV){os << "VK_COVERAGE_MODULATION_MODE_ALPHA_NV, "; }
   
       if(src == VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV){os << "VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV, "; }
   
       if(src == VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_RGBA_NV){os << "VK_COVERAGE_MODULATION_MODE_RGBA_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCoverageReductionModeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCoverageReductionModeNV::VK_COVERAGE_REDUCTION_MODE_MERGE_NV){os << "VK_COVERAGE_REDUCTION_MODE_MERGE_NV, "; }
   
       if(src == VkCoverageReductionModeNV::VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV){os << "VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV, "; }
   
       if(src == VkCoverageReductionModeNV::VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV){os << "VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkCullModeFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkCullModeFlagBits::VK_CULL_MODE_NONE){os << "VK_CULL_MODE_NONE, "; }
   
       if(src == VkCullModeFlagBits::VK_CULL_MODE_FRONT_AND_BACK){os << "VK_CULL_MODE_FRONT_AND_BACK, "; }
   
       if(src == VkCullModeFlagBits::VK_CULL_MODE_FRONT_BIT){os << "VK_CULL_MODE_FRONT_BIT, "; }
   
       if(src == VkCullModeFlagBits::VK_CULL_MODE_BACK_BIT){os << "VK_CULL_MODE_BACK_BIT, "; }
   
       if(src == VkCullModeFlagBits::VK_CULL_MODE_FLAG_BITS_MAX_ENUM){os << "VK_CULL_MODE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDebugReportFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_INFORMATION_BIT_EXT){os << "VK_DEBUG_REPORT_INFORMATION_BIT_EXT, "; }
   
       if(src == VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_DEBUG_BIT_EXT){os << "VK_DEBUG_REPORT_DEBUG_BIT_EXT, "; }
   
       if(src == VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_WARNING_BIT_EXT){os << "VK_DEBUG_REPORT_WARNING_BIT_EXT, "; }
   
       if(src == VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT){os << "VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT){os << "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT, "; }
   
       if(src == VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_ERROR_BIT_EXT){os << "VK_DEBUG_REPORT_ERROR_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDebugReportObjectTypeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT, "; }
   
       if(src == VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT){os << "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDebugUtilsMessageSeverityFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT){os << "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT, "; }
   
       if(src == VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT){os << "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT, "; }
   
       if(src == VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT){os << "VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT){os << "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT, "; }
   
       if(src == VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT){os << "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDebugUtilsMessageTypeFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT){os << "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT, "; }
   
       if(src == VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT){os << "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT, "; }
   
       if(src == VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT){os << "VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT){os << "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT, "; }
   
       if(src == VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT){os << "VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDependencyFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDependencyFlagBits::VK_DEPENDENCY_BY_REGION_BIT){os << "VK_DEPENDENCY_BY_REGION_BIT, "; }
   
       if(src == VkDependencyFlagBits::VK_DEPENDENCY_VIEW_LOCAL_BIT){os << "VK_DEPENDENCY_VIEW_LOCAL_BIT, "; }
   
       if(src == VkDependencyFlagBits::VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR){os << "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR, "; }
   
       if(src == VkDependencyFlagBits::VK_DEPENDENCY_FLAG_BITS_MAX_ENUM){os << "VK_DEPENDENCY_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkDependencyFlagBits::VK_DEPENDENCY_DEVICE_GROUP_BIT){os << "VK_DEPENDENCY_DEVICE_GROUP_BIT, "; }
   
       if(src == VkDependencyFlagBits::VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR){os << "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR, "; }
   
       if(src == VkDependencyFlagBits::VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT){os << "VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDescriptorBindingFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT){os << "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT, "; }
   
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT){os << "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT, "; }
   
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT){os << "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT, "; }
   
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT){os << "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT, "; }
   
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM){os << "VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT){os << "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT, "; }
   
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT){os << "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT, "; }
   
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT){os << "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT, "; }
   
       if(src == VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT){os << "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDescriptorPoolCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT){os << "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT, "; }
   
       if(src == VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT){os << "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT, "; }
   
       if(src == VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT){os << "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT, "; }
   
       if(src == VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT){os << "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT, "; }
   
       if(src == VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE){os << "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDescriptorSetLayoutCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR){os << "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, "; }
   
       if(src == VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT){os << "VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT, "; }
   
       if(src == VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT){os << "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT, "; }
   
       if(src == VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT){os << "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT, "; }
   
       if(src == VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT){os << "VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT, "; }
   
       if(src == VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT){os << "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT, "; }
   
       if(src == VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE){os << "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDescriptorType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_SAMPLER){os << "VK_DESCRIPTOR_TYPE_SAMPLER, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER){os << "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT){os << "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK){os << "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT){os << "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR){os << "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV){os << "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_MUTABLE_EXT){os << "VK_DESCRIPTOR_TYPE_MUTABLE_EXT, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_MUTABLE_VALVE){os << "VK_DESCRIPTOR_TYPE_MUTABLE_VALVE, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM){os << "VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM){os << "VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE){os << "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_MAX_ENUM){os << "VK_DESCRIPTOR_TYPE_MAX_ENUM, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_IMAGE){os << "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER){os << "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER){os << "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER){os << "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER){os << "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC){os << "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, "; }
   
       if(src == VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC){os << "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDescriptorUpdateTemplateType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET){os << "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET, "; }
   
       if(src == VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR){os << "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR, "; }
   
       if(src == VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR){os << "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, "; }
   
       if(src == VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM){os << "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceAddressBindingFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceAddressBindingFlagBitsEXT::VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT){os << "VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT, "; }
   
       if(src == VkDeviceAddressBindingFlagBitsEXT::VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT){os << "VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceAddressBindingTypeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceAddressBindingTypeEXT::VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT){os << "VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT, "; }
   
       if(src == VkDeviceAddressBindingTypeEXT::VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT){os << "VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT, "; }
   
       if(src == VkDeviceAddressBindingTypeEXT::VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT){os << "VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceDiagnosticsConfigFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV){os << "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV, "; }
   
       if(src == VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV){os << "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV, "; }
   
       if(src == VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV){os << "VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV, "; }
   
       if(src == VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV){os << "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV, "; }
   
       if(src == VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV){os << "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceEventTypeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceEventTypeEXT::VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT){os << "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT, "; }
   
       if(src == VkDeviceEventTypeEXT::VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT){os << "VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceFaultAddressTypeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceFaultAddressTypeEXT::VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT){os << "VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT, "; }
   
       if(src == VkDeviceFaultAddressTypeEXT::VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT){os << "VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT, "; }
   
       if(src == VkDeviceFaultAddressTypeEXT::VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT){os << "VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT, "; }
   
       if(src == VkDeviceFaultAddressTypeEXT::VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT){os << "VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT, "; }
   
       if(src == VkDeviceFaultAddressTypeEXT::VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT){os << "VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT, "; }
   
       if(src == VkDeviceFaultAddressTypeEXT::VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT){os << "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT, "; }
   
       if(src == VkDeviceFaultAddressTypeEXT::VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT){os << "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT, "; }
   
       if(src == VkDeviceFaultAddressTypeEXT::VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT){os << "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceFaultVendorBinaryHeaderVersionEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceFaultVendorBinaryHeaderVersionEXT::VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT){os << "VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT, "; }
   
       if(src == VkDeviceFaultVendorBinaryHeaderVersionEXT::VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT){os << "VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceGroupPresentModeFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR){os << "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR, "; }
   
       if(src == VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR){os << "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR, "; }
   
       if(src == VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR){os << "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR, "; }
   
       if(src == VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR){os << "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceMemoryReportEventTypeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT){os << "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT, "; }
   
       if(src == VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT){os << "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT, "; }
   
       if(src == VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT){os << "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT, "; }
   
       if(src == VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT){os << "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT, "; }
   
       if(src == VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT){os << "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT, "; }
   
       if(src == VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT){os << "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDeviceQueueCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDeviceQueueCreateFlagBits::VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT){os << "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT, "; }
   
       if(src == VkDeviceQueueCreateFlagBits::VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDirectDriverLoadingModeLUNARG const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDirectDriverLoadingModeLUNARG::VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG){os << "VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG, "; }
   
       if(src == VkDirectDriverLoadingModeLUNARG::VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG){os << "VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG, "; }
   
       if(src == VkDirectDriverLoadingModeLUNARG::VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG){os << "VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDiscardRectangleModeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDiscardRectangleModeEXT::VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT){os << "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT, "; }
   
       if(src == VkDiscardRectangleModeEXT::VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT){os << "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT, "; }
   
       if(src == VkDiscardRectangleModeEXT::VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT){os << "VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDisplayEventTypeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDisplayEventTypeEXT::VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT){os << "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT, "; }
   
       if(src == VkDisplayEventTypeEXT::VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT){os << "VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDisplayPlaneAlphaFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR){os << "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR, "; }
   
       if(src == VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR){os << "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR, "; }
   
       if(src == VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR){os << "VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR){os << "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR, "; }
   
       if(src == VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR){os << "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDisplayPowerStateEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_OFF_EXT){os << "VK_DISPLAY_POWER_STATE_OFF_EXT, "; }
   
       if(src == VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_SUSPEND_EXT){os << "VK_DISPLAY_POWER_STATE_SUSPEND_EXT, "; }
   
       if(src == VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_ON_EXT){os << "VK_DISPLAY_POWER_STATE_ON_EXT, "; }
   
       if(src == VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT){os << "VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDriverId const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDriverId::VK_DRIVER_ID_AMD_PROPRIETARY){os << "VK_DRIVER_ID_AMD_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_AMD_PROPRIETARY_KHR){os << "VK_DRIVER_ID_AMD_PROPRIETARY_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_GOOGLE_SWIFTSHADER){os << "VK_DRIVER_ID_GOOGLE_SWIFTSHADER, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR){os << "VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_GGP_PROPRIETARY){os << "VK_DRIVER_ID_GGP_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_GGP_PROPRIETARY_KHR){os << "VK_DRIVER_ID_GGP_PROPRIETARY_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_BROADCOM_PROPRIETARY){os << "VK_DRIVER_ID_BROADCOM_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR){os << "VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_LLVMPIPE){os << "VK_DRIVER_ID_MESA_LLVMPIPE, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MOLTENVK){os << "VK_DRIVER_ID_MOLTENVK, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_COREAVI_PROPRIETARY){os << "VK_DRIVER_ID_COREAVI_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_JUICE_PROPRIETARY){os << "VK_DRIVER_ID_JUICE_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_VERISILICON_PROPRIETARY){os << "VK_DRIVER_ID_VERISILICON_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_TURNIP){os << "VK_DRIVER_ID_MESA_TURNIP, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_V3DV){os << "VK_DRIVER_ID_MESA_V3DV, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_AMD_OPEN_SOURCE){os << "VK_DRIVER_ID_AMD_OPEN_SOURCE, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR){os << "VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_PANVK){os << "VK_DRIVER_ID_MESA_PANVK, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_SAMSUNG_PROPRIETARY){os << "VK_DRIVER_ID_SAMSUNG_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MAX_ENUM){os << "VK_DRIVER_ID_MAX_ENUM, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_VENUS){os << "VK_DRIVER_ID_MESA_VENUS, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_DOZEN){os << "VK_DRIVER_ID_MESA_DOZEN, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_NVK){os << "VK_DRIVER_ID_MESA_NVK, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA){os << "VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_RADV){os << "VK_DRIVER_ID_MESA_RADV, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_MESA_RADV_KHR){os << "VK_DRIVER_ID_MESA_RADV_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_NVIDIA_PROPRIETARY){os << "VK_DRIVER_ID_NVIDIA_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR){os << "VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS){os << "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR){os << "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA){os << "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR){os << "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_IMAGINATION_PROPRIETARY){os << "VK_DRIVER_ID_IMAGINATION_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR){os << "VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_QUALCOMM_PROPRIETARY){os << "VK_DRIVER_ID_QUALCOMM_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR){os << "VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_ARM_PROPRIETARY){os << "VK_DRIVER_ID_ARM_PROPRIETARY, "; }
   
       if(src == VkDriverId::VK_DRIVER_ID_ARM_PROPRIETARY_KHR){os << "VK_DRIVER_ID_ARM_PROPRIETARY_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkDynamicState const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT){os << "VK_DYNAMIC_STATE_VIEWPORT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_SCISSOR){os << "VK_DYNAMIC_STATE_SCISSOR, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV){os << "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT){os << "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT){os << "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV){os << "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV){os << "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV){os << "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR){os << "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_LINE_STIPPLE_EXT){os << "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_CULL_MODE){os << "VK_DYNAMIC_STATE_CULL_MODE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_CULL_MODE_EXT){os << "VK_DYNAMIC_STATE_CULL_MODE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_FRONT_FACE){os << "VK_DYNAMIC_STATE_FRONT_FACE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_FRONT_FACE_EXT){os << "VK_DYNAMIC_STATE_FRONT_FACE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY){os << "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT){os << "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT){os << "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT){os << "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT){os << "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT){os << "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE){os << "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT){os << "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE){os << "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT){os << "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE){os << "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT){os << "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_COMPARE_OP){os << "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT){os << "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE){os << "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT){os << "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE){os << "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT){os << "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_STENCIL_OP){os << "VK_DYNAMIC_STATE_STENCIL_OP, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_STENCIL_OP_EXT){os << "VK_DYNAMIC_STATE_STENCIL_OP_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR){os << "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VERTEX_INPUT_EXT){os << "VK_DYNAMIC_STATE_VERTEX_INPUT_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT){os << "VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE){os << "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT){os << "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE){os << "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT){os << "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_LOGIC_OP_EXT){os << "VK_DYNAMIC_STATE_LOGIC_OP_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE){os << "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT){os << "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT){os << "VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT){os << "VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT){os << "VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_POLYGON_MODE_EXT){os << "VK_DYNAMIC_STATE_POLYGON_MODE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT){os << "VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_SAMPLE_MASK_EXT){os << "VK_DYNAMIC_STATE_SAMPLE_MASK_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT){os << "VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT){os << "VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT){os << "VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT){os << "VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT){os << "VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT){os << "VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT){os << "VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT){os << "VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT){os << "VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT){os << "VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT){os << "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT){os << "VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT){os << "VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT){os << "VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT){os << "VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT){os << "VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV){os << "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV){os << "VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV){os << "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV){os << "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV){os << "VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV){os << "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV){os << "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV){os << "VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV){os << "VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV){os << "VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_LINE_WIDTH){os << "VK_DYNAMIC_STATE_LINE_WIDTH, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_MAX_ENUM){os << "VK_DYNAMIC_STATE_MAX_ENUM, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BIAS){os << "VK_DYNAMIC_STATE_DEPTH_BIAS, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_BLEND_CONSTANTS){os << "VK_DYNAMIC_STATE_BLEND_CONSTANTS, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BOUNDS){os << "VK_DYNAMIC_STATE_DEPTH_BOUNDS, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK){os << "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_STENCIL_WRITE_MASK){os << "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK, "; }
   
       if(src == VkDynamicState::VK_DYNAMIC_STATE_STENCIL_REFERENCE){os << "VK_DYNAMIC_STATE_STENCIL_REFERENCE, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkEventCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkEventCreateFlagBits::VK_EVENT_CREATE_DEVICE_ONLY_BIT){os << "VK_EVENT_CREATE_DEVICE_ONLY_BIT, "; }
   
       if(src == VkEventCreateFlagBits::VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR){os << "VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR, "; }
   
       if(src == VkEventCreateFlagBits::VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkExternalFenceFeatureFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT){os << "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT, "; }
   
       if(src == VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR){os << "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR, "; }
   
       if(src == VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT){os << "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT, "; }
   
       if(src == VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR){os << "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR, "; }
   
       if(src == VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM){os << "VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkExternalFenceHandleTypeFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT, "; }
   
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR, "; }
   
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT, "; }
   
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR, "; }
   
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, "; }
   
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR, "; }
   
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT, "; }
   
       if(src == VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR){os << "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkExternalMemoryFeatureFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT){os << "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT, "; }
   
       if(src == VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR){os << "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR, "; }
   
       if(src == VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT){os << "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT, "; }
   
       if(src == VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR){os << "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR, "; }
   
       if(src == VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM){os << "VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT){os << "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT, "; }
   
       if(src == VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR){os << "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkExternalMemoryFeatureFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV){os << "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV, "; }
   
       if(src == VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV){os << "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV, "; }
   
       if(src == VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV){os << "VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV, "; }
   
       if(src == VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV){os << "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkExternalMemoryHandleTypeFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkExternalMemoryHandleTypeFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV, "; }
   
       if(src == VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV){os << "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkExternalSemaphoreFeatureFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT){os << "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT, "; }
   
       if(src == VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR){os << "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR, "; }
   
       if(src == VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT){os << "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT, "; }
   
       if(src == VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR){os << "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR, "; }
   
       if(src == VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM){os << "VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkExternalSemaphoreHandleTypeFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT, "; }
   
       if(src == VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR){os << "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFenceCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFenceCreateFlagBits::VK_FENCE_CREATE_SIGNALED_BIT){os << "VK_FENCE_CREATE_SIGNALED_BIT, "; }
   
       if(src == VkFenceCreateFlagBits::VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFenceImportFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFenceImportFlagBits::VK_FENCE_IMPORT_TEMPORARY_BIT){os << "VK_FENCE_IMPORT_TEMPORARY_BIT, "; }
   
       if(src == VkFenceImportFlagBits::VK_FENCE_IMPORT_TEMPORARY_BIT_KHR){os << "VK_FENCE_IMPORT_TEMPORARY_BIT_KHR, "; }
   
       if(src == VkFenceImportFlagBits::VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM){os << "VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFilter const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFilter::VK_FILTER_NEAREST){os << "VK_FILTER_NEAREST, "; }
   
       if(src == VkFilter::VK_FILTER_LINEAR){os << "VK_FILTER_LINEAR, "; }
   
       if(src == VkFilter::VK_FILTER_CUBIC_EXT){os << "VK_FILTER_CUBIC_EXT, "; }
   
       if(src == VkFilter::VK_FILTER_CUBIC_IMG){os << "VK_FILTER_CUBIC_IMG, "; }
   
       if(src == VkFilter::VK_FILTER_MAX_ENUM){os << "VK_FILTER_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFormat const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFormat::VK_FORMAT_UNDEFINED){os << "VK_FORMAT_UNDEFINED, "; }
   
       if(src == VkFormat::VK_FORMAT_R4G4_UNORM_PACK8){os << "VK_FORMAT_R4G4_UNORM_PACK8, "; }
   
       if(src == VkFormat::VK_FORMAT_R8_SNORM){os << "VK_FORMAT_R8_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R32_SFLOAT){os << "VK_FORMAT_R32_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG){os << "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, "; }
   
       if(src == VkFormat::VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG){os << "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, "; }
   
       if(src == VkFormat::VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG){os << "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, "; }
   
       if(src == VkFormat::VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG){os << "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, "; }
   
       if(src == VkFormat::VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG){os << "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, "; }
   
       if(src == VkFormat::VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG){os << "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, "; }
   
       if(src == VkFormat::VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG){os << "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, "; }
   
       if(src == VkFormat::VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG){os << "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK){os << "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT){os << "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_G8B8G8R8_422_UNORM){os << "VK_FORMAT_G8B8G8R8_422_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G8B8G8R8_422_UNORM_KHR){os << "VK_FORMAT_G8B8G8R8_422_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8G8_422_UNORM){os << "VK_FORMAT_B8G8R8G8_422_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8G8_422_UNORM_KHR){os << "VK_FORMAT_B8G8R8G8_422_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM){os << "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR){os << "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8R8_2PLANE_420_UNORM){os << "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR){os << "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM){os << "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR){os << "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8R8_2PLANE_422_UNORM){os << "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR){os << "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM){os << "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR){os << "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_R10X6_UNORM_PACK16){os << "VK_FORMAT_R10X6_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R10X6_UNORM_PACK16_KHR){os << "VK_FORMAT_R10X6_UNORM_PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_R10X6G10X6_UNORM_2PACK16){os << "VK_FORMAT_R10X6G10X6_UNORM_2PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR){os << "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16){os << "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR){os << "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16){os << "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR){os << "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16){os << "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR){os << "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16){os << "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR){os << "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16){os << "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR){os << "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16){os << "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR){os << "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16){os << "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR){os << "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16){os << "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR){os << "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_R12X4_UNORM_PACK16){os << "VK_FORMAT_R12X4_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R12X4_UNORM_PACK16_KHR){os << "VK_FORMAT_R12X4_UNORM_PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_R12X4G12X4_UNORM_2PACK16){os << "VK_FORMAT_R12X4G12X4_UNORM_2PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR){os << "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16){os << "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR){os << "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16){os << "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR){os << "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16){os << "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR){os << "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16){os << "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR){os << "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16){os << "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR){os << "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16){os << "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR){os << "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16){os << "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR){os << "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16){os << "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR){os << "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G16B16G16R16_422_UNORM){os << "VK_FORMAT_G16B16G16R16_422_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G16B16G16R16_422_UNORM_KHR){os << "VK_FORMAT_G16B16G16R16_422_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_B16G16R16G16_422_UNORM){os << "VK_FORMAT_B16G16R16G16_422_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_B16G16R16G16_422_UNORM_KHR){os << "VK_FORMAT_B16G16R16G16_422_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM){os << "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR){os << "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16R16_2PLANE_420_UNORM){os << "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR){os << "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM){os << "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR){os << "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16R16_2PLANE_422_UNORM){os << "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR){os << "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM){os << "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR){os << "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8R8_2PLANE_444_UNORM){os << "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT){os << "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16){os << "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT){os << "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16){os << "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT){os << "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16R16_2PLANE_444_UNORM){os << "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT){os << "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_A4R4G4B4_UNORM_PACK16){os << "VK_FORMAT_A4R4G4B4_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT){os << "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_A4B4G4R4_UNORM_PACK16){os << "VK_FORMAT_A4B4G4R4_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT){os << "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16_S10_5_NV){os << "VK_FORMAT_R16G16_S10_5_NV, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32_UINT){os << "VK_FORMAT_R32G32_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32_SINT){os << "VK_FORMAT_R32G32_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32_SFLOAT){os << "VK_FORMAT_R32G32_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32B32_UINT){os << "VK_FORMAT_R32G32B32_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32B32_SINT){os << "VK_FORMAT_R32G32B32_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32B32_SFLOAT){os << "VK_FORMAT_R32G32B32_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32B32A32_UINT){os << "VK_FORMAT_R32G32B32A32_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32B32A32_SINT){os << "VK_FORMAT_R32G32B32A32_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32G32B32A32_SFLOAT){os << "VK_FORMAT_R32G32B32A32_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8_USCALED){os << "VK_FORMAT_R8_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R64_UINT){os << "VK_FORMAT_R64_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64_SINT){os << "VK_FORMAT_R64_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64_SFLOAT){os << "VK_FORMAT_R64_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64_UINT){os << "VK_FORMAT_R64G64_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64_SINT){os << "VK_FORMAT_R64G64_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64_SFLOAT){os << "VK_FORMAT_R64G64_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64B64_UINT){os << "VK_FORMAT_R64G64B64_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64B64_SINT){os << "VK_FORMAT_R64G64B64_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64B64_SFLOAT){os << "VK_FORMAT_R64G64B64_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64B64A64_UINT){os << "VK_FORMAT_R64G64B64A64_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8_SSCALED){os << "VK_FORMAT_R8_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64B64A64_SINT){os << "VK_FORMAT_R64G64B64A64_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R64G64B64A64_SFLOAT){os << "VK_FORMAT_R64G64B64A64_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_B10G11R11_UFLOAT_PACK32){os << "VK_FORMAT_B10G11R11_UFLOAT_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_E5B9G9R9_UFLOAT_PACK32){os << "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_D16_UNORM){os << "VK_FORMAT_D16_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_X8_D24_UNORM_PACK32){os << "VK_FORMAT_X8_D24_UNORM_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_D32_SFLOAT){os << "VK_FORMAT_D32_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_S8_UINT){os << "VK_FORMAT_S8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_D16_UNORM_S8_UINT){os << "VK_FORMAT_D16_UNORM_S8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_D24_UNORM_S8_UINT){os << "VK_FORMAT_D24_UNORM_S8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8_UINT){os << "VK_FORMAT_R8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_D32_SFLOAT_S8_UINT){os << "VK_FORMAT_D32_SFLOAT_S8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_BC1_RGB_UNORM_BLOCK){os << "VK_FORMAT_BC1_RGB_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC1_RGB_SRGB_BLOCK){os << "VK_FORMAT_BC1_RGB_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC1_RGBA_UNORM_BLOCK){os << "VK_FORMAT_BC1_RGBA_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC1_RGBA_SRGB_BLOCK){os << "VK_FORMAT_BC1_RGBA_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC2_UNORM_BLOCK){os << "VK_FORMAT_BC2_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC2_SRGB_BLOCK){os << "VK_FORMAT_BC2_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC3_UNORM_BLOCK){os << "VK_FORMAT_BC3_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC3_SRGB_BLOCK){os << "VK_FORMAT_BC3_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC4_UNORM_BLOCK){os << "VK_FORMAT_BC4_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_R8_SINT){os << "VK_FORMAT_R8_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_BC4_SNORM_BLOCK){os << "VK_FORMAT_BC4_SNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC5_UNORM_BLOCK){os << "VK_FORMAT_BC5_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC5_SNORM_BLOCK){os << "VK_FORMAT_BC5_SNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC6H_UFLOAT_BLOCK){os << "VK_FORMAT_BC6H_UFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC6H_SFLOAT_BLOCK){os << "VK_FORMAT_BC6H_SFLOAT_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC7_UNORM_BLOCK){os << "VK_FORMAT_BC7_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_BC7_SRGB_BLOCK){os << "VK_FORMAT_BC7_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK){os << "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK){os << "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK){os << "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_R8_SRGB){os << "VK_FORMAT_R8_SRGB, "; }
   
       if(src == VkFormat::VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK){os << "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK){os << "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK){os << "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_EAC_R11_UNORM_BLOCK){os << "VK_FORMAT_EAC_R11_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_EAC_R11_SNORM_BLOCK){os << "VK_FORMAT_EAC_R11_SNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_EAC_R11G11_UNORM_BLOCK){os << "VK_FORMAT_EAC_R11G11_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_EAC_R11G11_SNORM_BLOCK){os << "VK_FORMAT_EAC_R11G11_SNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_4x4_UNORM_BLOCK){os << "VK_FORMAT_ASTC_4x4_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_4x4_SRGB_BLOCK){os << "VK_FORMAT_ASTC_4x4_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_5x4_UNORM_BLOCK){os << "VK_FORMAT_ASTC_5x4_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8_UNORM){os << "VK_FORMAT_R8G8_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_5x4_SRGB_BLOCK){os << "VK_FORMAT_ASTC_5x4_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_5x5_UNORM_BLOCK){os << "VK_FORMAT_ASTC_5x5_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_5x5_SRGB_BLOCK){os << "VK_FORMAT_ASTC_5x5_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_6x5_UNORM_BLOCK){os << "VK_FORMAT_ASTC_6x5_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_6x5_SRGB_BLOCK){os << "VK_FORMAT_ASTC_6x5_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_6x6_UNORM_BLOCK){os << "VK_FORMAT_ASTC_6x6_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_6x6_SRGB_BLOCK){os << "VK_FORMAT_ASTC_6x6_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x5_UNORM_BLOCK){os << "VK_FORMAT_ASTC_8x5_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x5_SRGB_BLOCK){os << "VK_FORMAT_ASTC_8x5_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x6_UNORM_BLOCK){os << "VK_FORMAT_ASTC_8x6_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8_SNORM){os << "VK_FORMAT_R8G8_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x6_SRGB_BLOCK){os << "VK_FORMAT_ASTC_8x6_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x8_UNORM_BLOCK){os << "VK_FORMAT_ASTC_8x8_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_8x8_SRGB_BLOCK){os << "VK_FORMAT_ASTC_8x8_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x5_UNORM_BLOCK){os << "VK_FORMAT_ASTC_10x5_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x5_SRGB_BLOCK){os << "VK_FORMAT_ASTC_10x5_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x6_UNORM_BLOCK){os << "VK_FORMAT_ASTC_10x6_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x6_SRGB_BLOCK){os << "VK_FORMAT_ASTC_10x6_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x8_UNORM_BLOCK){os << "VK_FORMAT_ASTC_10x8_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x8_SRGB_BLOCK){os << "VK_FORMAT_ASTC_10x8_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x10_UNORM_BLOCK){os << "VK_FORMAT_ASTC_10x10_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8_USCALED){os << "VK_FORMAT_R8G8_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_10x10_SRGB_BLOCK){os << "VK_FORMAT_ASTC_10x10_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_12x10_UNORM_BLOCK){os << "VK_FORMAT_ASTC_12x10_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_12x10_SRGB_BLOCK){os << "VK_FORMAT_ASTC_12x10_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_12x12_UNORM_BLOCK){os << "VK_FORMAT_ASTC_12x12_UNORM_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_ASTC_12x12_SRGB_BLOCK){os << "VK_FORMAT_ASTC_12x12_SRGB_BLOCK, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8_SSCALED){os << "VK_FORMAT_R8G8_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R4G4B4A4_UNORM_PACK16){os << "VK_FORMAT_R4G4B4A4_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8_UINT){os << "VK_FORMAT_R8G8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8_SINT){os << "VK_FORMAT_R8G8_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_MAX_ENUM){os << "VK_FORMAT_MAX_ENUM, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8_SRGB){os << "VK_FORMAT_R8G8_SRGB, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8_UNORM){os << "VK_FORMAT_R8G8B8_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8_SNORM){os << "VK_FORMAT_R8G8B8_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8_USCALED){os << "VK_FORMAT_R8G8B8_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8_SSCALED){os << "VK_FORMAT_R8G8B8_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8_UINT){os << "VK_FORMAT_R8G8B8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8_SINT){os << "VK_FORMAT_R8G8B8_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8_SRGB){os << "VK_FORMAT_R8G8B8_SRGB, "; }
   
       if(src == VkFormat::VK_FORMAT_B4G4R4A4_UNORM_PACK16){os << "VK_FORMAT_B4G4R4A4_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8_UNORM){os << "VK_FORMAT_B8G8R8_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8_SNORM){os << "VK_FORMAT_B8G8R8_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8_USCALED){os << "VK_FORMAT_B8G8R8_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8_SSCALED){os << "VK_FORMAT_B8G8R8_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8_UINT){os << "VK_FORMAT_B8G8R8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8_SINT){os << "VK_FORMAT_B8G8R8_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8_SRGB){os << "VK_FORMAT_B8G8R8_SRGB, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8A8_UNORM){os << "VK_FORMAT_R8G8B8A8_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8A8_SNORM){os << "VK_FORMAT_R8G8B8A8_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8A8_USCALED){os << "VK_FORMAT_R8G8B8A8_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R5G6B5_UNORM_PACK16){os << "VK_FORMAT_R5G6B5_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8A8_SSCALED){os << "VK_FORMAT_R8G8B8A8_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8A8_UINT){os << "VK_FORMAT_R8G8B8A8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8A8_SINT){os << "VK_FORMAT_R8G8B8A8_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8G8B8A8_SRGB){os << "VK_FORMAT_R8G8B8A8_SRGB, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8A8_UNORM){os << "VK_FORMAT_B8G8R8A8_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8A8_SNORM){os << "VK_FORMAT_B8G8R8A8_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8A8_USCALED){os << "VK_FORMAT_B8G8R8A8_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8A8_SSCALED){os << "VK_FORMAT_B8G8R8A8_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8A8_UINT){os << "VK_FORMAT_B8G8R8A8_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8A8_SINT){os << "VK_FORMAT_B8G8R8A8_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_B5G6R5_UNORM_PACK16){os << "VK_FORMAT_B5G6R5_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_B8G8R8A8_SRGB){os << "VK_FORMAT_B8G8R8A8_SRGB, "; }
   
       if(src == VkFormat::VK_FORMAT_A8B8G8R8_UNORM_PACK32){os << "VK_FORMAT_A8B8G8R8_UNORM_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A8B8G8R8_SNORM_PACK32){os << "VK_FORMAT_A8B8G8R8_SNORM_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A8B8G8R8_USCALED_PACK32){os << "VK_FORMAT_A8B8G8R8_USCALED_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A8B8G8R8_SSCALED_PACK32){os << "VK_FORMAT_A8B8G8R8_SSCALED_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A8B8G8R8_UINT_PACK32){os << "VK_FORMAT_A8B8G8R8_UINT_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A8B8G8R8_SINT_PACK32){os << "VK_FORMAT_A8B8G8R8_SINT_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A8B8G8R8_SRGB_PACK32){os << "VK_FORMAT_A8B8G8R8_SRGB_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2R10G10B10_UNORM_PACK32){os << "VK_FORMAT_A2R10G10B10_UNORM_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2R10G10B10_SNORM_PACK32){os << "VK_FORMAT_A2R10G10B10_SNORM_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_R5G5B5A1_UNORM_PACK16){os << "VK_FORMAT_R5G5B5A1_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_A2R10G10B10_USCALED_PACK32){os << "VK_FORMAT_A2R10G10B10_USCALED_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2R10G10B10_SSCALED_PACK32){os << "VK_FORMAT_A2R10G10B10_SSCALED_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2R10G10B10_UINT_PACK32){os << "VK_FORMAT_A2R10G10B10_UINT_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2R10G10B10_SINT_PACK32){os << "VK_FORMAT_A2R10G10B10_SINT_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2B10G10R10_UNORM_PACK32){os << "VK_FORMAT_A2B10G10R10_UNORM_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2B10G10R10_SNORM_PACK32){os << "VK_FORMAT_A2B10G10R10_SNORM_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2B10G10R10_USCALED_PACK32){os << "VK_FORMAT_A2B10G10R10_USCALED_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2B10G10R10_SSCALED_PACK32){os << "VK_FORMAT_A2B10G10R10_SSCALED_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2B10G10R10_UINT_PACK32){os << "VK_FORMAT_A2B10G10R10_UINT_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_A2B10G10R10_SINT_PACK32){os << "VK_FORMAT_A2B10G10R10_SINT_PACK32, "; }
   
       if(src == VkFormat::VK_FORMAT_B5G5R5A1_UNORM_PACK16){os << "VK_FORMAT_B5G5R5A1_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R16_UNORM){os << "VK_FORMAT_R16_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16_SNORM){os << "VK_FORMAT_R16_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16_USCALED){os << "VK_FORMAT_R16_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R16_SSCALED){os << "VK_FORMAT_R16_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R16_UINT){os << "VK_FORMAT_R16_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16_SINT){os << "VK_FORMAT_R16_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16_SFLOAT){os << "VK_FORMAT_R16_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16_UNORM){os << "VK_FORMAT_R16G16_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16_SNORM){os << "VK_FORMAT_R16G16_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16_USCALED){os << "VK_FORMAT_R16G16_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_A1R5G5B5_UNORM_PACK16){os << "VK_FORMAT_A1R5G5B5_UNORM_PACK16, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16_SSCALED){os << "VK_FORMAT_R16G16_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16_UINT){os << "VK_FORMAT_R16G16_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16_SINT){os << "VK_FORMAT_R16G16_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16_SFLOAT){os << "VK_FORMAT_R16G16_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16_UNORM){os << "VK_FORMAT_R16G16B16_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16_SNORM){os << "VK_FORMAT_R16G16B16_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16_USCALED){os << "VK_FORMAT_R16G16B16_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16_SSCALED){os << "VK_FORMAT_R16G16B16_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16_UINT){os << "VK_FORMAT_R16G16B16_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16_SINT){os << "VK_FORMAT_R16G16B16_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R8_UNORM){os << "VK_FORMAT_R8_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16_SFLOAT){os << "VK_FORMAT_R16G16B16_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16A16_UNORM){os << "VK_FORMAT_R16G16B16A16_UNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16A16_SNORM){os << "VK_FORMAT_R16G16B16A16_SNORM, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16A16_USCALED){os << "VK_FORMAT_R16G16B16A16_USCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16A16_SSCALED){os << "VK_FORMAT_R16G16B16A16_SSCALED, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16A16_UINT){os << "VK_FORMAT_R16G16B16A16_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16A16_SINT){os << "VK_FORMAT_R16G16B16A16_SINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R16G16B16A16_SFLOAT){os << "VK_FORMAT_R16G16B16A16_SFLOAT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32_UINT){os << "VK_FORMAT_R32_UINT, "; }
   
       if(src == VkFormat::VK_FORMAT_R32_SINT){os << "VK_FORMAT_R32_SINT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFormatFeatureFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_BLIT_SRC_BIT){os << "VK_FORMAT_FEATURE_BLIT_SRC_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR){os << "VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT){os << "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT){os << "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR){os << "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR){os << "VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT){os << "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_SRC_BIT){os << "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR){os << "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT){os << "VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT){os << "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_BLIT_DST_BIT){os << "VK_FORMAT_FEATURE_BLIT_DST_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM){os << "VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT){os << "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR){os << "VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT){os << "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_DST_BIT){os << "VK_FORMAT_FEATURE_TRANSFER_DST_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR){os << "VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR){os << "VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT){os << "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DISJOINT_BIT){os << "VK_FORMAT_FEATURE_DISJOINT_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DISJOINT_BIT_KHR){os << "VK_FORMAT_FEATURE_DISJOINT_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT){os << "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR){os << "VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT){os << "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR){os << "VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT){os << "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG){os << "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT){os << "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT, "; }
   
       if(src == VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR){os << "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFragmentShadingRateCombinerOpKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR){os << "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR, "; }
   
       if(src == VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR){os << "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR, "; }
   
       if(src == VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR){os << "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR, "; }
   
       if(src == VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR){os << "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR, "; }
   
       if(src == VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR){os << "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR, "; }
   
       if(src == VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR){os << "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFragmentShadingRateNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV){os << "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV){os << "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV){os << "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV){os << "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV){os << "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV){os << "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV){os << "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV){os << "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV){os << "VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV){os << "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV){os << "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV){os << "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV, "; }
   
       if(src == VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV){os << "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFragmentShadingRateTypeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFragmentShadingRateTypeNV::VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV){os << "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV, "; }
   
       if(src == VkFragmentShadingRateTypeNV::VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV){os << "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV, "; }
   
       if(src == VkFragmentShadingRateTypeNV::VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV){os << "VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFramebufferCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT){os << "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, "; }
   
       if(src == VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR){os << "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR, "; }
   
       if(src == VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkFrontFace const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkFrontFace::VK_FRONT_FACE_COUNTER_CLOCKWISE){os << "VK_FRONT_FACE_COUNTER_CLOCKWISE, "; }
   
       if(src == VkFrontFace::VK_FRONT_FACE_CLOCKWISE){os << "VK_FRONT_FACE_CLOCKWISE, "; }
   
       if(src == VkFrontFace::VK_FRONT_FACE_MAX_ENUM){os << "VK_FRONT_FACE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkGeometryFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkGeometryFlagBitsKHR::VK_GEOMETRY_OPAQUE_BIT_KHR){os << "VK_GEOMETRY_OPAQUE_BIT_KHR, "; }
   
       if(src == VkGeometryFlagBitsKHR::VK_GEOMETRY_OPAQUE_BIT_NV){os << "VK_GEOMETRY_OPAQUE_BIT_NV, "; }
   
       if(src == VkGeometryFlagBitsKHR::VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR){os << "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR, "; }
   
       if(src == VkGeometryFlagBitsKHR::VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV){os << "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV, "; }
   
       if(src == VkGeometryFlagBitsKHR::VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR){os << "VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkGeometryInstanceFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV){os << "VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR){os << "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT){os << "VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR){os << "VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR){os << "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV){os << "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT){os << "VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR){os << "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV){os << "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR){os << "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR, "; }
   
       if(src == VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV){os << "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkGeometryTypeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkGeometryTypeKHR::VK_GEOMETRY_TYPE_TRIANGLES_KHR){os << "VK_GEOMETRY_TYPE_TRIANGLES_KHR, "; }
   
       if(src == VkGeometryTypeKHR::VK_GEOMETRY_TYPE_TRIANGLES_NV){os << "VK_GEOMETRY_TYPE_TRIANGLES_NV, "; }
   
       if(src == VkGeometryTypeKHR::VK_GEOMETRY_TYPE_AABBS_KHR){os << "VK_GEOMETRY_TYPE_AABBS_KHR, "; }
   
       if(src == VkGeometryTypeKHR::VK_GEOMETRY_TYPE_AABBS_NV){os << "VK_GEOMETRY_TYPE_AABBS_NV, "; }
   
       if(src == VkGeometryTypeKHR::VK_GEOMETRY_TYPE_INSTANCES_KHR){os << "VK_GEOMETRY_TYPE_INSTANCES_KHR, "; }
   
       if(src == VkGeometryTypeKHR::VK_GEOMETRY_TYPE_MAX_ENUM_KHR){os << "VK_GEOMETRY_TYPE_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkGraphicsPipelineLibraryFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkGraphicsPipelineLibraryFlagBitsEXT::VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT){os << "VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT, "; }
   
       if(src == VkGraphicsPipelineLibraryFlagBitsEXT::VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT){os << "VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT, "; }
   
       if(src == VkGraphicsPipelineLibraryFlagBitsEXT::VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT){os << "VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkGraphicsPipelineLibraryFlagBitsEXT::VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT){os << "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT, "; }
   
       if(src == VkGraphicsPipelineLibraryFlagBitsEXT::VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT){os << "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageAspectFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_NONE){os << "VK_IMAGE_ASPECT_NONE, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_NONE_KHR){os << "VK_IMAGE_ASPECT_NONE_KHR, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_COLOR_BIT){os << "VK_IMAGE_ASPECT_COLOR_BIT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT){os << "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT){os << "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_0_BIT){os << "VK_IMAGE_ASPECT_PLANE_0_BIT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_0_BIT_KHR){os << "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_DEPTH_BIT){os << "VK_IMAGE_ASPECT_DEPTH_BIT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM){os << "VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT){os << "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_1_BIT){os << "VK_IMAGE_ASPECT_PLANE_1_BIT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_1_BIT_KHR){os << "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_STENCIL_BIT){os << "VK_IMAGE_ASPECT_STENCIL_BIT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT){os << "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_2_BIT){os << "VK_IMAGE_ASPECT_PLANE_2_BIT, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_2_BIT_KHR){os << "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR, "; }
   
       if(src == VkImageAspectFlagBits::VK_IMAGE_ASPECT_METADATA_BIT){os << "VK_IMAGE_ASPECT_METADATA_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageCompressionFixedRateFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT, "; }
   
       if(src == VkImageCompressionFixedRateFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageCompressionFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageCompressionFlagBitsEXT::VK_IMAGE_COMPRESSION_DEFAULT_EXT){os << "VK_IMAGE_COMPRESSION_DEFAULT_EXT, "; }
   
       if(src == VkImageCompressionFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT, "; }
   
       if(src == VkImageCompressionFlagBitsEXT::VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT){os << "VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT, "; }
   
       if(src == VkImageCompressionFlagBitsEXT::VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT){os << "VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkImageCompressionFlagBitsEXT::VK_IMAGE_COMPRESSION_DISABLED_EXT){os << "VK_IMAGE_COMPRESSION_DISABLED_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_BINDING_BIT){os << "VK_IMAGE_CREATE_SPARSE_BINDING_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_ALIAS_BIT){os << "VK_IMAGE_CREATE_ALIAS_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_ALIAS_BIT_KHR){os << "VK_IMAGE_CREATE_ALIAS_BIT_KHR, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT){os << "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR){os << "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT){os << "VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT){os << "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT){os << "VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT){os << "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_PROTECTED_BIT){os << "VK_IMAGE_CREATE_PROTECTED_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_EXTENDED_USAGE_BIT){os << "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR){os << "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT){os << "VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT){os << "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR){os << "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM){os << "VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_ALIASED_BIT){os << "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT){os << "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_DISJOINT_BIT){os << "VK_IMAGE_CREATE_DISJOINT_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_DISJOINT_BIT_KHR){os << "VK_IMAGE_CREATE_DISJOINT_BIT_KHR, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT){os << "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR){os << "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT){os << "VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT){os << "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT, "; }
   
       if(src == VkImageCreateFlagBits::VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV){os << "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageLayout const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED){os << "VK_IMAGE_LAYOUT_UNDEFINED, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_GENERAL){os << "VK_IMAGE_LAYOUT_GENERAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_PRESENT_SRC_KHR){os << "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR){os << "VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR){os << "VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR){os << "VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR){os << "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL){os << "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL){os << "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV){os << "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT){os << "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL){os << "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL){os << "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL){os << "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL){os << "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR){os << "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR){os << "VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR){os << "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL){os << "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL){os << "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR){os << "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT){os << "VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL){os << "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_MAX_ENUM){os << "VK_IMAGE_LAYOUT_MAX_ENUM, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL){os << "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL){os << "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL){os << "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL){os << "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL){os << "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, "; }
   
       if(src == VkImageLayout::VK_IMAGE_LAYOUT_PREINITIALIZED){os << "VK_IMAGE_LAYOUT_PREINITIALIZED, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageTiling const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageTiling::VK_IMAGE_TILING_OPTIMAL){os << "VK_IMAGE_TILING_OPTIMAL, "; }
   
       if(src == VkImageTiling::VK_IMAGE_TILING_LINEAR){os << "VK_IMAGE_TILING_LINEAR, "; }
   
       if(src == VkImageTiling::VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT){os << "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT, "; }
   
       if(src == VkImageTiling::VK_IMAGE_TILING_MAX_ENUM){os << "VK_IMAGE_TILING_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageType::VK_IMAGE_TYPE_1D){os << "VK_IMAGE_TYPE_1D, "; }
   
       if(src == VkImageType::VK_IMAGE_TYPE_2D){os << "VK_IMAGE_TYPE_2D, "; }
   
       if(src == VkImageType::VK_IMAGE_TYPE_3D){os << "VK_IMAGE_TYPE_3D, "; }
   
       if(src == VkImageType::VK_IMAGE_TYPE_MAX_ENUM){os << "VK_IMAGE_TYPE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageUsageFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_SRC_BIT){os << "VK_IMAGE_USAGE_TRANSFER_SRC_BIT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR){os << "VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM){os << "VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT){os << "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT){os << "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR){os << "VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_DST_BIT){os << "VK_IMAGE_USAGE_TRANSFER_DST_BIT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR){os << "VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM){os << "VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM){os << "VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR){os << "VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV){os << "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI){os << "VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT){os << "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR){os << "VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_SAMPLED_BIT){os << "VK_IMAGE_USAGE_SAMPLED_BIT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR){os << "VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT){os << "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT){os << "VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT){os << "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_STORAGE_BIT){os << "VK_IMAGE_USAGE_STORAGE_BIT, "; }
   
       if(src == VkImageUsageFlagBits::VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR){os << "VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageViewCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT){os << "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT, "; }
   
       if(src == VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT){os << "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT, "; }
   
       if(src == VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT){os << "VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkImageViewType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkImageViewType::VK_IMAGE_VIEW_TYPE_1D){os << "VK_IMAGE_VIEW_TYPE_1D, "; }
   
       if(src == VkImageViewType::VK_IMAGE_VIEW_TYPE_2D){os << "VK_IMAGE_VIEW_TYPE_2D, "; }
   
       if(src == VkImageViewType::VK_IMAGE_VIEW_TYPE_3D){os << "VK_IMAGE_VIEW_TYPE_3D, "; }
   
       if(src == VkImageViewType::VK_IMAGE_VIEW_TYPE_MAX_ENUM){os << "VK_IMAGE_VIEW_TYPE_MAX_ENUM, "; }
   
       if(src == VkImageViewType::VK_IMAGE_VIEW_TYPE_CUBE){os << "VK_IMAGE_VIEW_TYPE_CUBE, "; }
   
       if(src == VkImageViewType::VK_IMAGE_VIEW_TYPE_1D_ARRAY){os << "VK_IMAGE_VIEW_TYPE_1D_ARRAY, "; }
   
       if(src == VkImageViewType::VK_IMAGE_VIEW_TYPE_2D_ARRAY){os << "VK_IMAGE_VIEW_TYPE_2D_ARRAY, "; }
   
       if(src == VkImageViewType::VK_IMAGE_VIEW_TYPE_CUBE_ARRAY){os << "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkIndexType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkIndexType::VK_INDEX_TYPE_UINT16){os << "VK_INDEX_TYPE_UINT16, "; }
   
       if(src == VkIndexType::VK_INDEX_TYPE_UINT32){os << "VK_INDEX_TYPE_UINT32, "; }
   
       if(src == VkIndexType::VK_INDEX_TYPE_NONE_KHR){os << "VK_INDEX_TYPE_NONE_KHR, "; }
   
       if(src == VkIndexType::VK_INDEX_TYPE_NONE_NV){os << "VK_INDEX_TYPE_NONE_NV, "; }
   
       if(src == VkIndexType::VK_INDEX_TYPE_UINT8_EXT){os << "VK_INDEX_TYPE_UINT8_EXT, "; }
   
       if(src == VkIndexType::VK_INDEX_TYPE_MAX_ENUM){os << "VK_INDEX_TYPE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkIndirectCommandsLayoutUsageFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV){os << "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV, "; }
   
       if(src == VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV){os << "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV, "; }
   
       if(src == VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV){os << "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV, "; }
   
       if(src == VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV){os << "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkIndirectCommandsTokenTypeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV, "; }
   
       if(src == VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV){os << "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkIndirectStateFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkIndirectStateFlagBitsNV::VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV){os << "VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV, "; }
   
       if(src == VkIndirectStateFlagBitsNV::VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV){os << "VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkInstanceCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkInstanceCreateFlagBits::VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR){os << "VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR, "; }
   
       if(src == VkInstanceCreateFlagBits::VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkInternalAllocationType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkInternalAllocationType::VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE){os << "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE, "; }
   
       if(src == VkInternalAllocationType::VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM){os << "VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkLineRasterizationModeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT){os << "VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT, "; }
   
       if(src == VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT){os << "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT, "; }
   
       if(src == VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT){os << "VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT, "; }
   
       if(src == VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT){os << "VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT, "; }
   
       if(src == VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT){os << "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkLogicOp const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkLogicOp::VK_LOGIC_OP_CLEAR){os << "VK_LOGIC_OP_CLEAR, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_AND){os << "VK_LOGIC_OP_AND, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_INVERT){os << "VK_LOGIC_OP_INVERT, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_OR_REVERSE){os << "VK_LOGIC_OP_OR_REVERSE, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_COPY_INVERTED){os << "VK_LOGIC_OP_COPY_INVERTED, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_OR_INVERTED){os << "VK_LOGIC_OP_OR_INVERTED, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_NAND){os << "VK_LOGIC_OP_NAND, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_SET){os << "VK_LOGIC_OP_SET, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_AND_REVERSE){os << "VK_LOGIC_OP_AND_REVERSE, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_MAX_ENUM){os << "VK_LOGIC_OP_MAX_ENUM, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_COPY){os << "VK_LOGIC_OP_COPY, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_AND_INVERTED){os << "VK_LOGIC_OP_AND_INVERTED, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_NO_OP){os << "VK_LOGIC_OP_NO_OP, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_XOR){os << "VK_LOGIC_OP_XOR, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_OR){os << "VK_LOGIC_OP_OR, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_NOR){os << "VK_LOGIC_OP_NOR, "; }
   
       if(src == VkLogicOp::VK_LOGIC_OP_EQUIVALENT){os << "VK_LOGIC_OP_EQUIVALENT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkMemoryAllocateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT){os << "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT, "; }
   
       if(src == VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR){os << "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR, "; }
   
       if(src == VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT){os << "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT, "; }
   
       if(src == VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR){os << "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR, "; }
   
       if(src == VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM){os << "VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT){os << "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, "; }
   
       if(src == VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR){os << "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkMemoryHeapFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkMemoryHeapFlagBits::VK_MEMORY_HEAP_DEVICE_LOCAL_BIT){os << "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT, "; }
   
       if(src == VkMemoryHeapFlagBits::VK_MEMORY_HEAP_MULTI_INSTANCE_BIT){os << "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT, "; }
   
       if(src == VkMemoryHeapFlagBits::VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR){os << "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR, "; }
   
       if(src == VkMemoryHeapFlagBits::VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM){os << "VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkMemoryOverallocationBehaviorAMD const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD){os << "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD, "; }
   
       if(src == VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD){os << "VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD, "; }
   
       if(src == VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD){os << "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD, "; }
   
       if(src == VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD){os << "VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkMemoryPropertyFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT){os << "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD){os << "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT){os << "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT){os << "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM){os << "VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV){os << "VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_PROTECTED_BIT){os << "VK_MEMORY_PROPERTY_PROTECTED_BIT, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT){os << "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD){os << "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD, "; }
   
       if(src == VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_CACHED_BIT){os << "VK_MEMORY_PROPERTY_HOST_CACHED_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkMicromapCreateFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkMicromapCreateFlagBitsEXT::VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT){os << "VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT, "; }
   
       if(src == VkMicromapCreateFlagBitsEXT::VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT){os << "VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkMicromapTypeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkMicromapTypeEXT::VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT){os << "VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT, "; }
   
       if(src == VkMicromapTypeEXT::VK_MICROMAP_TYPE_MAX_ENUM_EXT){os << "VK_MICROMAP_TYPE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkObjectType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkObjectType::VK_OBJECT_TYPE_UNKNOWN){os << "VK_OBJECT_TYPE_UNKNOWN, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_INSTANCE){os << "VK_OBJECT_TYPE_INSTANCE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_IMAGE){os << "VK_OBJECT_TYPE_IMAGE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_SURFACE_KHR){os << "VK_OBJECT_TYPE_SURFACE_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_SWAPCHAIN_KHR){os << "VK_OBJECT_TYPE_SWAPCHAIN_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DISPLAY_KHR){os << "VK_OBJECT_TYPE_DISPLAY_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DISPLAY_MODE_KHR){os << "VK_OBJECT_TYPE_DISPLAY_MODE_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT){os << "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_VIDEO_SESSION_KHR){os << "VK_OBJECT_TYPE_VIDEO_SESSION_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR){os << "VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_CU_MODULE_NVX){os << "VK_OBJECT_TYPE_CU_MODULE_NVX, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_CU_FUNCTION_NVX){os << "VK_OBJECT_TYPE_CU_FUNCTION_NVX, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE){os << "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR){os << "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT){os << "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR){os << "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION){os << "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR){os << "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_VALIDATION_CACHE_EXT){os << "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV){os << "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL){os << "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR){os << "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV){os << "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_PRIVATE_DATA_SLOT){os << "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT){os << "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA){os << "VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_MICROMAP_EXT){os << "VK_OBJECT_TYPE_MICROMAP_EXT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV){os << "VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_EVENT){os << "VK_OBJECT_TYPE_EVENT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_QUERY_POOL){os << "VK_OBJECT_TYPE_QUERY_POOL, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_BUFFER_VIEW){os << "VK_OBJECT_TYPE_BUFFER_VIEW, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_IMAGE_VIEW){os << "VK_OBJECT_TYPE_IMAGE_VIEW, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_SHADER_MODULE){os << "VK_OBJECT_TYPE_SHADER_MODULE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_PIPELINE_CACHE){os << "VK_OBJECT_TYPE_PIPELINE_CACHE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_PIPELINE_LAYOUT){os << "VK_OBJECT_TYPE_PIPELINE_LAYOUT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_RENDER_PASS){os << "VK_OBJECT_TYPE_RENDER_PASS, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_PIPELINE){os << "VK_OBJECT_TYPE_PIPELINE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_PHYSICAL_DEVICE){os << "VK_OBJECT_TYPE_PHYSICAL_DEVICE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT){os << "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_SAMPLER){os << "VK_OBJECT_TYPE_SAMPLER, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_MAX_ENUM){os << "VK_OBJECT_TYPE_MAX_ENUM, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_POOL){os << "VK_OBJECT_TYPE_DESCRIPTOR_POOL, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_SET){os << "VK_OBJECT_TYPE_DESCRIPTOR_SET, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_FRAMEBUFFER){os << "VK_OBJECT_TYPE_FRAMEBUFFER, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_COMMAND_POOL){os << "VK_OBJECT_TYPE_COMMAND_POOL, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DEVICE){os << "VK_OBJECT_TYPE_DEVICE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_QUEUE){os << "VK_OBJECT_TYPE_QUEUE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_SEMAPHORE){os << "VK_OBJECT_TYPE_SEMAPHORE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_COMMAND_BUFFER){os << "VK_OBJECT_TYPE_COMMAND_BUFFER, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_FENCE){os << "VK_OBJECT_TYPE_FENCE, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_DEVICE_MEMORY){os << "VK_OBJECT_TYPE_DEVICE_MEMORY, "; }
   
       if(src == VkObjectType::VK_OBJECT_TYPE_BUFFER){os << "VK_OBJECT_TYPE_BUFFER, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkOpacityMicromapFormatEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkOpacityMicromapFormatEXT::VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT){os << "VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT, "; }
   
       if(src == VkOpacityMicromapFormatEXT::VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT){os << "VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT, "; }
   
       if(src == VkOpacityMicromapFormatEXT::VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT){os << "VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkOpacityMicromapSpecialIndexEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkOpacityMicromapSpecialIndexEXT::VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT){os << "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT, "; }
   
       if(src == VkOpacityMicromapSpecialIndexEXT::VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT){os << "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT, "; }
   
       if(src == VkOpacityMicromapSpecialIndexEXT::VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT){os << "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT, "; }
   
       if(src == VkOpacityMicromapSpecialIndexEXT::VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT){os << "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT, "; }
   
       if(src == VkOpacityMicromapSpecialIndexEXT::VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT){os << "VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkOpticalFlowExecuteFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkOpticalFlowExecuteFlagBitsNV::VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV){os << "VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV, "; }
   
       if(src == VkOpticalFlowExecuteFlagBitsNV::VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV){os << "VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkOpticalFlowGridSizeFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkOpticalFlowGridSizeFlagBitsNV::VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV){os << "VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV, "; }
   
       if(src == VkOpticalFlowGridSizeFlagBitsNV::VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV){os << "VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV, "; }
   
       if(src == VkOpticalFlowGridSizeFlagBitsNV::VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV){os << "VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV, "; }
   
       if(src == VkOpticalFlowGridSizeFlagBitsNV::VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV){os << "VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV, "; }
   
       if(src == VkOpticalFlowGridSizeFlagBitsNV::VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV){os << "VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV, "; }
   
       if(src == VkOpticalFlowGridSizeFlagBitsNV::VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV){os << "VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkOpticalFlowPerformanceLevelNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkOpticalFlowPerformanceLevelNV::VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV){os << "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV, "; }
   
       if(src == VkOpticalFlowPerformanceLevelNV::VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV){os << "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV, "; }
   
       if(src == VkOpticalFlowPerformanceLevelNV::VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV){os << "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV, "; }
   
       if(src == VkOpticalFlowPerformanceLevelNV::VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV){os << "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV, "; }
   
       if(src == VkOpticalFlowPerformanceLevelNV::VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV){os << "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkOpticalFlowSessionBindingPointNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV, "; }
   
       if(src == VkOpticalFlowSessionBindingPointNV::VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV){os << "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkOpticalFlowSessionCreateFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkOpticalFlowSessionCreateFlagBitsNV::VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV){os << "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV, "; }
   
       if(src == VkOpticalFlowSessionCreateFlagBitsNV::VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV){os << "VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV, "; }
   
       if(src == VkOpticalFlowSessionCreateFlagBitsNV::VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV){os << "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV, "; }
   
       if(src == VkOpticalFlowSessionCreateFlagBitsNV::VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV){os << "VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV, "; }
   
       if(src == VkOpticalFlowSessionCreateFlagBitsNV::VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV){os << "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV, "; }
   
       if(src == VkOpticalFlowSessionCreateFlagBitsNV::VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV){os << "VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkOpticalFlowUsageFlagBitsNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkOpticalFlowUsageFlagBitsNV::VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV){os << "VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV, "; }
   
       if(src == VkOpticalFlowUsageFlagBitsNV::VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV){os << "VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV, "; }
   
       if(src == VkOpticalFlowUsageFlagBitsNV::VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV){os << "VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV, "; }
   
       if(src == VkOpticalFlowUsageFlagBitsNV::VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV){os << "VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV, "; }
   
       if(src == VkOpticalFlowUsageFlagBitsNV::VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV){os << "VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV, "; }
   
       if(src == VkOpticalFlowUsageFlagBitsNV::VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV){os << "VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV, "; }
   
       if(src == VkOpticalFlowUsageFlagBitsNV::VK_OPTICAL_FLOW_USAGE_COST_BIT_NV){os << "VK_OPTICAL_FLOW_USAGE_COST_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPeerMemoryFeatureFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT){os << "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT, "; }
   
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR){os << "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR, "; }
   
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_DST_BIT){os << "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT, "; }
   
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR){os << "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR, "; }
   
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM){os << "VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT){os << "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT, "; }
   
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR){os << "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR, "; }
   
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT){os << "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT, "; }
   
       if(src == VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR){os << "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPerformanceConfigurationTypeINTEL const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPerformanceConfigurationTypeINTEL::VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL){os << "VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL, "; }
   
       if(src == VkPerformanceConfigurationTypeINTEL::VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL){os << "VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPerformanceCounterDescriptionFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR){os << "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR, "; }
   
       if(src == VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR){os << "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR, "; }
   
       if(src == VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR){os << "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR, "; }
   
       if(src == VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR){os << "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR, "; }
   
       if(src == VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR){os << "VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPerformanceCounterScopeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR){os << "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR, "; }
   
       if(src == VkPerformanceCounterScopeKHR::VK_QUERY_SCOPE_COMMAND_BUFFER_KHR){os << "VK_QUERY_SCOPE_COMMAND_BUFFER_KHR, "; }
   
       if(src == VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR){os << "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR, "; }
   
       if(src == VkPerformanceCounterScopeKHR::VK_QUERY_SCOPE_RENDER_PASS_KHR){os << "VK_QUERY_SCOPE_RENDER_PASS_KHR, "; }
   
       if(src == VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR){os << "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR, "; }
   
       if(src == VkPerformanceCounterScopeKHR::VK_QUERY_SCOPE_COMMAND_KHR){os << "VK_QUERY_SCOPE_COMMAND_KHR, "; }
   
       if(src == VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR){os << "VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPerformanceCounterStorageKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR){os << "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR, "; }
   
       if(src == VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR){os << "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR, "; }
   
       if(src == VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR){os << "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR, "; }
   
       if(src == VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR){os << "VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR, "; }
   
       if(src == VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR){os << "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR, "; }
   
       if(src == VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR){os << "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR, "; }
   
       if(src == VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR){os << "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPerformanceCounterUnitKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR, "; }
   
       if(src == VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR){os << "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPerformanceOverrideTypeINTEL const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPerformanceOverrideTypeINTEL::VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL){os << "VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL, "; }
   
       if(src == VkPerformanceOverrideTypeINTEL::VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL){os << "VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL, "; }
   
       if(src == VkPerformanceOverrideTypeINTEL::VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL){os << "VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPerformanceParameterTypeINTEL const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPerformanceParameterTypeINTEL::VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL){os << "VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL, "; }
   
       if(src == VkPerformanceParameterTypeINTEL::VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL){os << "VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL, "; }
   
       if(src == VkPerformanceParameterTypeINTEL::VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL){os << "VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPerformanceValueTypeINTEL const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL){os << "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL, "; }
   
       if(src == VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL){os << "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL, "; }
   
       if(src == VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL){os << "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL, "; }
   
       if(src == VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL){os << "VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL, "; }
   
       if(src == VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL){os << "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL, "; }
   
       if(src == VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL){os << "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPhysicalDeviceType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_OTHER){os << "VK_PHYSICAL_DEVICE_TYPE_OTHER, "; }
   
       if(src == VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU){os << "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU, "; }
   
       if(src == VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU){os << "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU, "; }
   
       if(src == VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM){os << "VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM, "; }
   
       if(src == VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU){os << "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU, "; }
   
       if(src == VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_CPU){os << "VK_PHYSICAL_DEVICE_TYPE_CPU, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineBindPoint const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS){os << "VK_PIPELINE_BIND_POINT_GRAPHICS, "; }
   
       if(src == VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_COMPUTE){os << "VK_PIPELINE_BIND_POINT_COMPUTE, "; }
   
       if(src == VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR){os << "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR, "; }
   
       if(src == VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_RAY_TRACING_NV){os << "VK_PIPELINE_BIND_POINT_RAY_TRACING_NV, "; }
   
       if(src == VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI){os << "VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI, "; }
   
       if(src == VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_MAX_ENUM){os << "VK_PIPELINE_BIND_POINT_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineCacheCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineCacheCreateFlagBits::VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT){os << "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT, "; }
   
       if(src == VkPipelineCacheCreateFlagBits::VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT){os << "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT, "; }
   
       if(src == VkPipelineCacheCreateFlagBits::VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineCacheHeaderVersion const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineCacheHeaderVersion::VK_PIPELINE_CACHE_HEADER_VERSION_ONE){os << "VK_PIPELINE_CACHE_HEADER_VERSION_ONE, "; }
   
       if(src == VkPipelineCacheHeaderVersion::VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM){os << "VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineColorBlendStateCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineColorBlendStateCreateFlagBits::VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM){os << "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM, "; }
   
       if(src == VkPipelineColorBlendStateCreateFlagBits::VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT){os << "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT, "; }
   
       if(src == VkPipelineColorBlendStateCreateFlagBits::VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineCompilerControlFlagBitsAMD const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineCompilerControlFlagBitsAMD::VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD){os << "VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT){os << "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT){os << "VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV){os << "VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT){os << "VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR){os << "VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR){os << "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT){os << "VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE){os << "VK_PIPELINE_CREATE_DISPATCH_BASE, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE_BIT){os << "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE_KHR){os << "VK_PIPELINE_CREATE_DISPATCH_BASE_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR){os << "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT){os << "VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT){os << "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_LIBRARY_BIT_KHR){os << "VK_PIPELINE_CREATE_LIBRARY_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR){os << "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR){os << "VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT){os << "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT){os << "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV){os << "VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV){os << "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR){os << "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT){os << "VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DERIVATIVE_BIT){os << "VK_PIPELINE_CREATE_DERIVATIVE_BIT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR){os << "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT){os << "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT){os << "VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT){os << "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT){os << "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR){os << "VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT){os << "VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR){os << "VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR){os << "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT){os << "VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT){os << "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR){os << "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR){os << "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR, "; }
   
       if(src == VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT){os << "VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineCreationFeedbackFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineCreationFeedbackFlagBits::VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT){os << "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT, "; }
   
       if(src == VkPipelineCreationFeedbackFlagBits::VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT){os << "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT, "; }
   
       if(src == VkPipelineCreationFeedbackFlagBits::VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT){os << "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT, "; }
   
       if(src == VkPipelineCreationFeedbackFlagBits::VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT){os << "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT, "; }
   
       if(src == VkPipelineCreationFeedbackFlagBits::VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM){os << "VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkPipelineCreationFeedbackFlagBits::VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT){os << "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT, "; }
   
       if(src == VkPipelineCreationFeedbackFlagBits::VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT){os << "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineDepthStencilStateCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineDepthStencilStateCreateFlagBits::VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM){os << "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM, "; }
   
       if(src == VkPipelineDepthStencilStateCreateFlagBits::VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT){os << "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT, "; }
   
       if(src == VkPipelineDepthStencilStateCreateFlagBits::VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM){os << "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM, "; }
   
       if(src == VkPipelineDepthStencilStateCreateFlagBits::VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT){os << "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT, "; }
   
       if(src == VkPipelineDepthStencilStateCreateFlagBits::VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineExecutableStatisticFormatKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR){os << "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR, "; }
   
       if(src == VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR){os << "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR, "; }
   
       if(src == VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR){os << "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR, "; }
   
       if(src == VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR){os << "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR, "; }
   
       if(src == VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR){os << "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineLayoutCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineLayoutCreateFlagBits::VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT){os << "VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT, "; }
   
       if(src == VkPipelineLayoutCreateFlagBits::VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineRobustnessBufferBehaviorEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineRobustnessBufferBehaviorEXT::VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT){os << "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT, "; }
   
       if(src == VkPipelineRobustnessBufferBehaviorEXT::VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT){os << "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT, "; }
   
       if(src == VkPipelineRobustnessBufferBehaviorEXT::VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT){os << "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT, "; }
   
       if(src == VkPipelineRobustnessBufferBehaviorEXT::VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT){os << "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT, "; }
   
       if(src == VkPipelineRobustnessBufferBehaviorEXT::VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT){os << "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineRobustnessImageBehaviorEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineRobustnessImageBehaviorEXT::VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT){os << "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT, "; }
   
       if(src == VkPipelineRobustnessImageBehaviorEXT::VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT){os << "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT, "; }
   
       if(src == VkPipelineRobustnessImageBehaviorEXT::VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT){os << "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT, "; }
   
       if(src == VkPipelineRobustnessImageBehaviorEXT::VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT){os << "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT, "; }
   
       if(src == VkPipelineRobustnessImageBehaviorEXT::VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT){os << "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineShaderStageCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT){os << "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT, "; }
   
       if(src == VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT){os << "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT, "; }
   
       if(src == VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT){os << "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT, "; }
   
       if(src == VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT){os << "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT, "; }
   
       if(src == VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPipelineStageFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_NONE){os << "VK_PIPELINE_STAGE_NONE, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_NONE_KHR){os << "VK_PIPELINE_STAGE_NONE_KHR, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT){os << "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT){os << "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT){os << "VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV){os << "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT){os << "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV){os << "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT){os << "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_HOST_BIT){os << "VK_PIPELINE_STAGE_HOST_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT){os << "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT){os << "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT){os << "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR){os << "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV){os << "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM){os << "VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT){os << "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT){os << "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT){os << "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT){os << "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR){os << "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV){os << "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_VERTEX_INPUT_BIT){os << "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFER_BIT){os << "VK_PIPELINE_STAGE_TRANSFER_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR){os << "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV){os << "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT){os << "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT){os << "VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV){os << "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT){os << "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ALL_COMMANDS_BIT){os << "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_VERTEX_SHADER_BIT){os << "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT){os << "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, "; }
   
       if(src == VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT){os << "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPointClippingBehavior const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES){os << "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES, "; }
   
       if(src == VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR){os << "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR, "; }
   
       if(src == VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY){os << "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY, "; }
   
       if(src == VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR){os << "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR, "; }
   
       if(src == VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM){os << "VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPolygonMode const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPolygonMode::VK_POLYGON_MODE_FILL){os << "VK_POLYGON_MODE_FILL, "; }
   
       if(src == VkPolygonMode::VK_POLYGON_MODE_LINE){os << "VK_POLYGON_MODE_LINE, "; }
   
       if(src == VkPolygonMode::VK_POLYGON_MODE_FILL_RECTANGLE_NV){os << "VK_POLYGON_MODE_FILL_RECTANGLE_NV, "; }
   
       if(src == VkPolygonMode::VK_POLYGON_MODE_POINT){os << "VK_POLYGON_MODE_POINT, "; }
   
       if(src == VkPolygonMode::VK_POLYGON_MODE_MAX_ENUM){os << "VK_POLYGON_MODE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPresentGravityFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPresentGravityFlagBitsEXT::VK_PRESENT_GRAVITY_MIN_BIT_EXT){os << "VK_PRESENT_GRAVITY_MIN_BIT_EXT, "; }
   
       if(src == VkPresentGravityFlagBitsEXT::VK_PRESENT_GRAVITY_MAX_BIT_EXT){os << "VK_PRESENT_GRAVITY_MAX_BIT_EXT, "; }
   
       if(src == VkPresentGravityFlagBitsEXT::VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT){os << "VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkPresentGravityFlagBitsEXT::VK_PRESENT_GRAVITY_CENTERED_BIT_EXT){os << "VK_PRESENT_GRAVITY_CENTERED_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPresentModeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPresentModeKHR::VK_PRESENT_MODE_IMMEDIATE_KHR){os << "VK_PRESENT_MODE_IMMEDIATE_KHR, "; }
   
       if(src == VkPresentModeKHR::VK_PRESENT_MODE_MAILBOX_KHR){os << "VK_PRESENT_MODE_MAILBOX_KHR, "; }
   
       if(src == VkPresentModeKHR::VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR){os << "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR, "; }
   
       if(src == VkPresentModeKHR::VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR){os << "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR, "; }
   
       if(src == VkPresentModeKHR::VK_PRESENT_MODE_FIFO_KHR){os << "VK_PRESENT_MODE_FIFO_KHR, "; }
   
       if(src == VkPresentModeKHR::VK_PRESENT_MODE_MAX_ENUM_KHR){os << "VK_PRESENT_MODE_MAX_ENUM_KHR, "; }
   
       if(src == VkPresentModeKHR::VK_PRESENT_MODE_FIFO_RELAXED_KHR){os << "VK_PRESENT_MODE_FIFO_RELAXED_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPresentScalingFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPresentScalingFlagBitsEXT::VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT){os << "VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT, "; }
   
       if(src == VkPresentScalingFlagBitsEXT::VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT){os << "VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT, "; }
   
       if(src == VkPresentScalingFlagBitsEXT::VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT){os << "VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       if(src == VkPresentScalingFlagBitsEXT::VK_PRESENT_SCALING_STRETCH_BIT_EXT){os << "VK_PRESENT_SCALING_STRETCH_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkPrimitiveTopology const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_POINT_LIST){os << "VK_PRIMITIVE_TOPOLOGY_POINT_LIST, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_LIST){os << "VK_PRIMITIVE_TOPOLOGY_LINE_LIST, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_PATCH_LIST){os << "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_STRIP){os << "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_MAX_ENUM){os << "VK_PRIMITIVE_TOPOLOGY_MAX_ENUM, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST){os << "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP){os << "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN){os << "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY){os << "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY){os << "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY){os << "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY, "; }
   
       if(src == VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY){os << "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkProvokingVertexModeEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkProvokingVertexModeEXT::VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT){os << "VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT, "; }
   
       if(src == VkProvokingVertexModeEXT::VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT){os << "VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT, "; }
   
       if(src == VkProvokingVertexModeEXT::VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT){os << "VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkQueryControlFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkQueryControlFlagBits::VK_QUERY_CONTROL_PRECISE_BIT){os << "VK_QUERY_CONTROL_PRECISE_BIT, "; }
   
       if(src == VkQueryControlFlagBits::VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM){os << "VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkQueryPipelineStatisticFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT){os << "VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM){os << "VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT){os << "VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT){os << "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT, "; }
   
       if(src == VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI){os << "VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkQueryPoolSamplingModeINTEL const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkQueryPoolSamplingModeINTEL::VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL){os << "VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL, "; }
   
       if(src == VkQueryPoolSamplingModeINTEL::VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL){os << "VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkQueryResultFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkQueryResultFlagBits::VK_QUERY_RESULT_64_BIT){os << "VK_QUERY_RESULT_64_BIT, "; }
   
       if(src == VkQueryResultFlagBits::VK_QUERY_RESULT_WITH_STATUS_BIT_KHR){os << "VK_QUERY_RESULT_WITH_STATUS_BIT_KHR, "; }
   
       if(src == VkQueryResultFlagBits::VK_QUERY_RESULT_WAIT_BIT){os << "VK_QUERY_RESULT_WAIT_BIT, "; }
   
       if(src == VkQueryResultFlagBits::VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM){os << "VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkQueryResultFlagBits::VK_QUERY_RESULT_WITH_AVAILABILITY_BIT){os << "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT, "; }
   
       if(src == VkQueryResultFlagBits::VK_QUERY_RESULT_PARTIAL_BIT){os << "VK_QUERY_RESULT_PARTIAL_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkQueryResultStatusKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkQueryResultStatusKHR::VK_QUERY_RESULT_STATUS_ERROR_KHR){os << "VK_QUERY_RESULT_STATUS_ERROR_KHR, "; }
   
       if(src == VkQueryResultStatusKHR::VK_QUERY_RESULT_STATUS_NOT_READY_KHR){os << "VK_QUERY_RESULT_STATUS_NOT_READY_KHR, "; }
   
       if(src == VkQueryResultStatusKHR::VK_QUERY_RESULT_STATUS_COMPLETE_KHR){os << "VK_QUERY_RESULT_STATUS_COMPLETE_KHR, "; }
   
       if(src == VkQueryResultStatusKHR::VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR){os << "VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkQueryType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkQueryType::VK_QUERY_TYPE_OCCLUSION){os << "VK_QUERY_TYPE_OCCLUSION, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_PIPELINE_STATISTICS){os << "VK_QUERY_TYPE_PIPELINE_STATISTICS, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR){os << "VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT){os << "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR){os << "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR){os << "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR){os << "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV){os << "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL){os << "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR){os << "VK_QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT){os << "VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT){os << "VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR){os << "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR){os << "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT){os << "VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT){os << "VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_TIMESTAMP){os << "VK_QUERY_TYPE_TIMESTAMP, "; }
   
       if(src == VkQueryType::VK_QUERY_TYPE_MAX_ENUM){os << "VK_QUERY_TYPE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkQueueFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkQueueFlagBits::VK_QUEUE_GRAPHICS_BIT){os << "VK_QUEUE_GRAPHICS_BIT, "; }
   
       if(src == VkQueueFlagBits::VK_QUEUE_PROTECTED_BIT){os << "VK_QUEUE_PROTECTED_BIT, "; }
   
       if(src == VkQueueFlagBits::VK_QUEUE_COMPUTE_BIT){os << "VK_QUEUE_COMPUTE_BIT, "; }
   
       if(src == VkQueueFlagBits::VK_QUEUE_FLAG_BITS_MAX_ENUM){os << "VK_QUEUE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkQueueFlagBits::VK_QUEUE_OPTICAL_FLOW_BIT_NV){os << "VK_QUEUE_OPTICAL_FLOW_BIT_NV, "; }
   
       if(src == VkQueueFlagBits::VK_QUEUE_VIDEO_DECODE_BIT_KHR){os << "VK_QUEUE_VIDEO_DECODE_BIT_KHR, "; }
   
       if(src == VkQueueFlagBits::VK_QUEUE_TRANSFER_BIT){os << "VK_QUEUE_TRANSFER_BIT, "; }
   
       if(src == VkQueueFlagBits::VK_QUEUE_VIDEO_ENCODE_BIT_KHR){os << "VK_QUEUE_VIDEO_ENCODE_BIT_KHR, "; }
   
       if(src == VkQueueFlagBits::VK_QUEUE_SPARSE_BINDING_BIT){os << "VK_QUEUE_SPARSE_BINDING_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkQueueGlobalPriorityKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT){os << "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT, "; }
   
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR){os << "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR, "; }
   
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT){os << "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT, "; }
   
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR){os << "VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR, "; }
   
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR){os << "VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR, "; }
   
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT){os << "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT, "; }
   
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR){os << "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR, "; }
   
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT){os << "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT, "; }
   
       if(src == VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR){os << "VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkRasterizationOrderAMD const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkRasterizationOrderAMD::VK_RASTERIZATION_ORDER_STRICT_AMD){os << "VK_RASTERIZATION_ORDER_STRICT_AMD, "; }
   
       if(src == VkRasterizationOrderAMD::VK_RASTERIZATION_ORDER_RELAXED_AMD){os << "VK_RASTERIZATION_ORDER_RELAXED_AMD, "; }
   
       if(src == VkRasterizationOrderAMD::VK_RASTERIZATION_ORDER_MAX_ENUM_AMD){os << "VK_RASTERIZATION_ORDER_MAX_ENUM_AMD, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkRayTracingInvocationReorderModeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkRayTracingInvocationReorderModeNV::VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV){os << "VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV, "; }
   
       if(src == VkRayTracingInvocationReorderModeNV::VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV){os << "VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV, "; }
   
       if(src == VkRayTracingInvocationReorderModeNV::VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV){os << "VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkRayTracingShaderGroupTypeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR){os << "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR, "; }
   
       if(src == VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV){os << "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV, "; }
   
       if(src == VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR){os << "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR, "; }
   
       if(src == VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV){os << "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV, "; }
   
       if(src == VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR){os << "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR, "; }
   
       if(src == VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV){os << "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV, "; }
   
       if(src == VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR){os << "VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkRenderPassCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkRenderPassCreateFlagBits::VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM){os << "VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM, "; }
   
       if(src == VkRenderPassCreateFlagBits::VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkRenderingFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkRenderingFlagBits::VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT){os << "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT, "; }
   
       if(src == VkRenderingFlagBits::VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR){os << "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR, "; }
   
       if(src == VkRenderingFlagBits::VK_RENDERING_SUSPENDING_BIT){os << "VK_RENDERING_SUSPENDING_BIT, "; }
   
       if(src == VkRenderingFlagBits::VK_RENDERING_SUSPENDING_BIT_KHR){os << "VK_RENDERING_SUSPENDING_BIT_KHR, "; }
   
       if(src == VkRenderingFlagBits::VK_RENDERING_FLAG_BITS_MAX_ENUM){os << "VK_RENDERING_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkRenderingFlagBits::VK_RENDERING_RESUMING_BIT){os << "VK_RENDERING_RESUMING_BIT, "; }
   
       if(src == VkRenderingFlagBits::VK_RENDERING_RESUMING_BIT_KHR){os << "VK_RENDERING_RESUMING_BIT_KHR, "; }
   
       if(src == VkRenderingFlagBits::VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT){os << "VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkResolveModeFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_NONE){os << "VK_RESOLVE_MODE_NONE, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_NONE_KHR){os << "VK_RESOLVE_MODE_NONE_KHR, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_SAMPLE_ZERO_BIT){os << "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR){os << "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_AVERAGE_BIT){os << "VK_RESOLVE_MODE_AVERAGE_BIT, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_AVERAGE_BIT_KHR){os << "VK_RESOLVE_MODE_AVERAGE_BIT_KHR, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM){os << "VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_MIN_BIT){os << "VK_RESOLVE_MODE_MIN_BIT, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_MIN_BIT_KHR){os << "VK_RESOLVE_MODE_MIN_BIT_KHR, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_MAX_BIT){os << "VK_RESOLVE_MODE_MAX_BIT, "; }
   
       if(src == VkResolveModeFlagBits::VK_RESOLVE_MODE_MAX_BIT_KHR){os << "VK_RESOLVE_MODE_MAX_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkResult const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkResult::VK_ERROR_OUT_OF_HOST_MEMORY){os << "VK_ERROR_OUT_OF_HOST_MEMORY, "; }
   
       if(src == VkResult::VK_ERROR_TOO_MANY_OBJECTS){os << "VK_ERROR_TOO_MANY_OBJECTS, "; }
   
       if(src == VkResult::VK_ERROR_SURFACE_LOST_KHR){os << "VK_ERROR_SURFACE_LOST_KHR, "; }
   
       if(src == VkResult::VK_ERROR_NATIVE_WINDOW_IN_USE_KHR){os << "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR, "; }
   
       if(src == VkResult::VK_ERROR_OUT_OF_DATE_KHR){os << "VK_ERROR_OUT_OF_DATE_KHR, "; }
   
       if(src == VkResult::VK_ERROR_INCOMPATIBLE_DISPLAY_KHR){os << "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR, "; }
   
       if(src == VkResult::VK_ERROR_VALIDATION_FAILED_EXT){os << "VK_ERROR_VALIDATION_FAILED_EXT, "; }
   
       if(src == VkResult::VK_ERROR_INVALID_SHADER_NV){os << "VK_ERROR_INVALID_SHADER_NV, "; }
   
       if(src == VkResult::VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR){os << "VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR, "; }
   
       if(src == VkResult::VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR){os << "VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR, "; }
   
       if(src == VkResult::VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR){os << "VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR, "; }
   
       if(src == VkResult::VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR){os << "VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR, "; }
   
       if(src == VkResult::VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR){os << "VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR, "; }
   
       if(src == VkResult::VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR){os << "VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR, "; }
   
       if(src == VkResult::VK_ERROR_OUT_OF_POOL_MEMORY){os << "VK_ERROR_OUT_OF_POOL_MEMORY, "; }
   
       if(src == VkResult::VK_ERROR_OUT_OF_POOL_MEMORY_KHR){os << "VK_ERROR_OUT_OF_POOL_MEMORY_KHR, "; }
   
       if(src == VkResult::VK_ERROR_INVALID_EXTERNAL_HANDLE){os << "VK_ERROR_INVALID_EXTERNAL_HANDLE, "; }
   
       if(src == VkResult::VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR){os << "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR, "; }
   
       if(src == VkResult::VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT){os << "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, "; }
   
       if(src == VkResult::VK_ERROR_FRAGMENTATION){os << "VK_ERROR_FRAGMENTATION, "; }
   
       if(src == VkResult::VK_ERROR_FRAGMENTATION_EXT){os << "VK_ERROR_FRAGMENTATION_EXT, "; }
   
       if(src == VkResult::VK_ERROR_NOT_PERMITTED_EXT){os << "VK_ERROR_NOT_PERMITTED_EXT, "; }
   
       if(src == VkResult::VK_ERROR_NOT_PERMITTED_KHR){os << "VK_ERROR_NOT_PERMITTED_KHR, "; }
   
       if(src == VkResult::VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT){os << "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, "; }
   
       if(src == VkResult::VK_ERROR_INVALID_DEVICE_ADDRESS_EXT){os << "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT, "; }
   
       if(src == VkResult::VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS){os << "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS, "; }
   
       if(src == VkResult::VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR){os << "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR, "; }
   
       if(src == VkResult::VK_ERROR_COMPRESSION_EXHAUSTED_EXT){os << "VK_ERROR_COMPRESSION_EXHAUSTED_EXT, "; }
   
       if(src == VkResult::VK_ERROR_FORMAT_NOT_SUPPORTED){os << "VK_ERROR_FORMAT_NOT_SUPPORTED, "; }
   
       if(src == VkResult::VK_ERROR_FRAGMENTED_POOL){os << "VK_ERROR_FRAGMENTED_POOL, "; }
   
       if(src == VkResult::VK_ERROR_UNKNOWN){os << "VK_ERROR_UNKNOWN, "; }
   
       if(src == VkResult::VK_ERROR_OUT_OF_DEVICE_MEMORY){os << "VK_ERROR_OUT_OF_DEVICE_MEMORY, "; }
   
       if(src == VkResult::VK_ERROR_INITIALIZATION_FAILED){os << "VK_ERROR_INITIALIZATION_FAILED, "; }
   
       if(src == VkResult::VK_ERROR_DEVICE_LOST){os << "VK_ERROR_DEVICE_LOST, "; }
   
       if(src == VkResult::VK_ERROR_MEMORY_MAP_FAILED){os << "VK_ERROR_MEMORY_MAP_FAILED, "; }
   
       if(src == VkResult::VK_ERROR_LAYER_NOT_PRESENT){os << "VK_ERROR_LAYER_NOT_PRESENT, "; }
   
       if(src == VkResult::VK_ERROR_EXTENSION_NOT_PRESENT){os << "VK_ERROR_EXTENSION_NOT_PRESENT, "; }
   
       if(src == VkResult::VK_ERROR_FEATURE_NOT_PRESENT){os << "VK_ERROR_FEATURE_NOT_PRESENT, "; }
   
       if(src == VkResult::VK_ERROR_INCOMPATIBLE_DRIVER){os << "VK_ERROR_INCOMPATIBLE_DRIVER, "; }
   
       if(src == VkResult::VK_SUCCESS){os << "VK_SUCCESS, "; }
   
       if(src == VkResult::VK_NOT_READY){os << "VK_NOT_READY, "; }
   
       if(src == VkResult::VK_SUBOPTIMAL_KHR){os << "VK_SUBOPTIMAL_KHR, "; }
   
       if(src == VkResult::VK_THREAD_IDLE_KHR){os << "VK_THREAD_IDLE_KHR, "; }
   
       if(src == VkResult::VK_THREAD_DONE_KHR){os << "VK_THREAD_DONE_KHR, "; }
   
       if(src == VkResult::VK_OPERATION_DEFERRED_KHR){os << "VK_OPERATION_DEFERRED_KHR, "; }
   
       if(src == VkResult::VK_OPERATION_NOT_DEFERRED_KHR){os << "VK_OPERATION_NOT_DEFERRED_KHR, "; }
   
       if(src == VkResult::VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT){os << "VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT, "; }
   
       if(src == VkResult::VK_PIPELINE_COMPILE_REQUIRED){os << "VK_PIPELINE_COMPILE_REQUIRED, "; }
   
       if(src == VkResult::VK_PIPELINE_COMPILE_REQUIRED_EXT){os << "VK_PIPELINE_COMPILE_REQUIRED_EXT, "; }
   
       if(src == VkResult::VK_TIMEOUT){os << "VK_TIMEOUT, "; }
   
       if(src == VkResult::VK_RESULT_MAX_ENUM){os << "VK_RESULT_MAX_ENUM, "; }
   
       if(src == VkResult::VK_EVENT_SET){os << "VK_EVENT_SET, "; }
   
       if(src == VkResult::VK_EVENT_RESET){os << "VK_EVENT_RESET, "; }
   
       if(src == VkResult::VK_INCOMPLETE){os << "VK_INCOMPLETE, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSampleCountFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT){os << "VK_SAMPLE_COUNT_1_BIT, "; }
   
       if(src == VkSampleCountFlagBits::VK_SAMPLE_COUNT_16_BIT){os << "VK_SAMPLE_COUNT_16_BIT, "; }
   
       if(src == VkSampleCountFlagBits::VK_SAMPLE_COUNT_2_BIT){os << "VK_SAMPLE_COUNT_2_BIT, "; }
   
       if(src == VkSampleCountFlagBits::VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM){os << "VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkSampleCountFlagBits::VK_SAMPLE_COUNT_32_BIT){os << "VK_SAMPLE_COUNT_32_BIT, "; }
   
       if(src == VkSampleCountFlagBits::VK_SAMPLE_COUNT_4_BIT){os << "VK_SAMPLE_COUNT_4_BIT, "; }
   
       if(src == VkSampleCountFlagBits::VK_SAMPLE_COUNT_64_BIT){os << "VK_SAMPLE_COUNT_64_BIT, "; }
   
       if(src == VkSampleCountFlagBits::VK_SAMPLE_COUNT_8_BIT){os << "VK_SAMPLE_COUNT_8_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSamplerAddressMode const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT){os << "VK_SAMPLER_ADDRESS_MODE_REPEAT, "; }
   
       if(src == VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT){os << "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT, "; }
   
       if(src == VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE){os << "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE, "; }
   
       if(src == VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MAX_ENUM){os << "VK_SAMPLER_ADDRESS_MODE_MAX_ENUM, "; }
   
       if(src == VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER){os << "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, "; }
   
       if(src == VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE){os << "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE, "; }
   
       if(src == VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR){os << "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSamplerCreateFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT){os << "VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT, "; }
   
       if(src == VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM){os << "VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM, "; }
   
       if(src == VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT){os << "VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT, "; }
   
       if(src == VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM){os << "VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT){os << "VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT, "; }
   
       if(src == VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT){os << "VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSamplerMipmapMode const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_NEAREST){os << "VK_SAMPLER_MIPMAP_MODE_NEAREST, "; }
   
       if(src == VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_LINEAR){os << "VK_SAMPLER_MIPMAP_MODE_LINEAR, "; }
   
       if(src == VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_MAX_ENUM){os << "VK_SAMPLER_MIPMAP_MODE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSamplerReductionMode const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE){os << "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE, "; }
   
       if(src == VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT){os << "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT, "; }
   
       if(src == VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MIN){os << "VK_SAMPLER_REDUCTION_MODE_MIN, "; }
   
       if(src == VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MIN_EXT){os << "VK_SAMPLER_REDUCTION_MODE_MIN_EXT, "; }
   
       if(src == VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MAX){os << "VK_SAMPLER_REDUCTION_MODE_MAX, "; }
   
       if(src == VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MAX_EXT){os << "VK_SAMPLER_REDUCTION_MODE_MAX_EXT, "; }
   
       if(src == VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MAX_ENUM){os << "VK_SAMPLER_REDUCTION_MODE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSamplerYcbcrModelConversion const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020, "; }
   
       if(src == VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR){os << "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSamplerYcbcrRange const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_FULL){os << "VK_SAMPLER_YCBCR_RANGE_ITU_FULL, "; }
   
       if(src == VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR){os << "VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR, "; }
   
       if(src == VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_NARROW){os << "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW, "; }
   
       if(src == VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR){os << "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR, "; }
   
       if(src == VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_MAX_ENUM){os << "VK_SAMPLER_YCBCR_RANGE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkScopeNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkScopeNV::VK_SCOPE_DEVICE_NV){os << "VK_SCOPE_DEVICE_NV, "; }
   
       if(src == VkScopeNV::VK_SCOPE_WORKGROUP_NV){os << "VK_SCOPE_WORKGROUP_NV, "; }
   
       if(src == VkScopeNV::VK_SCOPE_MAX_ENUM_NV){os << "VK_SCOPE_MAX_ENUM_NV, "; }
   
       if(src == VkScopeNV::VK_SCOPE_SUBGROUP_NV){os << "VK_SCOPE_SUBGROUP_NV, "; }
   
       if(src == VkScopeNV::VK_SCOPE_QUEUE_FAMILY_NV){os << "VK_SCOPE_QUEUE_FAMILY_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSemaphoreImportFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_TEMPORARY_BIT){os << "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT, "; }
   
       if(src == VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR){os << "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR, "; }
   
       if(src == VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM){os << "VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSemaphoreType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSemaphoreType::VK_SEMAPHORE_TYPE_BINARY){os << "VK_SEMAPHORE_TYPE_BINARY, "; }
   
       if(src == VkSemaphoreType::VK_SEMAPHORE_TYPE_BINARY_KHR){os << "VK_SEMAPHORE_TYPE_BINARY_KHR, "; }
   
       if(src == VkSemaphoreType::VK_SEMAPHORE_TYPE_TIMELINE){os << "VK_SEMAPHORE_TYPE_TIMELINE, "; }
   
       if(src == VkSemaphoreType::VK_SEMAPHORE_TYPE_TIMELINE_KHR){os << "VK_SEMAPHORE_TYPE_TIMELINE_KHR, "; }
   
       if(src == VkSemaphoreType::VK_SEMAPHORE_TYPE_MAX_ENUM){os << "VK_SEMAPHORE_TYPE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSemaphoreWaitFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_ANY_BIT){os << "VK_SEMAPHORE_WAIT_ANY_BIT, "; }
   
       if(src == VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_ANY_BIT_KHR){os << "VK_SEMAPHORE_WAIT_ANY_BIT_KHR, "; }
   
       if(src == VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM){os << "VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkShaderCorePropertiesFlagBitsAMD const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkShaderCorePropertiesFlagBitsAMD::VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD){os << "VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkShaderFloatControlsIndependence const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY){os << "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY, "; }
   
       if(src == VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR){os << "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR, "; }
   
       if(src == VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL){os << "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL, "; }
   
       if(src == VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR){os << "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR, "; }
   
       if(src == VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE){os << "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE, "; }
   
       if(src == VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR){os << "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR, "; }
   
       if(src == VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM){os << "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkShaderGroupShaderKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_GENERAL_KHR){os << "VK_SHADER_GROUP_SHADER_GENERAL_KHR, "; }
   
       if(src == VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR){os << "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR, "; }
   
       if(src == VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_ANY_HIT_KHR){os << "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR, "; }
   
       if(src == VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR){os << "VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR, "; }
   
       if(src == VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_INTERSECTION_KHR){os << "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkShaderInfoTypeAMD const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_STATISTICS_AMD){os << "VK_SHADER_INFO_TYPE_STATISTICS_AMD, "; }
   
       if(src == VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_BINARY_AMD){os << "VK_SHADER_INFO_TYPE_BINARY_AMD, "; }
   
       if(src == VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD){os << "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD, "; }
   
       if(src == VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_MAX_ENUM_AMD){os << "VK_SHADER_INFO_TYPE_MAX_ENUM_AMD, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkShaderStageFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_ALL_GRAPHICS){os << "VK_SHADER_STAGE_ALL_GRAPHICS, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_ALL){os << "VK_SHADER_STAGE_ALL, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_VERTEX_BIT){os << "VK_SHADER_STAGE_VERTEX_BIT, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR){os << "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV){os << "VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_MESH_BIT_EXT){os << "VK_SHADER_STAGE_MESH_BIT_EXT, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_MESH_BIT_NV){os << "VK_SHADER_STAGE_MESH_BIT_NV, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_FRAGMENT_BIT){os << "VK_SHADER_STAGE_FRAGMENT_BIT, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI){os << "VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT){os << "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_MISS_BIT_KHR){os << "VK_SHADER_STAGE_MISS_BIT_KHR, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_MISS_BIT_NV){os << "VK_SHADER_STAGE_MISS_BIT_NV, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM){os << "VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_RAYGEN_BIT_KHR){os << "VK_SHADER_STAGE_RAYGEN_BIT_KHR, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_RAYGEN_BIT_NV){os << "VK_SHADER_STAGE_RAYGEN_BIT_NV, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT){os << "VK_SHADER_STAGE_COMPUTE_BIT, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT){os << "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_INTERSECTION_BIT_KHR){os << "VK_SHADER_STAGE_INTERSECTION_BIT_KHR, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_INTERSECTION_BIT_NV){os << "VK_SHADER_STAGE_INTERSECTION_BIT_NV, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_ANY_HIT_BIT_KHR){os << "VK_SHADER_STAGE_ANY_HIT_BIT_KHR, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_ANY_HIT_BIT_NV){os << "VK_SHADER_STAGE_ANY_HIT_BIT_NV, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI){os << "VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_TASK_BIT_EXT){os << "VK_SHADER_STAGE_TASK_BIT_EXT, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_TASK_BIT_NV){os << "VK_SHADER_STAGE_TASK_BIT_NV, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_GEOMETRY_BIT){os << "VK_SHADER_STAGE_GEOMETRY_BIT, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_CALLABLE_BIT_KHR){os << "VK_SHADER_STAGE_CALLABLE_BIT_KHR, "; }
   
       if(src == VkShaderStageFlagBits::VK_SHADER_STAGE_CALLABLE_BIT_NV){os << "VK_SHADER_STAGE_CALLABLE_BIT_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkShadingRatePaletteEntryNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV, "; }
   
       if(src == VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV){os << "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSharingMode const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSharingMode::VK_SHARING_MODE_EXCLUSIVE){os << "VK_SHARING_MODE_EXCLUSIVE, "; }
   
       if(src == VkSharingMode::VK_SHARING_MODE_CONCURRENT){os << "VK_SHARING_MODE_CONCURRENT, "; }
   
       if(src == VkSharingMode::VK_SHARING_MODE_MAX_ENUM){os << "VK_SHARING_MODE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSparseImageFormatFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT){os << "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT, "; }
   
       if(src == VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT){os << "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT, "; }
   
       if(src == VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM){os << "VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT){os << "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSparseMemoryBindFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSparseMemoryBindFlagBits::VK_SPARSE_MEMORY_BIND_METADATA_BIT){os << "VK_SPARSE_MEMORY_BIND_METADATA_BIT, "; }
   
       if(src == VkSparseMemoryBindFlagBits::VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM){os << "VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkStencilFaceFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkStencilFaceFlagBits::VK_STENCIL_FACE_FRONT_AND_BACK){os << "VK_STENCIL_FACE_FRONT_AND_BACK, "; }
   
       if(src == VkStencilFaceFlagBits::VK_STENCIL_FRONT_AND_BACK){os << "VK_STENCIL_FRONT_AND_BACK, "; }
   
       if(src == VkStencilFaceFlagBits::VK_STENCIL_FACE_FRONT_BIT){os << "VK_STENCIL_FACE_FRONT_BIT, "; }
   
       if(src == VkStencilFaceFlagBits::VK_STENCIL_FACE_BACK_BIT){os << "VK_STENCIL_FACE_BACK_BIT, "; }
   
       if(src == VkStencilFaceFlagBits::VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM){os << "VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkStencilOp const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkStencilOp::VK_STENCIL_OP_KEEP){os << "VK_STENCIL_OP_KEEP, "; }
   
       if(src == VkStencilOp::VK_STENCIL_OP_ZERO){os << "VK_STENCIL_OP_ZERO, "; }
   
       if(src == VkStencilOp::VK_STENCIL_OP_REPLACE){os << "VK_STENCIL_OP_REPLACE, "; }
   
       if(src == VkStencilOp::VK_STENCIL_OP_MAX_ENUM){os << "VK_STENCIL_OP_MAX_ENUM, "; }
   
       if(src == VkStencilOp::VK_STENCIL_OP_INCREMENT_AND_CLAMP){os << "VK_STENCIL_OP_INCREMENT_AND_CLAMP, "; }
   
       if(src == VkStencilOp::VK_STENCIL_OP_DECREMENT_AND_CLAMP){os << "VK_STENCIL_OP_DECREMENT_AND_CLAMP, "; }
   
       if(src == VkStencilOp::VK_STENCIL_OP_INVERT){os << "VK_STENCIL_OP_INVERT, "; }
   
       if(src == VkStencilOp::VK_STENCIL_OP_INCREMENT_AND_WRAP){os << "VK_STENCIL_OP_INCREMENT_AND_WRAP, "; }
   
       if(src == VkStencilOp::VK_STENCIL_OP_DECREMENT_AND_WRAP){os << "VK_STENCIL_OP_DECREMENT_AND_WRAP, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkStructureType const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkStructureType::VK_STRUCTURE_TYPE_APPLICATION_INFO){os << "VK_STRUCTURE_TYPE_APPLICATION_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EVENT_CREATE_INFO){os << "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PRESENT_INFO_KHR){os << "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR){os << "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD){os << "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR){os << "VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV){os << "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX){os << "VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX){os << "VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX){os << "VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD){os << "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDERING_INFO){os << "VK_STRUCTURE_TYPE_RENDERING_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDERING_INFO_KHR){os << "VK_STRUCTURE_TYPE_RENDERING_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO){os << "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR){os << "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR){os << "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT){os << "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD){os << "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV){os << "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX){os << "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP){os << "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO){os << "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV){os << "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV){os << "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV){os << "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV){os << "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2){os << "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2){os << "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2){os << "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2){os << "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO){os << "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR){os << "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR){os << "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO){os << "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR){os << "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO){os << "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR){os << "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT){os << "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN){os << "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES){os << "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES){os << "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO){os << "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO){os << "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR){os << "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES){os << "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR){os << "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR){os << "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT){os << "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR){os << "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT){os << "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT){os << "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT){os << "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT){os << "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE){os << "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_HDR_METADATA_EXT){os << "VK_STRUCTURE_TYPE_HDR_METADATA_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO){os << "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO){os << "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR){os << "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO){os << "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR){os << "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2){os << "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR){os << "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2){os << "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR){os << "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2){os << "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR){os << "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2){os << "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR){os << "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2){os << "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO){os << "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR){os << "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_END_INFO){os << "VK_STRUCTURE_TYPE_SUBPASS_END_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR){os << "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR){os << "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES){os << "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR){os << "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR){os << "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR){os << "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR){os << "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR){os << "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO){os << "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR){os << "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR){os << "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR){os << "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR){os << "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK){os << "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK){os << "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS){os << "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO){os << "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID){os << "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID){os << "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID){os << "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID){os << "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID){os << "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID){os << "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID){os << "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK){os << "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT){os << "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT){os << "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT){os << "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO){os << "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2){os << "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2){os << "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2){os << "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2){os << "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2){os << "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2){os << "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR){os << "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO){os << "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR){os << "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR){os << "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR){os << "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR){os << "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO){os << "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO){os << "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR){os << "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO){os << "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR){os << "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO){os << "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES){os << "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO){os << "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR){os << "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO){os << "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR){os << "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT){os << "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT){os << "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_NV){os << "VK_STRUCTURE_TYPE_GEOMETRY_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV){os << "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV){os << "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV){os << "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV){os << "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD){os << "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT){os << "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD){os << "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP){os << "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE){os << "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR){os << "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV){os << "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO){os << "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR){os << "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO){os << "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR){os << "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO){os << "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR){os << "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL){os << "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL){os << "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL){os << "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL){os << "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL){os << "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL){os << "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL){os << "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD){os << "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD){os << "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR){os << "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR){os << "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT){os << "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR){os << "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT){os << "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR){os << "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO){os << "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT){os << "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR){os << "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV){os << "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT){os << "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT){os << "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO){os << "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO){os << "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT){os << "VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT){os << "VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT){os << "VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT){os << "VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV){os << "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV){os << "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV){os << "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM){os << "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT){os << "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR){os << "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV){os << "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PRESENT_ID_KHR){os << "VK_STRUCTURE_TYPE_PRESENT_ID_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR){os << "VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT){os << "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT){os << "VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT){os << "VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT){os << "VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT){os << "VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT){os << "VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT){os << "VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_BARRIER_2){os << "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR){os << "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2){os << "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR){os << "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2){os << "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEPENDENCY_INFO){os << "VK_STRUCTURE_TYPE_DEPENDENCY_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR){os << "VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO_2){os << "VK_STRUCTURE_TYPE_SUBMIT_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO){os << "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR){os << "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV){os << "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV){os << "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT){os << "VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT){os << "VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM){os << "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2){os << "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2){os << "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2){os << "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2){os << "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2){os << "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2){os << "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR){os << "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COPY_2){os << "VK_STRUCTURE_TYPE_BUFFER_COPY_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR){os << "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_COPY_2){os << "VK_STRUCTURE_TYPE_IMAGE_COPY_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_BLIT_2){os << "VK_STRUCTURE_TYPE_IMAGE_BLIT_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2){os << "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR){os << "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2){os << "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR){os << "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT){os << "VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT){os << "VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT){os << "VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE){os << "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT){os << "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT){os << "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT){os << "VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3){os << "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR){os << "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA){os << "VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA){os << "VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA){os << "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA){os << "VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA){os << "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI){os << "VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV){os << "VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT){os << "VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT){os << "VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX){os << "VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT){os << "VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT){os << "VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT){os << "VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT){os << "VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT){os << "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT){os << "VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT){os << "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS){os << "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS){os << "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR){os << "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM){os << "VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT){os << "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG){os << "VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG){os << "VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT){os << "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT){os << "VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV){os << "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV){os << "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV){os << "VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV){os << "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM){os << "VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC){os << "VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO){os << "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO){os << "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO){os << "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO){os << "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MAX_ENUM){os << "VK_STRUCTURE_TYPE_MAX_ENUM, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO){os << "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO){os << "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO){os << "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET){os << "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET){os << "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO){os << "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO){os << "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO){os << "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO){os << "VK_STRUCTURE_TYPE_SUBMIT_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO){os << "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO){os << "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER){os << "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER){os << "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_BARRIER){os << "VK_STRUCTURE_TYPE_MEMORY_BARRIER, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO){os << "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES){os << "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE){os << "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_BIND_SPARSE_INFO){os << "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_FENCE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, "; }
   
       if(src == VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO){os << "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSubgroupFeatureFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_BASIC_BIT){os << "VK_SUBGROUP_FEATURE_BASIC_BIT, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_QUAD_BIT){os << "VK_SUBGROUP_FEATURE_QUAD_BIT, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_SHUFFLE_BIT){os << "VK_SUBGROUP_FEATURE_SHUFFLE_BIT, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_VOTE_BIT){os << "VK_SUBGROUP_FEATURE_VOTE_BIT, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM){os << "VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV){os << "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT){os << "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_ARITHMETIC_BIT){os << "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_CLUSTERED_BIT){os << "VK_SUBGROUP_FEATURE_CLUSTERED_BIT, "; }
   
       if(src == VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_BALLOT_BIT){os << "VK_SUBGROUP_FEATURE_BALLOT_BIT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSubmitFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSubmitFlagBits::VK_SUBMIT_PROTECTED_BIT){os << "VK_SUBMIT_PROTECTED_BIT, "; }
   
       if(src == VkSubmitFlagBits::VK_SUBMIT_PROTECTED_BIT_KHR){os << "VK_SUBMIT_PROTECTED_BIT_KHR, "; }
   
       if(src == VkSubmitFlagBits::VK_SUBMIT_FLAG_BITS_MAX_ENUM){os << "VK_SUBMIT_FLAG_BITS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSubpassContents const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSubpassContents::VK_SUBPASS_CONTENTS_INLINE){os << "VK_SUBPASS_CONTENTS_INLINE, "; }
   
       if(src == VkSubpassContents::VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS){os << "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS, "; }
   
       if(src == VkSubpassContents::VK_SUBPASS_CONTENTS_MAX_ENUM){os << "VK_SUBPASS_CONTENTS_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSubpassDescriptionFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX){os << "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT){os << "VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM){os << "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT){os << "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX){os << "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM){os << "VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM){os << "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT){os << "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM){os << "VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM){os << "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT){os << "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT, "; }
   
       if(src == VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM){os << "VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSubpassMergeStatusEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_MERGED_EXT){os << "VK_SUBPASS_MERGE_STATUS_MERGED_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT){os << "VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT){os << "VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT, "; }
   
       if(src == VkSubpassMergeStatusEXT::VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT){os << "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSurfaceCounterFlagBitsEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_VBLANK_BIT_EXT){os << "VK_SURFACE_COUNTER_VBLANK_BIT_EXT, "; }
   
       if(src == VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_VBLANK_EXT){os << "VK_SURFACE_COUNTER_VBLANK_EXT, "; }
   
       if(src == VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT){os << "VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSurfaceTransformFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR){os << "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR){os << "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR){os << "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR){os << "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR){os << "VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR){os << "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR){os << "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR){os << "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR){os << "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR, "; }
   
       if(src == VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR){os << "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSwapchainCreateFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR){os << "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR, "; }
   
       if(src == VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR){os << "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR, "; }
   
       if(src == VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR){os << "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR, "; }
   
       if(src == VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT){os << "VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkSystemAllocationScope const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_COMMAND){os << "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND, "; }
   
       if(src == VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_OBJECT){os << "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT, "; }
   
       if(src == VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_CACHE){os << "VK_SYSTEM_ALLOCATION_SCOPE_CACHE, "; }
   
       if(src == VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM){os << "VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM, "; }
   
       if(src == VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_DEVICE){os << "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE, "; }
   
       if(src == VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE){os << "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkTessellationDomainOrigin const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT){os << "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT, "; }
   
       if(src == VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR){os << "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR, "; }
   
       if(src == VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT){os << "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT, "; }
   
       if(src == VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR){os << "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR, "; }
   
       if(src == VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM){os << "VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkTimeDomainEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkTimeDomainEXT::VK_TIME_DOMAIN_DEVICE_EXT){os << "VK_TIME_DOMAIN_DEVICE_EXT, "; }
   
       if(src == VkTimeDomainEXT::VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT){os << "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT, "; }
   
       if(src == VkTimeDomainEXT::VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT){os << "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT, "; }
   
       if(src == VkTimeDomainEXT::VK_TIME_DOMAIN_MAX_ENUM_EXT){os << "VK_TIME_DOMAIN_MAX_ENUM_EXT, "; }
   
       if(src == VkTimeDomainEXT::VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT){os << "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkToolPurposeFlagBits const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_VALIDATION_BIT){os << "VK_TOOL_PURPOSE_VALIDATION_BIT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_VALIDATION_BIT_EXT){os << "VK_TOOL_PURPOSE_VALIDATION_BIT_EXT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT){os << "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT){os << "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_PROFILING_BIT){os << "VK_TOOL_PURPOSE_PROFILING_BIT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_PROFILING_BIT_EXT){os << "VK_TOOL_PURPOSE_PROFILING_BIT_EXT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM){os << "VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT){os << "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_TRACING_BIT){os << "VK_TOOL_PURPOSE_TRACING_BIT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_TRACING_BIT_EXT){os << "VK_TOOL_PURPOSE_TRACING_BIT_EXT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT){os << "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT){os << "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT, "; }
   
       if(src == VkToolPurposeFlagBits::VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT){os << "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkValidationCacheHeaderVersionEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkValidationCacheHeaderVersionEXT::VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT){os << "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT, "; }
   
       if(src == VkValidationCacheHeaderVersionEXT::VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT){os << "VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkValidationCheckEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkValidationCheckEXT::VK_VALIDATION_CHECK_ALL_EXT){os << "VK_VALIDATION_CHECK_ALL_EXT, "; }
   
       if(src == VkValidationCheckEXT::VK_VALIDATION_CHECK_SHADERS_EXT){os << "VK_VALIDATION_CHECK_SHADERS_EXT, "; }
   
       if(src == VkValidationCheckEXT::VK_VALIDATION_CHECK_MAX_ENUM_EXT){os << "VK_VALIDATION_CHECK_MAX_ENUM_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkValidationFeatureDisableEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_ALL_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_ALL_EXT, "; }
   
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT, "; }
   
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT, "; }
   
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT, "; }
   
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT, "; }
   
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT, "; }
   
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT, "; }
   
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT, "; }
   
       if(src == VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT){os << "VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkValidationFeatureEnableEXT const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT){os << "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT, "; }
   
       if(src == VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT){os << "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT, "; }
   
       if(src == VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT){os << "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT, "; }
   
       if(src == VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT){os << "VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT, "; }
   
       if(src == VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT){os << "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT, "; }
   
       if(src == VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT){os << "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVendorId const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVendorId::VK_VENDOR_ID_VIV){os << "VK_VENDOR_ID_VIV, "; }
   
       if(src == VkVendorId::VK_VENDOR_ID_VSI){os << "VK_VENDOR_ID_VSI, "; }
   
       if(src == VkVendorId::VK_VENDOR_ID_KAZAN){os << "VK_VENDOR_ID_KAZAN, "; }
   
       if(src == VkVendorId::VK_VENDOR_ID_CODEPLAY){os << "VK_VENDOR_ID_CODEPLAY, "; }
   
       if(src == VkVendorId::VK_VENDOR_ID_MESA){os << "VK_VENDOR_ID_MESA, "; }
   
       if(src == VkVendorId::VK_VENDOR_ID_POCL){os << "VK_VENDOR_ID_POCL, "; }
   
       if(src == VkVendorId::VK_VENDOR_ID_MAX_ENUM){os << "VK_VENDOR_ID_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVertexInputRate const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVertexInputRate::VK_VERTEX_INPUT_RATE_VERTEX){os << "VK_VERTEX_INPUT_RATE_VERTEX, "; }
   
       if(src == VkVertexInputRate::VK_VERTEX_INPUT_RATE_INSTANCE){os << "VK_VERTEX_INPUT_RATE_INSTANCE, "; }
   
       if(src == VkVertexInputRate::VK_VERTEX_INPUT_RATE_MAX_ENUM){os << "VK_VERTEX_INPUT_RATE_MAX_ENUM, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoCapabilityFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoCapabilityFlagBitsKHR::VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR){os << "VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR, "; }
   
       if(src == VkVideoCapabilityFlagBitsKHR::VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR){os << "VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR, "; }
   
       if(src == VkVideoCapabilityFlagBitsKHR::VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoChromaSubsamplingFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoChromaSubsamplingFlagBitsKHR::VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR){os << "VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR, "; }
   
       if(src == VkVideoChromaSubsamplingFlagBitsKHR::VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR){os << "VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR, "; }
   
       if(src == VkVideoChromaSubsamplingFlagBitsKHR::VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR){os << "VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR, "; }
   
       if(src == VkVideoChromaSubsamplingFlagBitsKHR::VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkVideoChromaSubsamplingFlagBitsKHR::VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR){os << "VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR, "; }
   
       if(src == VkVideoChromaSubsamplingFlagBitsKHR::VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR){os << "VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoCodecOperationFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoCodecOperationFlagBitsKHR::VK_VIDEO_CODEC_OPERATION_NONE_KHR){os << "VK_VIDEO_CODEC_OPERATION_NONE_KHR, "; }
   
       if(src == VkVideoCodecOperationFlagBitsKHR::VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR){os << "VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR, "; }
   
       if(src == VkVideoCodecOperationFlagBitsKHR::VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT){os << "VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT, "; }
   
       if(src == VkVideoCodecOperationFlagBitsKHR::VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR){os << "VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR, "; }
   
       if(src == VkVideoCodecOperationFlagBitsKHR::VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkVideoCodecOperationFlagBitsKHR::VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT){os << "VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoCodingControlFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoCodingControlFlagBitsKHR::VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR){os << "VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR, "; }
   
       if(src == VkVideoCodingControlFlagBitsKHR::VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR){os << "VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR, "; }
   
       if(src == VkVideoCodingControlFlagBitsKHR::VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkVideoCodingControlFlagBitsKHR::VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_LAYER_BIT_KHR){os << "VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_LAYER_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoComponentBitDepthFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoComponentBitDepthFlagBitsKHR::VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR){os << "VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR, "; }
   
       if(src == VkVideoComponentBitDepthFlagBitsKHR::VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR){os << "VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR, "; }
   
       if(src == VkVideoComponentBitDepthFlagBitsKHR::VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR){os << "VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR, "; }
   
       if(src == VkVideoComponentBitDepthFlagBitsKHR::VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkVideoComponentBitDepthFlagBitsKHR::VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR){os << "VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoDecodeCapabilityFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoDecodeCapabilityFlagBitsKHR::VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR){os << "VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR, "; }
   
       if(src == VkVideoDecodeCapabilityFlagBitsKHR::VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR){os << "VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR, "; }
   
       if(src == VkVideoDecodeCapabilityFlagBitsKHR::VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoDecodeUsageFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoDecodeUsageFlagBitsKHR::VK_VIDEO_DECODE_USAGE_DEFAULT_KHR){os << "VK_VIDEO_DECODE_USAGE_DEFAULT_KHR, "; }
   
       if(src == VkVideoDecodeUsageFlagBitsKHR::VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR){os << "VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR, "; }
   
       if(src == VkVideoDecodeUsageFlagBitsKHR::VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR){os << "VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR, "; }
   
       if(src == VkVideoDecodeUsageFlagBitsKHR::VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkVideoDecodeUsageFlagBitsKHR::VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR){os << "VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoEncodeCapabilityFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoEncodeCapabilityFlagBitsKHR::VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR){os << "VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR, "; }
   
       if(src == VkVideoEncodeCapabilityFlagBitsKHR::VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoEncodeContentFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoEncodeContentFlagBitsKHR::VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR){os << "VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR, "; }
   
       if(src == VkVideoEncodeContentFlagBitsKHR::VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR){os << "VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR, "; }
   
       if(src == VkVideoEncodeContentFlagBitsKHR::VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR){os << "VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR, "; }
   
       if(src == VkVideoEncodeContentFlagBitsKHR::VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkVideoEncodeContentFlagBitsKHR::VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR){os << "VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoEncodeRateControlModeFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoEncodeRateControlModeFlagBitsKHR::VK_VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR){os << "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR, "; }
   
       if(src == VkVideoEncodeRateControlModeFlagBitsKHR::VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR){os << "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR, "; }
   
       if(src == VkVideoEncodeRateControlModeFlagBitsKHR::VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR){os << "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR, "; }
   
       if(src == VkVideoEncodeRateControlModeFlagBitsKHR::VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoEncodeTuningModeKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoEncodeTuningModeKHR::VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR){os << "VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR, "; }
   
       if(src == VkVideoEncodeTuningModeKHR::VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR){os << "VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR, "; }
   
       if(src == VkVideoEncodeTuningModeKHR::VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR){os << "VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR, "; }
   
       if(src == VkVideoEncodeTuningModeKHR::VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR){os << "VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR, "; }
   
       if(src == VkVideoEncodeTuningModeKHR::VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR){os << "VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR, "; }
   
       if(src == VkVideoEncodeTuningModeKHR::VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR){os << "VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoEncodeUsageFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoEncodeUsageFlagBitsKHR::VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR){os << "VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR, "; }
   
       if(src == VkVideoEncodeUsageFlagBitsKHR::VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR){os << "VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR, "; }
   
       if(src == VkVideoEncodeUsageFlagBitsKHR::VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR){os << "VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR, "; }
   
       if(src == VkVideoEncodeUsageFlagBitsKHR::VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       if(src == VkVideoEncodeUsageFlagBitsKHR::VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR){os << "VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR, "; }
   
       if(src == VkVideoEncodeUsageFlagBitsKHR::VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR){os << "VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkVideoSessionCreateFlagBitsKHR const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkVideoSessionCreateFlagBitsKHR::VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR){os << "VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR, "; }
   
       if(src == VkVideoSessionCreateFlagBitsKHR::VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR){os << "VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR, "; }
   
       os << std::endl;
   }
   
   template <>
   inline void Print(VkViewportCoordinateSwizzleNV const& src, std::string srcName, std::ostream & os, size_t indent ){
       std::string indentString(indent * 4, ' ');
       os << indentString << srcName << " ";
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV, "; }
   
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV, "; }
   
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV, "; }
   
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV, "; }
   
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV, "; }
   
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV, "; }
   
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV, "; }
   
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV, "; }
   
       if(src == VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV){os << "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV, "; }
   
       os << std::endl;
   }
   
