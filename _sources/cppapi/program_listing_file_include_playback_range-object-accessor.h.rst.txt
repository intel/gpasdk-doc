
.. _program_listing_file_include_playback_range-object-accessor.h:

Program Listing for File range-object-accessor.h
================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_range-object-accessor.h>` (``include/playback/range-object-accessor.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   #pragma once
   
   #include "igpa-config.h"
   #include <stdint.h>
   #include <set>
   
   namespace gpa {
   namespace playback {
   
   class Callable;
   class CallableCache;
   
   class RangeObjectAccessor
   {
   public:
       RangeObjectAccessor(CallableCache* cache);
       ~RangeObjectAccessor();
   
       void* GetDeviceFromCall(uint64_t index);
       void* GetCommandBufferFromCall(uint64_t index, bool returnKey = false);
       void* GetPrimaryCommandBufferFromCall(uint64_t index, bool returnKey = false);
       void* GetCommandQueueFromCall(uint64_t index, bool returnKey = false);
       bool IsSecondaryCommandBufferBoundaryCall(uint64_t index);
       void* GetInstanceFromCall(uint64_t index, bool returnKey = false);
       void* GetPhysicalDeviceFromCall(uint64_t index, bool returnKey = false);
   #if defined(HAVE_DIRECTX)
       bool IsD3d11Callable(uint64_t index);
   #endif
   
   private:
       uint64_t GetNextSecondaryBufferExecutionCallIndex(uint64_t index);
   
       CallableCache* mCache;
   };
   
   }  // namespace playback
   }  // namespace gpa
