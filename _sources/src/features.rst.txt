.. _features:

===============
Features
===============

|GPASDK| provides a varying level of feature support based on the used graphics APIs and platforms. This table describes major functionalities.

.. include:: features_table.rst

Capture and Playback
=====================

.. _features_basic_c_and_p:

Basic Capture and Playback
---------------------------

Capture a stream with gpa-injector, and play it back with gpa-player. Streams are captured through the duration of the application's lifetime. Basic stream capture requires playback from the beginning of the stream.

.. _features_keyframing:

Keyframing Capture
-------------------

Capture a stream with gpa-injector, and play it back with gpa-player having the ability to insert keyframes. Streams are captured through the duration of the application's lifetime. Keyframed stream capture can be played back from the beginning of the stream or from a given keyframe.

.. _features_deferred_capture:

Deferred Capture
-------------------

Deferred Capture, as the name suggests allows stream capture to begin at any point time after a workload is launched via gpa-injector with a keypress (default is L key). The same keybinding can start and stop capture while a workload is injected.

.. _features_range_repeat:

Range Repeat
-------------

Select a range in stream and replay continuously (loop N times).

Stream Analysis
================

Features exposed through the programmatic interfaces.

.. _features_metrics:

Metric Collection
------------------

Collect hardware metrics for a given range within a stream. Metric collection is requested at playback time through the C++ and Python interfaces.

.. _features_experiments:

Experiments
------------

Apply experiments and replay a range with the experiment applied within a stream. Experiments are applied at playback time through the C++ and Python interfaces.

.. _features_metadata_extraction:

Metadata Extraction
--------------------

Access metadata information associated with resources. For example, textures can expose format, dimensions, etc.

.. _features_resource_extraction:

Resource Extraction
--------------------

Extract resources from C++ and Python interfaces, including:

- Buffers
- Textures
- Shaders
- among other resource types

.. _features_api_inspection:

API Call Inspection
--------------------

Analyze a stream with the C++ and Python interfaces without requiring playback.

Layers
=======

.. _features_hud_layer:

Heads-Up Display(HUD) Layer
----------------------------

Displays HUD with FPS

.. _features_screenshot_layer:

Screenshot Layer
-----------------

Grabs screenshots from the injected application

.. _features_logging_layer:

Logging Layer
--------------

Logs API commands from the injected application

.. _api_debug_layer:

Api Debug Layer
----------------

Print the output of the current graphics api's debug layer

.. _device_override_layer:

Device Override Layer
---------------------

Override the default graphics device and choose another inslalled device

.. _features_custom_layers:

Custom (User) Layers
---------------------

Creates custom layers and intercepts API calls

.. include:: aliases.rst
