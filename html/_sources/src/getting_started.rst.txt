.. _getting_started:

================
Getting Started
================

Use this guide to learn how to use the |GPASDK| to do the following:

- Capture a stream of a running application using :ref:`gpa-injector`
- Play the stream back using :ref:`gpa-player`
- Become familiar with the layering system

Introduction
=============

From the root folder, where |GPASDK| was unzipped, navigate to:

.. code-block:: console

    cd bin/Release/

The root folder contains all utilities used within the |GPASDK|, including the layers.

The following utilities control capture and playback of applications, respectively:

.. code-block:: console

    > gpa-injector
    > gpa-player

:ref:`gpa-injector` takes in the executable of the application to capture and controls injection of the graphics API.

:ref:`gpa-player` takes a stream folder as input and plays back the given stream.

To learn more about the utilities capabilities and parameters, refer to the :ref:`utilities` reference page.

Layer Framework Primer
=======================

|GPASDK| provides a cross-platform, cross-API layer system similar to the Vulkan* layer paradigm. The layers control what is intercepted and can inject the required code. For example, the :ref:`hud_layer` hooks the Present equivalent function calls across graphics APIs and injects the required code to create an overlay on the rendered surface.

:ref:`gpa-injector` and :ref:`gpa-player` take layers as input, but the :ref:`capture_layer` layer is exclusive to the :ref:`gpa-injector` application. This layer controls graphics APIs capturing and serialization into the generated multi-frame capture stream files.

You can specify layers with the `--layer [layer_name]` flag. The available layers are stored in the `bin/Release/layers` folder. 

.. note::

    Layer usage and available parameters can be queried by supplying the desired layer to the `gpa-help.exe` executable.

|GPASDK| is packaged with various utility layers and allows users to create custom layers. To learn more about the :ref:`capture_layer` layer and other available layers, see the :ref:`layers` page. The :ref:`hello_simple_layer` and :ref:`hello_generated_layer` samples are a great starting point to create custom layers.

Capture a Stream
==================

To capture and playback an application, run the following command:

.. code-block:: console

    > gpa-injector --layer capture [path_to_executable]

.. note::

    :ref:`gpa-injector` does not capture data from the running application. The data is captured by the :ref:`capture_layer` layer.

The command starts execution of the application specified by `[path_to_executable]` with the :ref:`capture_layer` layer instrumented. The :ref:`capture_layer` layer records all graphics API commands issued by the application and saves them into a stream file in the user `[user]/Documents/GPA/` folder.

.. note::

    |GPASDK| instruments and captures only the graphics APIs from the :ref:`supported_graphics_apis`.

Capturing lasts while the executable is running. To stop capturing, exit, close or force close the application once the desired information is gathered in a stream. A new stream file is stored in `[user]/Documents/GPA/[stream_folder]`. The name of `[stream_folder]` consists of the workload name and the capture date in the DD/MM/YYYY format.

Play Back Stream
==================

To play back a stream, execute the following command:

.. code-block:: console

    > gpa-player [path_to_stream_folder]

The command opens a window to replay the stream contents. On the playback completion, the window closes and :ref:`gpa-player` ends execution.

:ref:`gpa-player` can take several arguments that control a playback mode, a frame to start from (if the stream is captured with enabled keyframing), and optionally repeat a certain range of calls. For more information on the parameters, see the :ref:`utilities` section.

Stack Multiple Layers
=================================

To add the :ref:`hud_layer`, supply the `--layer hud-layer` argument to :ref:`gpa-injector`.

.. note::

    If you include the :ref:`hud_layer` before `--layer capture`, the command is also captured in a stream and played back. To avoid such behavior, include the :ref:`hud_layer` after the :ref:`capture_layer` layer.

You can also use the :ref:`hud_layer` in playback by running the `--post-layer hud-layer` command. The command adds the HUD to the stream playback and can help identify the frame number you may be interested in.

.. _next_steps:

Next Steps
===========

To identify further possible steps, see the :ref:`samples` page to identify a sample that suits your use case.

.. include:: aliases.rst
