
.. _program_listing_file_include_playback_metal-range-repeat-cache.h:

Program Listing for File metal-range-repeat-cache.h
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_metal-range-repeat-cache.h>` (``include/playback/metal-range-repeat-cache.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "playback/range-repeat-cache.h"
   
   #include <queue>
   
   #import <Metal/Metal.h>
   #import <QuartzCore/QuartzCore.h>
   
   #include <list>
   
   namespace gpa {
   
   namespace serialization {
   struct StreamPacketHeaderEx;
   }
   
   namespace playback {
   
   class Callable;
   
   namespace repeat {
   namespace metal {
   
   class DescriptorRangeRepeatCache : public RangeRepeatCache
   {
   public:
       typedef std::shared_ptr<DescriptorRangeRepeatCache> Ptr;
   
       DescriptorRangeRepeatCache(playback::Context* context,
                                  playback::Callable* creationCallable);
       ~DescriptorRangeRepeatCache();
   
       void OnRangeEnter(GPADispatchTable const*& table) override;
       void OnRangeRepeatRecreateObject(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeRepeatRestoreState(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeExit(GPADispatchTable const*& table) override;
       void OnReleaseDuringRange(GPADispatchTable const*& table) override;
   
   private:
       id mDescriptorSnapshot = nil;
   };
   
   class DescriptorArrayRangeRepeatCache : public RangeRepeatCache
   {
   public:
       typedef std::shared_ptr<DescriptorArrayRangeRepeatCache> Ptr;
   
       DescriptorArrayRangeRepeatCache(playback::Context* context,
                                       playback::Callable* creationCallable);
       ~DescriptorArrayRangeRepeatCache();
   
       void OnRangeEnter(GPADispatchTable const*& table) override;
       void OnRangeRepeatRecreateObject(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeRepeatRestoreState(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeExit(GPADispatchTable const*& table) override;
       void OnReleaseDuringRange(GPADispatchTable const*& table) override;
   };
   
   class DrawableRangeRepeatCache : public RangeRepeatCache
   {
   public:
       typedef std::shared_ptr<DrawableRangeRepeatCache> Ptr;
   
       DrawableRangeRepeatCache(playback::Context* context, playback::Callable* creationCallable);
       ~DrawableRangeRepeatCache();
   
       void OnRangeEnter(GPADispatchTable const*& table) override;
       void OnRangeRepeatRecreateObject(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeRepeatRestoreState(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeExit(GPADispatchTable const*& table) override;
       void OnReleaseDuringRange(GPADispatchTable const*& table) override;
   
       void OnPresent();
   
   private:
       CAMetalLayer* mLayer = nil;
       bool mPresented = false;
   };
   
   class CommandBufferRangeRepeatCache : public RangeRepeatCacheForCommandBuffers
   {
   public:
       typedef std::shared_ptr<CommandBufferRangeRepeatCache> Ptr;
   
       CommandBufferRangeRepeatCache(playback::Context* context,
                                     playback::Callable* creationCallable);
       ~CommandBufferRangeRepeatCache();
   
       void OnRangeEnter(GPADispatchTable const*& table) override;
       void OnRangeRepeatRecreateObject(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeRepeatRestoreState(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeExit(GPADispatchTable const*& table) override;
       void OnReleaseDuringRange(GPADispatchTable const*& table) override;
   
       void OnEnqueue();
       void OnCommit();
       bool IsEnqueued() const;
       bool IsCommitted() const;
   
   private:
       bool mEnqueued = false;
       bool mCommitted = false;
   };
   
   class CommandQueueRangeRepeatCache : public RangeRepeatCache
   {
   public:
       typedef std::shared_ptr<CommandQueueRangeRepeatCache> Ptr;
   
       CommandQueueRangeRepeatCache(playback::Context* context,
                                    playback::Callable* creationCallable);
       ~CommandQueueRangeRepeatCache();
   
       void OnRangeEnter(GPADispatchTable const*& table) override;
       void OnRangeRepeatRecreateObject(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeRepeatRestoreState(GPADispatchTable const*& table, uint64_t repeatPass) override;
       void OnRangeExit(GPADispatchTable const*& table) override;
       void OnReleaseDuringRange(GPADispatchTable const*& table) override;
   
       void OnCommandBufferEnqueue(CommandBufferRangeRepeatCache::Ptr cb);
       void OnCommandBufferCommit(CommandBufferRangeRepeatCache::Ptr cb);
   
   private:
       id<MTLCommandQueue> mCurrentQueue = nil;
       std::vector<CommandBufferRangeRepeatCache::Ptr> mEnqueuedBuffers;
   };
   
   }  // namespace metal
   }  // namespace repeat
   }  // namespace playback
   }  // namespace gpa
