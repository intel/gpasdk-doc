
.. _program_listing_file_include_serialization_stream-serializer.h:

Program Listing for File stream-serializer.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_serialization_stream-serializer.h>` (``include/serialization/stream-serializer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "serialization/memorybacked-serializer.h"
   
   namespace gpa {
   namespace serialization {
   
   class Storage;
   
   class StreamSerializer : public MemoryBackedSerializer
   {
   public:
       StreamSerializer(Storage* storage);
       ~StreamSerializer();
   
       // MemoryBackedSerializer implementation
       size_t WriteRawData(void const* src, size_t size) override;
       size_t ReadRawData(void* dst, size_t size) override;
       bool EnsureWriteCapacity(size_t const size) override;
       bool CheckAvailableData(size_t const size) const override;
       void Clear() override;
       bool Seek(int64_t offset, SeekOrigin origin = SeekOrigin::kBegin) override;
       size_t GetPosition() const override;
       uint64_t GetAbsolutePosition() const override;
       void* Get(uint64_t offset) const override;
   
   private:
       Storage* mStorage;
   };
   
   }  // namespace serialization
   }  // namespace gpa
