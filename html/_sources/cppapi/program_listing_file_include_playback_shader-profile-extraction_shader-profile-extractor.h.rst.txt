
.. _program_listing_file_include_playback_shader-profile-extraction_shader-profile-extractor.h:

Program Listing for File shader-profile-extractor.h
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_playback_shader-profile-extraction_shader-profile-extractor.h>` (``include/playback/shader-profile-extraction/shader-profile-extractor.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "playback/callable-receiver.h"
   #include "playback/metadata-extraction/metadata-types.h"
   #include "shader-profiler/types.h"
   
   namespace gpa {
   namespace playback {
   
   struct ProfileShaderRequestWithType : ProfileShaderRequest
   {
       gpa::shader_profiler::ProfilingMode profilingType{gpa::shader_profiler::ProfilingMode::kOverview};
   };
   
   class ShaderProfileExtractor
       : public CallableReceiver
   {
   public:
       virtual ~ShaderProfileExtractor() = 0;
   
       virtual bool IsAvailable() const = 0;
   
       inline virtual void SetRequest(ProfileShaderRequestWithType const& request) = 0;
   
       virtual gpa::shader_profiler::ProfiledShaders GetResult() const = 0;
   };
   
   inline ShaderProfileExtractor::~ShaderProfileExtractor()
   {
   }
   
   inline ShaderStage ResolveShaderStage(gpa::shader_profiler::ShaderStage type)
   {
       switch (type) {
       case gpa::shader_profiler::ShaderStage::kVertex:
           return ShaderStage::kVertex;
       case gpa::shader_profiler::ShaderStage::kHull:
           return ShaderStage::kHull;
       case gpa::shader_profiler::ShaderStage::kDomain:
           return ShaderStage::kDomain;
       case gpa::shader_profiler::ShaderStage::kGeometry:
           return ShaderStage::kGeometry;
       case gpa::shader_profiler::ShaderStage::kMesh:
           return ShaderStage::kMesh;
       case gpa::shader_profiler::ShaderStage::kFragment:
           return ShaderStage::kFragment;
       case gpa::shader_profiler::ShaderStage::kCompute:
           return ShaderStage::kCompute;
       case gpa::shader_profiler::ShaderStage::kLibrary:
           return ShaderStage::kLibrary;
       case gpa::shader_profiler::ShaderStage::kAmplification:
           return ShaderStage::kAmplification;
       default:
           return ShaderStage::kShaderStageInvalid;
       }
   }
   
   inline api_types::ShaderLanguage ResolveShaderLanguage(gpa::shader_profiler::ShaderLanguage type)
   {
       switch (type) {
       case gpa::shader_profiler::ShaderLanguage::kDXBC:
           return api_types::ShaderLanguage::GPA_SHADER_LANGUAGE_DXBC;
       case gpa::shader_profiler::ShaderLanguage::kDXIL:
           return api_types::ShaderLanguage::GPA_SHADER_LANGUAGE_DXIL;
       case gpa::shader_profiler::ShaderLanguage::kGLSL:
           return api_types::ShaderLanguage::GPA_SHADER_LANGUAGE_GLSL;
       case gpa::shader_profiler::ShaderLanguage::kHLSL:
           return api_types::ShaderLanguage::GPA_SHADER_LANGUAGE_HLSL;
       case gpa::shader_profiler::ShaderLanguage::kISA:
           return api_types::ShaderLanguage::GPA_SHADER_LANGUAGE_ISA;
       case gpa::shader_profiler::ShaderLanguage::kSPIRV:
           return api_types::ShaderLanguage::GPA_SHADER_LANGUAGE_SPIRV;
       default:
           return api_types::ShaderLanguage::GPA_SHADER_LANGUAGE_UNKNOWN;
       }
   }
   
   }  // namespace playback
   }  // namespace gpa
