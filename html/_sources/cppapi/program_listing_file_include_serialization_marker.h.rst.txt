
.. _program_listing_file_include_serialization_marker.h:

Program Listing for File marker.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_serialization_marker.h>` (``include/serialization/marker.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /******************************************************************************
   Â© Intel Corporation.
    
   This software and the related documents are Intel copyrighted materials,
   and your use of them is governed by the express license under which they
   were provided to you ("License"). Unless the License provides otherwise,
   you may not use, modify, copy, publish, distribute, disclose or transmit
   this software or the related documents without Intel's prior written
   permission.
   
   
    This software and the related documents are provided as is, with no express
   or implied warranties, other than those that are expressly stated in the
   License.
   
   ******************************************************************************/
   
   #pragma once
   
   #include "operations/operation.h"
   
   namespace gpa {
   namespace serialization {
   
   enum MarkerType : uint32_t {
       kUnknownMarker = 0,
       kSecondaryCommandBufferBoundaryMarker = 1,
       kExecuteSecondaryCommandBuffersMarker = 2,
       kSubmissionBatchBoundaryMarker = 3,
       kKeyframeRecordStartMarker = 100,
       kKeyframeRecordEndMarker = 101,
       kvkSecondaryCommandBufferBoundaryMarker = kSecondaryCommandBufferBoundaryMarker,
       kvkExecuteSecondaryCommandBuffersMarker = kExecuteSecondaryCommandBuffersMarker,
       kvkSubmissionBatchBoundaryMarker = kSubmissionBatchBoundaryMarker
   };
   
   struct Marker : public serialization::Operation
   {
       Marker();
       Marker(uint32_t markerType, uint64_t object = 0, uint64_t timestamp = 0);
       ~Marker();
   
       virtual char const *GetName() const;
   
       virtual size_t Serialize(MemoryBackedSerializer *) const;
       virtual size_t Deserialize(MemoryBackedSerializer *);
   
       virtual uint32_t GetParamsCount() const;
       virtual Argument const *GetParam(uint32_t index, void const **outValue, bool postExecute = false) const;
   
       uint64_t objectKey;
       uint32_t type;
   };
   
   }  // namespace serialization
   }  // namespace gpa
